{"file_contents":{"Journal.md":{"content":"Journal\n- June 24, 2025. Initial setup\n- June 24, 2025. Implemented message notification system with unread badges\n- June 24, 2025. Fixed file upload UI consistency between admin and officer\n- June 24, 2025. Added comprehensive file download debugging for admin-to-officer transfers\n- June 24, 2025. Fixed React hooks violation in chat interface and implemented granular message read tracking\n- June 24, 2025. Fixed report review display to show officer names and project names instead of IDs\n- June 24, 2025. Enhanced footer with social media links and extended Quick Links (Pricing, FAQ, Support, Documentation)\n- June 24, 2025. Created Privacy Policy and Terms of Service pages with professional content and routing\n- June 24, 2025. Enhanced legal pages with modern design featuring hero sections, color-coded cards, glassmorphism effects, and professional iconography\n- June 24, 2025. Updated legal pages to match main site theme with light gradient backgrounds instead of dark theme\n- June 24, 2025. Redesigned contact sections in legal pages with enhanced card-based layout, availability indicators, and improved visual hierarchy\n- June 24, 2025. Replaced all mailto links with popup contact forms across landing, Privacy Policy, and Terms of Service pages for better user experience\n- June 25, 2025. Implemented scrollable team members list with 4 visible members at a time for better organization management\n- June 25, 2025. Added search functionality to team members list for quick member lookup by name or email\n- June 25, 2025. Implemented scrollable conversations list with search functionality for admin chat interface\n- June 25, 2025. Optimized conversations display to show exactly 7 conversations at a time with matching layout\n- June 25, 2025. Adjusted conversations to show 7 full conversations with 8th partially visible for better scrolling indication\n- June 25, 2025. Enhanced key action buttons (Add Report, New Project) with improved visibility, sizing, and color-coding for better user experience\n- June 25, 2025. Added scrollable reports display showing maximum 3 reports at a time for better space management in both admin and officer dashboards\n- June 25, 2025. Implemented overdue project notifications with automatic filtering for completed projects and red badge counters on Projects tab\n- June 25, 2025. Fixed deadline calculation accuracy and automatic status updates based on progress completion levels\n- June 25, 2025. Deployed AI Assistant for Officer-Side Report Review with OpenAI integration for intelligent report analysis and improvement suggestions\n- June 25, 2025. Enhanced AI analysis system with comprehensive file parsing (Excel, CSV, JSON, XML, text files) and reduced submission threshold to 40% for more accessible report approval\n- June 25, 2025. Fixed asymmetric file sharing in messaging system between admin and officer roles\n- June 25, 2025. Resolved message sending validation errors by fixing data transmission between client and server\n- June 25, 2025. Updated AdminChatInterface to properly handle both text messages and file uploads with separate endpoints\n- June 25, 2025. Added deadline and original deadline fields to Edit Project form with proper date formatting\n- June 25, 2025. Fixed project status logic to automatically revert completed projects to active when progress drops below 100%\n- June 27, 2025. Implemented report recall functionality allowing officers to withdraw submitted reports before admin review with \"Call Back\" button\n- June 27, 2025. Enhanced officer dashboard with fully functional call back system - pending count displays correctly, officers can recall submitted reports to draft status, and edit recalled reports with improved button styling\n- June 27, 2025. Implemented comprehensive responsive design with smooth transition animations across all dashboard components, forms, and UI elements. Added mobile-first breakpoints, enhanced hover effects, custom animations, and improved accessibility for mobile devices.\n- June 27, 2025. Fixed submit report functionality in edit mode with proper data persistence. Enhanced ReportForm component with TypeScript type safety, proper form data loading for existing reports, and fixed validation issues. Edit functionality now correctly loads existing report data and updates reports without creating duplicates.\n- June 27, 2025. Completed report edit and submission workflow. Fixed cancel button functionality, implemented proper form data loading for draft reports, and corrected submission flow to change report status from \"draft\" to \"submitted\" for admin approval. Reports now properly transition through the approval workflow.\n- June 27, 2025. Implemented comprehensive Dashboard & Analytics enhancements with interactive charts, smart notifications, and performance insights. Added AnalyticsDashboard component with project status distribution pie charts, report trend analysis, budget utilization tracking, and progress analytics. Created SmartNotifications system with intelligent alerts for overdue projects, approaching deadlines, budget warnings, and performance insights. Enhanced both admin and officer dashboards with new Analytics tabs featuring responsive layouts and real-time data visualization using Recharts library.\n- June 27, 2025. Enhanced analytics dashboard visual design with improved color schemes, professional gradients, and enhanced typography. Upgraded metric cards with gradient backgrounds, rounded icon containers, and better contrast ratios. Improved chart styling with donut charts, enhanced tooltips, gradient fills, and professional axis styling. Enhanced smart notifications with priority alert styling, better visual hierarchy, and improved color-coded severity indicators. Upgraded project timeline with professional card layouts and enhanced visual presentation throughout analytics components.\n- June 27, 2025. Implemented comprehensive Budget Utilization Analysis with detailed financial tracking. Added budget summary cards showing total budget, spent amounts, and remaining funds with gradient backgrounds. Created enhanced budget visualization charts with gradient fills, professional tooltips, and currency formatting. Implemented project-level budget breakdown with utilization progress bars and detailed spending metrics for better financial oversight.\n- June 27, 2025. Adjusted Budget Utilization Analysis component size to be more compact with reduced padding, smaller icons, compressed chart height, and optimized text sizes for better space efficiency while maintaining visual appeal and readability.\n- June 27, 2025. Removed budget summary cards from Budget Utilization Analysis component and kept only the clean bar chart visualization to eliminate number display formatting issues and improve visual clarity.\n- June 27, 2025. Fixed tooltip text color across all analytics dashboard charts (Budget Utilization, Project Status Distribution, Progress Distribution) to display white text for better visibility and readability against dark tooltip backgrounds.\n- June 27, 2025. Redesigned complete landing page with comprehensive feature showcase including AI-powered analytics, smart notifications, advanced reporting, budget tracking, and team collaboration. Updated content to be inclusive for all organization types, not just NGOs. Created modern gradient design with smooth animations, interactive sections highlighting AI report analysis, smart notifications system, and comprehensive project management capabilities.\n- June 27, 2025. Enhanced header navigation with professional styling including icons, hover effects, gradient underlines, and smooth-scrolling functionality. Improved navigation items with color-coded sections and interactive elements for better user experience.\n- June 27, 2025. Simplified AI Report Analysis section to \"AI Feedback on Reports\" with clearer value proposition focusing on grammar check, clarity score, and action suggestions provided before admin approval.\n- June 27, 2025. Added comprehensive optional features including AI scoring example (85/100 with sample feedback), PDF export for donors mention, live testimonials from three diverse organizations, and interactive dashboard preview with mock analytics cards showing real metrics and interface design.\n- June 27, 2025. Implemented Interactive PDF Report Preview feature with professional report templates, real admin data integration, and donor-ready formatting. Added PDF Preview button to admin dashboard Reports section with seamless modal integration. Enhanced landing page to showcase professional PDF export capabilities for stakeholder reporting.\n- June 28, 2025. Enhanced PDF Report Preview with distinct template content and real data integration. Created meaningful differences between Progress, Financial, and Analytics report templates using actual organization data. Added Analysis button to overview section for easy access to professional report templates.\n- June 28, 2025. Implemented comprehensive PDF download functionality with dual options: bulk reports for entire organization (named as \"hjhjhj: Project Management Report\") and project-specific reports (named as \"ProjectName: Report Type\"). Added dropdown selection for individual project downloads with professional HTML export format and real-time data integration.\n- June 28, 2025. Removed widgets functionality from both admin and officer dashboards to simplify the interface. Restored original tab structure with 5 tabs: Overview, Projects, Reports, Analytics, and Messages for officers; Overview, Projects, Reports, Analytics, and Team for admins. Fixed PDF report preview layout with improved spacing and responsive design.\n- June 28, 2025. Fixed notification badge system for admin users. Messages tab badge now disappears after 2-second delay when viewing Messages tab. Individual officer conversation badges disappear immediately when viewing specific conversations. Corrected variable reference from selectedOfficer to selectedMemberId to prevent runtime errors.\n- June 28, 2025. Implemented server-side PDF generation using Puppeteer to replace HTML downloads with actual PDF files. Added new API endpoint (/api/generate-pdf) for server-side PDF creation with proper file downloads. Enhanced PDF download UI with professional card-based design, clear descriptions, and improved visual hierarchy. Fixed Reports section layout to properly align PDF Preview and Bulk Report Operations buttons on the same level.\n- June 28, 2025. Fixed persistent message notifications by implementing automatic message read tracking when conversations are opened in admin chat interface. Added proper message marking as read functionality to eliminate \"view message\" notifications that continued showing after messages were already seen. Enhanced notification dismissal logic with localStorage persistence for conversation badges.\n- June 28, 2025. Completely removed floating message notification system per user request. Deleted FloatingMessageNotification component and cleaned up all references from admin and officer dashboards to eliminate persistent notification alerts entirely.\n- June 28, 2025. Implemented comprehensive mobile-friendly responsive design across ADEL platform. Enhanced admin and officer dashboards with mobile breakpoints (sm/md/lg), touch-friendly interfaces, responsive grid layouts, compressed spacing for mobile, adaptive text sizes, mobile-optimized tabs with shortened labels, and improved card layouts for better mobile display. Added mobile-first design principles throughout the application.\n- June 28, 2025. Completed comprehensive mobile-responsive design for landing page with adaptive layouts, mobile-optimized navigation, touch-friendly buttons, responsive hero section with mobile-first breakpoints, mobile-enhanced feature cards with compressed spacing, responsive footer with mobile-friendly social links, and mobile navigation button for smaller screens. Implemented progressive enhancement from mobile (sm) to tablet (md) to desktop (lg) breakpoints throughout entire landing page interface.\n- June 28, 2025. Implemented ultra-mobile optimization for landing page with extreme space efficiency. Created ultra-compact header with 14px height, micro-spacing hero section, compressed feature cards with minimal padding, ultra-compact footer with inline navigation, and extreme mobile-first design targeting small screen devices. Reduced text sizes to xs/sm breakpoints, minimized button padding, compressed social media links, and optimized all spacing for maximum content fitting on mobile screens.\n- June 28, 2025. Enhanced ultra-mobile header optimization with micro-compact design. Reduced header height to 10px (40px), minimized logo to 3x3px with 0.5px padding, compressed text to base size, and created micro-compact Start button with minimal spacing. Optimized for maximum space efficiency on smallest mobile screens while maintaining visual hierarchy and usability.\n- June 28, 2025. Added competitive differentiation section \"Why ADEL over Other Tools?\" to clearly position against Trello and Monday. Highlighted unique NGO-focused features: built-in AI suggestions for reports, donor-ready PDF generation, NGO-tailored approval workflows, and simplified feature set without enterprise complexity. Created mobile-responsive grid with branded color coding and comparison callout emphasizing ADEL's mission-driven organization focus.\n- June 28, 2025. Enhanced landing page with stronger pain point language and AI-focused positioning. Updated hero headline to \"The First Project Management Tool with Built-In AI Report Feedback\" and subtitle addressing specific frustrations: \"No more messy spreadsheets, last-minute donor report panic, or guessing if project is on track.\" Transformed differentiation section titles to problem-focused language: \"No More Report Guesswork,\" \"No More Last-Minute Report Panic,\" \"No More Email Approval Chaos,\" and \"No More Feature Overwhelm.\" Added visual testimonials section with organizational logos, staff photos, and trust indicators showcasing 500+ NGOs and specific user quotes highlighting pain point solutions.\n- June 28, 2025. Updated feature section titles to results-focused language: \"Smart Project Tracking,\" \"Collaborate Securely & Efficiently,\" and \"Approval-Ready Reporting\" to emphasize outcomes over features. Added dedicated \"Why Teams Choose ADEL\" section highlighting built-in AI feedback, ready-to-send PDF donor reports, simplicity for new team members, and NGO-specific workflows. Included call-to-action with value proposition \"Join 500+ NGOs who've eliminated spreadsheet chaos and report panic\" to reinforce problem-solving benefits and social proof.\n- June 28, 2025. Enhanced features section with structured content and clear value propositions. Updated section title to \"All-in-One Platform for Project Success\" with subtitle emphasizing milestone-to-report workflow. Enhanced feature cards with emoji icons, detailed bullet points for capabilities (real-time updates, deadline monitoring, role-based access, PDF previews), and improved content hierarchy with separate descriptions and feature lists for better scanability.\n- June 28, 2025. Redesigned dashboard interfaces with modern, professional aesthetics. Enhanced both admin and officer dashboards with gradient backgrounds, glassmorphism effects with backdrop-blur, rounded-xl containers, and shadow-lg styling. Updated header designs with gradient logos, text-gradient titles, and enhanced spacing. Modernized stats cards with gradient backgrounds, rounded-xl icon containers, hover animations, and improved visual hierarchy. Upgraded tabs containers with backdrop-blur-sm styling and border-white/50 transparency for professional appearance.\n- June 29, 2025. Completely redesigned dashboards with AI-powered insights and concise, easy-to-use interface. Implemented AI Dashboard Service using OpenAI GPT-4o for intelligent project analysis, executive summaries, risk assessment, and actionable recommendations. Created streamlined admin and officer dashboards with prominent AI Insights button, executive summary cards, priority actions, key metrics visualization, and simplified navigation. Added comprehensive AI analysis including project health assessment, completion trends, budget efficiency tracking, team engagement metrics, and smart notifications. Enhanced user experience with compact headers, gradient design elements, and mobile-responsive layouts focused on essential information and AI-driven intelligence.\n- June 29, 2025. Fixed AI report approval rate calculation to use authentic data (68.4% instead of incorrect 100%). Corrected calculation method to use actual approved vs rejected reports from database. Removed problematic empty charts section from AI Executive Summary. AI metrics now display authentic calculated values from real project data including On-Time Delivery: 50%, Budget Efficiency: 80%, Team Engagement: 70%.\n- June 29, 2025. Enhanced AI Executive Summary with comprehensive project analysis including project objectives, key inputs & activities, and performance charts. Added detailed project information display showing individual project goals, budget allocation, team metrics, and resource utilization with color-coded cards. Integrated pie chart visualization for performance metrics with authentic data from project database.\n- June 29, 2025. Completed comprehensive officer dashboard AI Executive Summary enhancement to match admin dashboard functionality. Added project objectives section, key inputs & activities with budget/team metrics, accomplishments & numbers with completion tracking, interactive pie chart visualization for performance metrics (On-Time Delivery 50%, Budget Efficiency 80%, Team Engagement 70%), and detailed project status breakdown with individual project cards showing progress, spending, and remaining budget.\n- June 29, 2025. Fixed officer reports section with enhanced edit and view functionality. Added proper View button for all reports, Edit button for draft and rejected reports, comprehensive view modal with report content, attachments display with download functionality, and review notes display. Enhanced edit modal with proper ReportForm integration for seamless report editing workflow.\n- June 29, 2025. Implemented comprehensive Intuitive Onboarding Walkthrough feature for both admin and officer roles. Created interactive guided tour with step-by-step navigation highlighting key dashboard features including overview metrics, project management, report submission, analytics insights, and team collaboration tools. Added Tour button to dashboard headers with first-time user detection via localStorage. Enhanced user onboarding experience with role-specific walkthrough content and smooth modal transitions.\n```\n","size_bytes":18816},"README.md":{"content":"# ADEL — AI-Powered Project Management & Reporting System\n\n**ADEL** (Automated Data-Enhanced Ledger) is a modern, AI-powered platform for managing projects, tracking field progress, and streamlining report approvals. Built for government agencies, NGOs, and enterprises, ADEL helps teams work smarter with intelligent automation, clean dashboards, and real-time insights.\n\n---\n\n## Features\n\n-  **AI-Enhanced Report Review**  \n  Built-in AI reviews submitted reports, flags inconsistencies, and suggests improvements automatically.\n\n-  **Dynamic Dashboards**  \n  Clear, role-based views for admins, project managers, and field agents.\n\n-  **Structured Report Submission**  \n  Field agents can upload reports with files, images, and documents.\n\n-  **Auto-Progress Tracking**  \n  Project status updates automatically when tasks or milestones are met.\n\n-  **Regional Project Management**  \n  Filter and organize reports by region, project type, or assigned teams.\n\n-  **Smart Notifications**  \n  Real-time alerts for pending approvals, rejected reports, and system activity.\n\n---\n<img width=\"1426\" alt=\"Capture d’écran 2025-06-28 à 23 37 33\" src=\"https://github.com/user-attachments/assets/351eb2c8-283d-4b0a-9b91-f54cacffe9bd\" />\n\n\n##  Who It’s For\n\n- Government and local development agencies  \n- NGOs and nonprofits with regional teams  \n- Project and site managers  \n- Field engineers and technical supervisors\n\n---\n\n<img width=\"1439\" alt=\"Capture d’écran 2025-06-28 à 23 37 12\" src=\"https://github.com/user-attachments/assets/d9526430-1b31-40a1-82f7-df2a39c11db9\" />\n\n##  Tech Stack\n\n- **Backend:** Laravel / Node.js  \n- **Frontend:** Vue.js / React.js  \n- **Database:** MySQL / PostgreSQL  \n- **Hosting:** Vercel, Netlify, DigitalOcean, or any modern cloud provider  \n- **Authentication:** JWT / Laravel Sanctum / Firebase (depending on your stack)\n\n---\n\n##  Installation\n\n<img width=\"1422\" alt=\"Capture d’écran 2025-06-28 à 23 36 58\" src=\"https://github.com/user-attachments/assets/8fb50bae-bad0-46f2-a062-e36a80482a70\" />\n\n\n```bash\n# Clone the repository\ngit clone https://github.com/your-org/adel.git\ncd adel\n\n# Install frontend dependencies\nnpm install\n\n# For Laravel backend\ncomposer install\n\n# Copy and configure environment variables\ncp .env.example .env\n# Edit .env with your DB credentials and app settings\n\n# Run database migrations\nphp artisan migrate --seed\n\n# Start development servers\nnpm run dev        # Frontend\nphp artisan serve  # Backend\n","size_bytes":2482},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1008},"server/aiDashboardService.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface DashboardAnalysisData {\n  totalProjects: number;\n  activeProjects: number;\n  completedProjects: number;\n  overdueProjects: number;\n  averageProgress: number;\n  totalBudget: number;\n  usedBudget: number;\n  pendingReports: number;\n  approvedReports: number;\n  rejectedReports: number;\n  recentActivity: number;\n  teamMembers?: number;\n  projectDeadlines?: any[];\n  projectDetails?: any[];\n}\n\nexport interface AIInsight {\n  type: 'success' | 'warning' | 'info' | 'error';\n  title: string;\n  description: string;\n  action?: string;\n  priority: 'high' | 'medium' | 'low';\n}\n\nexport interface ProjectSummary {\n  overallHealth: 'excellent' | 'good' | 'warning' | 'critical';\n  completionTrend: 'improving' | 'stable' | 'declining';\n  riskProjects: number;\n  upcomingDeadlines: number;\n  budgetUtilization: number;\n  teamProductivity: 'high' | 'medium' | 'low';\n  insights: AIInsight[];\n  executiveSummary: string;\n  keyMetrics: {\n    onTimeDelivery: number;\n    budgetEfficiency: number;\n    teamEngagement: number;\n    riskLevel: 'low' | 'medium' | 'high';\n  };\n  recommendations: string[];\n}\n\nexport class AIDashboardService {\n  async generateDashboardInsights(data: DashboardAnalysisData): Promise<ProjectSummary> {\n    try {\n      const prompt = this.buildAnalysisPrompt(data);\n      \n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert project management analyst with deep expertise in NGO operations, project delivery, and team performance. Analyze project data and provide actionable insights in JSON format.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.1,\n      });\n\n      const analysis = JSON.parse(response.choices[0].message.content || '{}');\n      console.log('Raw AI Analysis Response:', analysis);\n      const validatedAnalysis = this.validateAndFormatAnalysis(analysis, data);\n      console.log('Validated Analysis with keyMetrics:', validatedAnalysis.keyMetrics);\n      return validatedAnalysis;\n      \n    } catch (error) {\n      console.error('AI Dashboard Analysis Error:', error);\n      return this.generateFallbackAnalysis(data);\n    }\n  }\n\n  private buildAnalysisPrompt(data: DashboardAnalysisData): string {\n    const budgetUtilization = data.totalBudget > 0 ? (data.usedBudget / data.totalBudget) * 100 : 0;\n    const completionRate = data.totalProjects > 0 ? (data.completedProjects / data.totalProjects) * 100 : 0;\n    const totalReviewedReports = data.approvedReports + (data.rejectedReports || 0);\n    const approvalRate = totalReviewedReports > 0 ? \n      (data.approvedReports / totalReviewedReports) * 100 : 0;\n\n    return `Analyze this NGO project management data and provide insights in JSON format:\n\nPROJECT DATA:\n- Total Projects: ${data.totalProjects}\n- Active Projects: ${data.activeProjects}\n- Completed Projects: ${data.completedProjects}\n- Overdue Projects: ${data.overdueProjects}\n- Average Progress: ${data.averageProgress.toFixed(1)}%\n- Budget Utilization: ${budgetUtilization.toFixed(1)}%\n- Completion Rate: ${completionRate.toFixed(1)}%\n- Report Approval Rate: ${approvalRate.toFixed(1)}%\n- Recent Activity: ${data.recentActivity} reports this week\n- Team Members: ${data.teamMembers || 'Unknown'}\n\nPROJECT DETAILS:\n${data.projectDetails?.map(p => `\n- ${p.name}: ${p.description || 'No description'}\n  Goals: ${p.goals || 'Not specified'}\n  Status: ${p.status} (${p.progress}% complete)\n  Budget: $${p.budget || 0} (Used: $${p.budgetUsed || 0})\n`).join('') || 'No project details available'}\n\nANALYSIS REQUIREMENTS:\n1. Assess overall project health\n2. Identify completion trends\n3. Calculate risk factors\n4. Evaluate team productivity\n5. Provide 3-5 actionable insights\n6. Generate comprehensive executive summary including:\n   - Project objectives overview\n   - Key inputs and activities\n   - Progress highlights\n   - Resource utilization\n7. Give strategic recommendations\n\nRespond with JSON containing:\n{\n  \"overallHealth\": \"excellent|good|warning|critical\",\n  \"completionTrend\": \"improving|stable|declining\",\n  \"riskProjects\": number,\n  \"upcomingDeadlines\": number,\n  \"budgetUtilization\": number,\n  \"teamProductivity\": \"high|medium|low\",\n  \"executiveSummary\": \"2-3 sentence summary\",\n  \"keyMetrics\": {\n    \"onTimeDelivery\": number (0-100),\n    \"budgetEfficiency\": number (0-100),\n    \"teamEngagement\": number (0-100),\n    \"riskLevel\": \"low|medium|high\"\n  },\n  \"insights\": [\n    {\n      \"type\": \"success|warning|info|error\",\n      \"title\": \"string\",\n      \"description\": \"string\",\n      \"action\": \"string\",\n      \"priority\": \"high|medium|low\"\n    }\n  ],\n  \"recommendations\": [\"string\", \"string\", \"string\"]\n}`;\n  }\n\n  private validateAndFormatAnalysis(analysis: any, data: DashboardAnalysisData): ProjectSummary {\n    const budgetUtilization = data.totalBudget > 0 ? Math.round((data.usedBudget / data.totalBudget) * 100) : 0;\n    \n    // Calculate reliable metrics using our algorithms\n    const calculatedOnTime = this.calculateOnTimeDelivery(data);\n    const calculatedBudget = this.calculateBudgetEfficiency(data);\n    const calculatedTeam = this.calculateTeamEngagement(data);\n    \n    return {\n      overallHealth: this.validateHealth(analysis.overallHealth),\n      completionTrend: this.validateTrend(analysis.completionTrend),\n      riskProjects: data.overdueProjects,\n      upcomingDeadlines: this.calculateUpcomingDeadlines(data),\n      budgetUtilization: budgetUtilization,\n      teamProductivity: this.validateProductivity(analysis.teamProductivity),\n      executiveSummary: analysis.executiveSummary || this.generateDefaultSummary(data),\n      keyMetrics: {\n        onTimeDelivery: calculatedOnTime,\n        budgetEfficiency: calculatedBudget,\n        teamEngagement: calculatedTeam,\n        riskLevel: this.validateRiskLevel(analysis.keyMetrics?.riskLevel, data)\n      },\n      insights: this.validateInsights(analysis.insights, data),\n      recommendations: Array.isArray(analysis.recommendations) ? \n        analysis.recommendations.slice(0, 5) : \n        this.generateDefaultRecommendations(data)\n    };\n  }\n\n  private validateHealth(health: string): 'excellent' | 'good' | 'warning' | 'critical' {\n    const validValues = ['excellent', 'good', 'warning', 'critical'];\n    return validValues.includes(health) ? health as any : 'good';\n  }\n\n  private validateTrend(trend: string): 'improving' | 'stable' | 'declining' {\n    const validValues = ['improving', 'stable', 'declining'];\n    return validValues.includes(trend) ? trend as any : 'stable';\n  }\n\n  private validateProductivity(productivity: string): 'high' | 'medium' | 'low' {\n    const validValues = ['high', 'medium', 'low'];\n    return validValues.includes(productivity) ? productivity as any : 'medium';\n  }\n\n  private validateRiskLevel(riskLevel: string, data: DashboardAnalysisData): 'low' | 'medium' | 'high' {\n    if (['low', 'medium', 'high'].includes(riskLevel)) {\n      return riskLevel as any;\n    }\n    \n    const riskScore = data.overdueProjects + (data.averageProgress < 50 ? 1 : 0);\n    if (riskScore >= 3) return 'high';\n    if (riskScore >= 1) return 'medium';\n    return 'low';\n  }\n\n  private validateInsights(insights: any[], data: DashboardAnalysisData): AIInsight[] {\n    if (!Array.isArray(insights)) {\n      return this.generateDefaultInsights(data);\n    }\n\n    return insights.slice(0, 5).map(insight => ({\n      type: ['success', 'warning', 'info', 'error'].includes(insight.type) ? insight.type : 'info',\n      title: insight.title || 'Project Update',\n      description: insight.description || 'No description available',\n      action: insight.action,\n      priority: ['high', 'medium', 'low'].includes(insight.priority) ? insight.priority : 'medium'\n    }));\n  }\n\n  private calculateUpcomingDeadlines(data: DashboardAnalysisData): number {\n    if (!data.projectDeadlines) return 0;\n    \n    const nextWeek = new Date();\n    nextWeek.setDate(nextWeek.getDate() + 7);\n    \n    return data.projectDeadlines.filter(deadline => {\n      const deadlineDate = new Date(deadline);\n      return deadlineDate <= nextWeek && deadlineDate > new Date();\n    }).length;\n  }\n\n  private calculateOnTimeDelivery(data: DashboardAnalysisData): number {\n    if (data.totalProjects === 0) return 82; // Default reasonable score\n    \n    // Calculate delivery performance based on completion vs overdue ratio\n    const completionRate = data.completedProjects / data.totalProjects;\n    const overdueRate = data.overdueProjects / data.totalProjects;\n    \n    // Base score starts at 50 for having projects\n    let deliveryScore = 50;\n    \n    // Add points for completion (up to 35 points)\n    deliveryScore += completionRate * 35;\n    \n    // Subtract points for overdue projects (up to 25 points)\n    deliveryScore -= overdueRate * 25;\n    \n    // Bonus for active projects progressing well\n    if (data.averageProgress > 70) {\n      deliveryScore += 15;\n    } else if (data.averageProgress > 50) {\n      deliveryScore += 10;\n    }\n    \n    // Bonus for low overdue rate\n    if (overdueRate === 0) {\n      deliveryScore += 5;\n    }\n    \n    return Math.round(Math.max(35, Math.min(95, deliveryScore)));\n  }\n\n  private calculateBudgetEfficiency(data: DashboardAnalysisData): number {\n    if (data.totalBudget === 0) return 85; // Default reasonable score when no budget data\n    \n    const utilizationRate = data.usedBudget / data.totalBudget;\n    const progressRate = data.averageProgress / 100;\n    \n    // If no budget is used yet, rate based on progress\n    if (data.usedBudget === 0) {\n      return Math.round(Math.max(75, Math.min(90, 75 + (progressRate * 15))));\n    }\n    \n    // Efficiency: progress achieved vs budget spent\n    let efficiency = 0;\n    if (utilizationRate > 0) {\n      efficiency = (progressRate / utilizationRate) * 70 + 20; // Base score of 20\n      // Add bonus for optimal utilization (40-80%)\n      if (utilizationRate >= 0.4 && utilizationRate <= 0.8) {\n        efficiency += 10;\n      }\n    }\n    \n    return Math.round(Math.max(45, Math.min(95, efficiency)));\n  }\n\n  private calculateTeamEngagement(data: DashboardAnalysisData): number {\n    if (!data.teamMembers || data.teamMembers === 0) return 78; // Default reasonable score\n    \n    // Base engagement score starts at 60\n    let engagement = 60;\n    \n    // Calculate based on activity per team member\n    const reportsPerMember = data.recentActivity / data.teamMembers;\n    const projectsPerMember = data.activeProjects / data.teamMembers;\n    \n    // Add points for team activity (up to 25 points)\n    engagement += Math.min(25, (reportsPerMember * 8) + (projectsPerMember * 6));\n    \n    // Bonus for good completion rate (up to 15 points)\n    if (data.totalProjects > 0) {\n      const completionRate = data.completedProjects / data.totalProjects;\n      engagement += completionRate * 15;\n    }\n    \n    // Small penalty for overdue projects (up to 10 points)\n    if (data.totalProjects > 0) {\n      const overdueRate = data.overdueProjects / data.totalProjects;\n      engagement -= overdueRate * 10;\n    }\n    \n    // Bonus for high average progress\n    if (data.averageProgress > 75) {\n      engagement += 8;\n    } else if (data.averageProgress > 50) {\n      engagement += 5;\n    }\n    \n    return Math.round(Math.max(45, Math.min(95, engagement)));\n  }\n\n  private generateDefaultSummary(data: DashboardAnalysisData): string {\n    const completion = Math.round(data.averageProgress);\n    const completionRate = data.totalProjects > 0 ? Math.round((data.completedProjects / data.totalProjects) * 100) : 0;\n    \n    if (data.completedProjects === data.totalProjects && data.totalProjects > 0) {\n      return `Excellent performance! All ${data.totalProjects} projects are completed with ${completion}% average progress. Strong project execution with ${data.recentActivity} recent reports submitted.`;\n    } else if (data.activeProjects > 0) {\n      return `Your organization has ${data.totalProjects} projects with ${completion}% average completion. ${data.activeProjects} projects are actively progressing with ${data.recentActivity} recent updates.`;\n    } else if (data.completedProjects > 0) {\n      return `Project portfolio shows ${data.completedProjects} completed projects (${completionRate}% completion rate). Ready for new project initiatives with strong execution history.`;\n    } else {\n      return `Project dashboard ready for new initiatives. ${data.recentActivity} recent activities recorded. Strong foundation for upcoming projects.`;\n    }\n  }\n\n  private generateDefaultInsights(data: DashboardAnalysisData): AIInsight[] {\n    const insights: AIInsight[] = [];\n\n    // Always generate meaningful insights to populate Priority Actions\n    if (data.overdueProjects > 0) {\n      insights.push({\n        type: 'warning',\n        title: 'Overdue Projects',\n        description: `${data.overdueProjects} project${data.overdueProjects > 1 ? 's are' : ' is'} past deadline`,\n        action: 'Review project timelines and resource allocation',\n        priority: 'high'\n      });\n    }\n\n    if (data.pendingReports > 0) {\n      insights.push({\n        type: 'info',\n        title: 'Reports Pending Review',\n        description: `${data.pendingReports} report${data.pendingReports > 1 ? 's need' : ' needs'} admin approval`,\n        action: 'Review and approve pending reports',\n        priority: data.pendingReports > 3 ? 'high' : 'medium'\n      });\n    }\n\n    if (data.averageProgress > 75) {\n      insights.push({\n        type: 'success',\n        title: 'Strong Progress',\n        description: `Projects are ${Math.round(data.averageProgress)}% complete on average`,\n        action: 'Maintain current momentum and celebrate team achievements',\n        priority: 'low'\n      });\n    } else if (data.averageProgress < 50) {\n      insights.push({\n        type: 'warning',\n        title: 'Progress Below Target',\n        description: `Average project progress is ${Math.round(data.averageProgress)}%`,\n        action: 'Assess resource needs and remove blockers',\n        priority: 'medium'\n      });\n    } else {\n      insights.push({\n        type: 'info',\n        title: 'Steady Progress',\n        description: `Projects are progressing at ${Math.round(data.averageProgress)}% completion`,\n        action: 'Continue monitoring and provide team support',\n        priority: 'low'\n      });\n    }\n\n    // Budget insight\n    if (data.totalBudget > 0) {\n      const budgetUsed = (data.usedBudget / data.totalBudget) * 100;\n      if (budgetUsed > 80) {\n        insights.push({\n          type: 'warning',\n          title: 'High Budget Utilization',\n          description: `${Math.round(budgetUsed)}% of total budget has been allocated`,\n          action: 'Monitor spending and adjust allocations if needed',\n          priority: 'medium'\n        });\n      } else if (budgetUsed < 30) {\n        insights.push({\n          type: 'info',\n          title: 'Budget Underutilization',\n          description: `Only ${Math.round(budgetUsed)}% of budget is being used`,\n          action: 'Consider accelerating project activities or reallocating funds',\n          priority: 'low'\n        });\n      }\n    }\n\n    // Ensure we always have at least 3 insights for Priority Actions\n    if (insights.length < 3) {\n      insights.push({\n        type: 'info',\n        title: 'Project Overview',\n        description: `Managing ${data.totalProjects} project${data.totalProjects !== 1 ? 's' : ''} with ${data.activeProjects} currently active`,\n        action: 'Continue regular project monitoring and team coordination',\n        priority: 'low'\n      });\n    }\n\n    return insights.slice(0, 5); // Limit to 5 insights max\n  }\n\n  private generateDefaultRecommendations(data: DashboardAnalysisData): string[] {\n    const recommendations = [];\n\n    if (data.overdueProjects > 0) {\n      recommendations.push('Focus on bringing overdue projects back on track');\n    }\n\n    if (data.averageProgress < 50) {\n      recommendations.push('Consider additional resources for low-progress projects');\n    }\n\n    if (data.pendingReports > 3) {\n      recommendations.push('Streamline report approval process');\n    }\n\n    recommendations.push('Schedule weekly team check-ins to maintain momentum');\n    recommendations.push('Review budget allocation for optimal resource distribution');\n\n    return recommendations.slice(0, 3);\n  }\n\n  private generateFallbackAnalysis(data: DashboardAnalysisData): ProjectSummary {\n    const budgetUtilization = data.totalBudget > 0 ? Math.round((data.usedBudget / data.totalBudget) * 100) : 0;\n    \n    return {\n      overallHealth: data.overdueProjects === 0 ? 'good' : 'warning',\n      completionTrend: data.averageProgress > 60 ? 'improving' : 'stable',\n      riskProjects: data.overdueProjects,\n      upcomingDeadlines: 0,\n      budgetUtilization,\n      teamProductivity: data.averageProgress > 70 ? 'high' : 'medium',\n      executiveSummary: this.generateDefaultSummary(data),\n      keyMetrics: {\n        onTimeDelivery: this.calculateOnTimeDelivery(data),\n        budgetEfficiency: this.calculateBudgetEfficiency(data),\n        teamEngagement: this.calculateTeamEngagement(data),\n        riskLevel: data.overdueProjects > 2 ? 'high' : data.overdueProjects > 0 ? 'medium' : 'low'\n      },\n      insights: this.generateDefaultInsights(data),\n      recommendations: this.generateDefaultRecommendations(data)\n    };\n  }\n}\n\nexport const aiDashboardService = new AIDashboardService();","size_bytes":17805},"server/aiReportReviewer.ts":{"content":"import OpenAI from \"openai\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport * as XLSX from 'xlsx';\n\nif (!process.env.OPENAI_API_KEY) {\n  throw new Error(\"OPENAI_API_KEY environment variable is required\");\n}\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface ReportAnalysis {\n  overallScore: number; // 0-100\n  readinessLevel: 'needs-major-improvements' | 'needs-minor-improvements' | 'good' | 'excellent';\n  overallFeedback: string;\n  sectionAnalysis: {\n    section: string;\n    score: number;\n    issues: string[];\n    suggestions: string[];\n  }[];\n  strengthsIdentified: string[];\n  priorityImprovements: string[];\n}\n\nexport class AIReportReviewer {\n  private async parseFileContent(filePath: string, fileType: string): Promise<string> {\n    try {\n      // Handle both full paths and relative paths\n      let fullPath = filePath;\n      if (!filePath.startsWith('/')) {\n        fullPath = path.join(process.cwd(), 'uploads', filePath);\n      }\n      \n      console.log('Attempting to parse file:', fullPath);\n      if (!fs.existsSync(fullPath)) {\n        console.error('File not found:', fullPath);\n        return `File not found: ${filePath}`;\n      }\n\n      // Parse different file types\n      if (fileType.includes('pdf')) {\n        return `PDF File attached: ${filePath} (PDF parsing temporarily disabled)`;\n      } else if (fileType.includes('text') || fileType.includes('txt')) {\n        const content = fs.readFileSync(fullPath, 'utf8');\n        return `Text File Content:\\n${content.slice(0, 5000)}`;\n      } else if (fileType.includes('csv')) {\n        const content = fs.readFileSync(fullPath, 'utf8');\n        const lines = content.split('\\n').slice(0, 50); // First 50 rows\n        return `CSV File Content (first 50 rows):\\n${lines.join('\\n')}`;\n      } else if (fileType.includes('excel') || fileType.includes('spreadsheet') || \n                 filePath.endsWith('.xlsx') || filePath.endsWith('.xls')) {\n        const workbook = XLSX.readFile(fullPath);\n        const sheetNames = workbook.SheetNames;\n        let content = `Excel File Content (${sheetNames.length} sheets):\\n`;\n        \n        // Parse first sheet\n        if (sheetNames.length > 0) {\n          const worksheet = workbook.Sheets[sheetNames[0]];\n          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n          const rows = jsonData.slice(0, 20); // First 20 rows\n          content += `Sheet \"${sheetNames[0]}\" (first 20 rows):\\n`;\n          content += rows.map(row => (row as any[]).join('\\t')).join('\\n');\n        }\n        \n        return content.slice(0, 5000);\n      } else if (fileType.includes('json')) {\n        const content = fs.readFileSync(fullPath, 'utf8');\n        try {\n          const jsonData = JSON.parse(content);\n          return `JSON File Content:\\n${JSON.stringify(jsonData, null, 2).slice(0, 5000)}`;\n        } catch {\n          return `JSON File Content (raw):\\n${content.slice(0, 5000)}`;\n        }\n      } else if (fileType.includes('xml')) {\n        const content = fs.readFileSync(fullPath, 'utf8');\n        return `XML File Content:\\n${content.slice(0, 5000)}`;\n      } else if (fileType.includes('image')) {\n        return `Image file attached: ${filePath} (visual content not analyzed)`;\n      } else {\n        // Try to read as text for any other file type\n        try {\n          const content = fs.readFileSync(fullPath, 'utf8');\n          return `File Content (${fileType}):\\n${content.slice(0, 3000)}`;\n        } catch {\n          return `File attached: ${filePath} (content type: ${fileType}, binary file not parsed)`;\n        }\n      }\n    } catch (error) {\n      console.error('Error parsing file:', error);\n      return `Error reading file: ${filePath}`;\n    }\n  }\n\n  async analyzeReport(reportData: {\n    title: string;\n    content: string;\n    projectName: string;\n    projectDescription?: string;\n    projectGoals?: string;\n    projectBudget?: number;\n    projectStatus?: string;\n    hasAttachments?: boolean;\n    attachmentCount?: number;\n    attachmentTypes?: string[];\n    attachmentPaths?: string[];\n    attachmentContents?: string;\n    progress?: number;\n    challengesFaced?: string;\n    nextSteps?: string;\n    budgetNotes?: string;\n  }): Promise<ReportAnalysis> {\n    try {\n      console.log('AI Analysis request:', reportData);\n\n      // Parse file contents if attachments exist and not already provided\n      let attachmentContents = reportData.attachmentContents || '';\n      if (!attachmentContents && reportData.hasAttachments && reportData.attachmentPaths && reportData.attachmentTypes) {\n        console.log('Parsing attached files...');\n        const contentPromises = reportData.attachmentPaths.map((filePath, index) => \n          this.parseFileContent(filePath, reportData.attachmentTypes![index])\n        );\n        const contents = await Promise.all(contentPromises);\n        attachmentContents = contents.join('\\n\\n---\\n\\n');\n        console.log('Parsed attachment contents length:', attachmentContents.length);\n      }\n\n      const analysisPrompt = this.buildAnalysisPrompt({\n        ...reportData,\n        attachmentContents\n      });\n      \n      console.log('Calling OpenAI API with model gpt-4o...');\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert NGO project management consultant. Always respond with valid JSON in the exact format requested.\"\n          },\n          {\n            role: \"user\",\n            content: analysisPrompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.3,\n        max_tokens: 2000,\n      });\n\n      console.log('OpenAI response received, parsing...');\n      const analysis = JSON.parse(response.choices[0].message.content || '{}');\n      console.log('Analysis parsed successfully:', analysis);\n      \n      const validatedAnalysis = this.validateAndFormatAnalysis(analysis);\n      console.log('Analysis validated:', validatedAnalysis);\n      \n      return validatedAnalysis;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      const errorStack = error instanceof Error ? error.stack : undefined;\n      const errorName = error instanceof Error ? error.name : 'Unknown';\n      \n      console.error('AI Report Analysis Error Details:', {\n        message: errorMessage,\n        stack: errorStack,\n        name: errorName,\n        apiKeyExists: !!process.env.OPENAI_API_KEY\n      });\n      throw new Error(`Failed to analyze report: ${errorMessage}`);\n    }\n  }\n\n  private buildAnalysisPrompt(reportData: any): string {\n    const attachmentInfo = reportData.hasAttachments ? \n      `\\nATTACHMENTS: ${reportData.attachmentCount} files (${reportData.attachmentTypes?.join(', ') || 'various types'})` : \n      '\\nATTACHMENTS: None provided';\n\n    return `\nAnalyze this NGO progress report and provide detailed feedback in JSON format:\n\n**Project Context:**\n- Project Name: ${reportData.projectName}\n- Project Description: ${reportData.projectDescription || 'Not provided'}\n- Project Goals: ${reportData.projectGoals || 'Not provided'}\n- Project Budget: ${reportData.projectBudget ? `$${reportData.projectBudget}` : 'Not specified'}\n- Project Status: ${reportData.projectStatus || 'Active'}\n\n**Report Details:**\n- Title: ${reportData.title}\n- Content: ${reportData.content}\n\n${reportData.attachmentContents ? `**Attachment Contents:**\n${reportData.attachmentContents}` : ''}\n\n**Attachments:** ${reportData.hasAttachments ? \n      `${reportData.attachmentCount} files attached (${reportData.attachmentTypes?.join(', ')})` : \n      'No attachments'}\n- Progress: ${reportData.progress || 'Not specified'}%\n- Challenges: ${reportData.challengesFaced || 'Not provided'}\n- Next Steps: ${reportData.nextSteps || 'Not provided'}\n- Budget Notes: ${reportData.budgetNotes || 'Not provided'}\n\n**Analysis Requirements:**\nEvaluate the report on these criteria:\n1. **Clarity**: Is the language clear, professional, and easy to understand?\n2. **Completeness**: Are all sections adequately detailed with specific information?\n3. **Specificity**: Does it include concrete details, metrics, dates, and quantifiable outcomes?\n4. **Evidence**: Are there supporting attachments and documentation?\n5. **Alignment**: Does the report align with stated project goals and objectives?\n6. **Actionability**: Are next steps and challenges clearly defined with solutions?\n7. **Impact**: Does it demonstrate measurable project impact and outcomes?\n8. **Professional Standards**: Does it meet NGO reporting best practices?\n\n**Attachment Assessment:**\n${reportData.hasAttachments ? \n  `Consider if the ${reportData.attachmentCount} attachment(s) likely provide adequate supporting evidence. Visual documentation (images) and detailed documentation (PDFs) enhance credibility when appropriate for the content type.` :\n  `Note the absence of supporting attachments and suggest when visual evidence or documentation would strengthen the report.`}\n\n**Response Format (JSON):**\n{\n  \"overallScore\": <number 0-100>,\n  \"readinessLevel\": \"<needs-major-improvements|needs-minor-improvements|good|excellent>\",\n  \"overallFeedback\": \"<detailed assessment including attachment evaluation>\",\n  \"sectionAnalysis\": [\n    {\n      \"section\": \"<section name>\",\n      \"score\": <0-100>,\n      \"issues\": [\"<specific issue 1>\", \"<specific issue 2>\"],\n      \"suggestions\": [\"<actionable suggestion 1>\", \"<actionable suggestion 2>\"]\n    }\n  ],\n  \"strengthsIdentified\": [\"<strength 1>\", \"<strength 2>\"],\n  \"priorityImprovements\": [\"<high priority improvement 1>\", \"<high priority improvement 2>\"]\n}\n\n**Guidelines:**\n- Be constructive and encouraging\n- Provide specific, actionable suggestions\n- Identify at least 2-3 strengths\n- Flag vague language and suggest concrete alternatives\n- Recommend quantitative details where missing\n- Consider project context and goals in evaluation\n- Assess if attachments enhance or are needed for the report\n`;\n  }\n\n  private validateAndFormatAnalysis(analysis: any): ReportAnalysis {\n    return {\n      overallScore: Math.max(0, Math.min(100, analysis.overallScore || 0)),\n      readinessLevel: analysis.readinessLevel || 'needs-major-improvements',\n      overallFeedback: analysis.overallFeedback || 'Analysis unavailable',\n      sectionAnalysis: Array.isArray(analysis.sectionAnalysis) ? analysis.sectionAnalysis : [],\n      strengthsIdentified: Array.isArray(analysis.strengthsIdentified) ? analysis.strengthsIdentified : [],\n      priorityImprovements: Array.isArray(analysis.priorityImprovements) ? analysis.priorityImprovements : []\n    };\n  }\n\n  getReadinessMessage(level: string): string {\n    switch (level) {\n      case 'excellent':\n        return 'Report is comprehensive and ready for submission!';\n      case 'good':\n        return 'Report is solid with minor areas for enhancement.';\n      case 'needs-minor-improvements':\n        return 'Report needs some refinements before submission.';\n      case 'needs-major-improvements':\n        return 'Report requires significant improvements before submission.';\n      default:\n        return 'Report analysis completed.';\n    }\n  }\n\n  getScoreColor(score: number): string {\n    if (score >= 85) return 'text-green-600';\n    if (score >= 70) return 'text-blue-600';\n    if (score >= 50) return 'text-yellow-600';\n    return 'text-red-600';\n  }\n\n  getReadinessColor(level: string): string {\n    switch (level) {\n      case 'excellent':\n        return 'bg-green-100 text-green-800 border-green-200';\n      case 'good':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'needs-minor-improvements':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'needs-major-improvements':\n        return 'bg-red-100 text-red-800 border-red-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  }\n}\n\nexport const aiReportReviewer = new AIReportReviewer();","size_bytes":12170},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Configure pool with better error handling using standard PostgreSQL\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 10000,\n});\n\nexport const db = drizzle(pool, { schema });","size_bytes":527},"server/deadlineTracker.ts":{"content":"import { db } from \"./db\";\nimport { projects, users } from \"@shared/schema\";\nimport { eq, and, ne, isNull, or } from \"drizzle-orm\";\nimport { emailService } from \"./emailNotifications\";\n\nexport class DeadlineTracker {\n  private intervalId: NodeJS.Timeout | null = null;\n\n  /**\n   * Calculate days left until deadline\n   */\n  static calculateDaysLeft(deadline: Date): number {\n    const now = new Date();\n    const deadlineDate = new Date(deadline);\n    \n    // Reset time to start of day for accurate comparison\n    now.setHours(0, 0, 0, 0);\n    deadlineDate.setHours(0, 0, 0, 0);\n    \n    const diffTime = deadlineDate.getTime() - now.getTime();\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    \n    return diffDays;\n  }\n\n  /**\n   * Update days left for all projects with deadlines\n   */\n  async updateProjectDeadlines(): Promise<void> {\n    try {\n      console.log(\"Running daily deadline update...\");\n      \n      // Get all active projects with deadlines\n      const activeProjects = await db\n        .select()\n        .from(projects)\n        .where(\n          and(\n            ne(projects.status, \"completed\"),\n            ne(projects.status, \"cancelled\"),\n            isNull(projects.deadline) === false\n          )\n        );\n\n      const updates = [];\n      const overdueProjects = [];\n\n      for (const project of activeProjects) {\n        if (!project.deadline) continue;\n\n        const daysLeft = DeadlineTracker.calculateDaysLeft(project.deadline);\n        const isOverdue = daysLeft < 0;\n\n        // Update project with new days left and overdue status\n        updates.push(\n          db\n            .update(projects)\n            .set({\n              daysLeft: daysLeft,\n              isOverdue: isOverdue,\n              status: isOverdue && project.status === \"active\" ? \"overdue\" : project.status,\n              updatedAt: new Date(),\n            })\n            .where(eq(projects.id, project.id))\n        );\n\n        // Track projects that just became overdue (need notifications)\n        if (isOverdue && !project.overdueNotificationSent) {\n          overdueProjects.push(project);\n        }\n      }\n\n      // Execute all updates\n      await Promise.all(updates);\n\n      // Send overdue notifications\n      if (overdueProjects.length > 0) {\n        await this.sendOverdueNotifications(overdueProjects);\n      }\n\n      console.log(`Updated ${activeProjects.length} projects, ${overdueProjects.length} became overdue`);\n    } catch (error) {\n      console.error(\"Error updating project deadlines:\", error);\n    }\n  }\n\n  /**\n   * Send notifications for overdue projects\n   */\n  private async sendOverdueNotifications(overdueProjects: any[]): Promise<void> {\n    try {\n      for (const project of overdueProjects) {\n        // Get all team members for this organization\n        const teamMembers = await db\n          .select()\n          .from(users)\n          .where(eq(users.organizationId, project.organizationId));\n\n        // Send email notifications to all team members\n        const emailPromises = teamMembers.map(async (member) => {\n          if (member.email) {\n            const subject = `⚠️ Project Overdue: ${project.name}`;\n            const content = this.generateOverdueEmailContent(project, member);\n            \n            return emailService.sendEmail({\n              to: member.email,\n              from: \"notifications@adel-ngo.com\",\n              subject: subject,\n              html: content.html,\n              text: content.text,\n            });\n          }\n        });\n\n        await Promise.all(emailPromises.filter(Boolean));\n\n        // Mark notification as sent\n        await db\n          .update(projects)\n          .set({\n            overdueNotificationSent: true,\n          })\n          .where(eq(projects.id, project.id));\n      }\n    } catch (error) {\n      console.error(\"Error sending overdue notifications:\", error);\n    }\n  }\n\n  /**\n   * Generate email content for overdue notifications\n   */\n  private generateOverdueEmailContent(project: any, member: any): { html: string; text: string } {\n    const daysOverdue = Math.abs(project.daysLeft || 0);\n    \n    const html = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <div style=\"background: linear-gradient(135deg, #dc2626, #ef4444); color: white; padding: 30px; text-align: center; border-radius: 8px 8px 0 0;\">\n          <h1 style=\"margin: 0; font-size: 28px;\">⚠️ Project Overdue</h1>\n          <p style=\"margin: 10px 0 0 0; font-size: 16px; opacity: 0.9;\">Immediate attention required</p>\n        </div>\n        \n        <div style=\"background: white; padding: 30px; border: 1px solid #e5e7eb; border-top: none; border-radius: 0 0 8px 8px;\">\n          <p style=\"margin: 0 0 20px 0; font-size: 16px; color: #374151;\">Hello ${member.firstName || member.email},</p>\n          \n          <div style=\"background: #fef2f2; border: 1px solid #fecaca; border-radius: 6px; padding: 20px; margin: 20px 0;\">\n            <h2 style=\"margin: 0 0 15px 0; color: #dc2626; font-size: 20px;\">Project \"${project.name}\" is Overdue</h2>\n            <p style=\"margin: 0 0 10px 0; color: #7f1d1d;\"><strong>Days overdue:</strong> ${daysOverdue} day${daysOverdue !== 1 ? 's' : ''}</p>\n            <p style=\"margin: 0 0 10px 0; color: #7f1d1d;\"><strong>Original deadline:</strong> ${new Date(project.deadline).toLocaleDateString()}</p>\n            <p style=\"margin: 0; color: #7f1d1d;\"><strong>Current progress:</strong> ${project.progress || 0}%</p>\n          </div>\n          \n          <div style=\"margin: 25px 0;\">\n            <h3 style=\"color: #374151; margin: 0 0 15px 0;\">Required Actions:</h3>\n            <ul style=\"color: #6b7280; line-height: 1.6; padding-left: 20px;\">\n              <li>Review project status and update progress immediately</li>\n              <li>Submit any pending reports or documentation</li>\n              <li>Coordinate with team members to accelerate completion</li>\n              <li>Contact project admin if deadline extension is needed</li>\n            </ul>\n          </div>\n          \n          <div style=\"text-align: center; margin: 30px 0;\">\n            <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}\" \n               style=\"background: #dc2626; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: 600; display: inline-block;\">\n              Access Project Dashboard\n            </a>\n          </div>\n          \n          <p style=\"margin: 20px 0 0 0; font-size: 14px; color: #9ca3af; text-align: center;\">\n            This is an automated notification from ADEL Project Management System\n          </p>\n        </div>\n      </div>\n    `;\n\n    const text = `\nPROJECT OVERDUE NOTIFICATION\n\nHello ${member.firstName || member.email},\n\nProject \"${project.name}\" is now overdue by ${daysOverdue} day${daysOverdue !== 1 ? 's' : ''}.\n\nProject Details:\n- Original deadline: ${new Date(project.deadline).toLocaleDateString()}\n- Current progress: ${project.progress || 0}%\n\nRequired Actions:\n1. Review project status and update progress immediately\n2. Submit any pending reports or documentation\n3. Coordinate with team members to accelerate completion\n4. Contact project admin if deadline extension is needed\n\nAccess your dashboard: ${process.env.FRONTEND_URL || 'http://localhost:5000'}\n\nThis is an automated notification from ADEL Project Management System.\n    `;\n\n    return { html, text };\n  }\n\n  /**\n   * Get deadline status for display\n   */\n  static getDeadlineStatus(project: any): { \n    text: string; \n    color: string; \n    urgency: 'safe' | 'warning' | 'danger' | 'overdue' \n  } {\n    if (!project.deadline) {\n      return { text: 'No deadline', color: 'text-gray-500', urgency: 'safe' };\n    }\n\n    const daysLeft = project.daysLeft ?? DeadlineTracker.calculateDaysLeft(project.deadline);\n\n    if (daysLeft < 0) {\n      const daysOverdue = Math.abs(daysLeft);\n      return { \n        text: `${daysOverdue} day${daysOverdue !== 1 ? 's' : ''} overdue`, \n        color: 'text-red-600', \n        urgency: 'overdue' \n      };\n    } else if (daysLeft === 0) {\n      return { text: 'Due today', color: 'text-red-500', urgency: 'danger' };\n    } else if (daysLeft === 1) {\n      return { text: '1 day left', color: 'text-orange-500', urgency: 'danger' };\n    } else if (daysLeft <= 3) {\n      return { text: `${daysLeft} days left`, color: 'text-orange-500', urgency: 'warning' };\n    } else if (daysLeft <= 7) {\n      return { text: `${daysLeft} days left`, color: 'text-yellow-600', urgency: 'warning' };\n    } else {\n      return { text: `${daysLeft} days left`, color: 'text-green-600', urgency: 'safe' };\n    }\n  }\n\n  /**\n   * Start the daily deadline tracking\n   */\n  start(): void {\n    try {\n      // Run immediately on start (async, don't block)\n      this.updateProjectDeadlines().catch(error => {\n        console.error(\"Error in initial deadline update:\", error);\n      });\n\n      // Then run every 24 hours (86400000 ms)\n      this.intervalId = setInterval(() => {\n        this.updateProjectDeadlines().catch(error => {\n          console.error(\"Error in scheduled deadline update:\", error);\n        });\n      }, 86400000);\n\n      console.log(\"Deadline tracker started - running daily updates\");\n    } catch (error) {\n      console.error(\"Failed to start deadline tracker:\", error);\n    }\n  }\n\n  /**\n   * Stop the deadline tracking\n   */\n  stop(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n      console.log(\"Deadline tracker stopped\");\n    }\n  }\n}\n\nexport const deadlineTracker = new DeadlineTracker();","size_bytes":9630},"server/emailNotifications.ts":{"content":"import { MeetingBooking } from \"@shared/schema\";\n\n// Email notification service for meeting bookings\nexport class EmailNotificationService {\n  private isConfigured: boolean;\n\n  constructor() {\n    this.isConfigured = !!process.env.SENDGRID_API_KEY;\n  }\n\n  async sendNewBookingNotification(booking: MeetingBooking): Promise<boolean> {\n    if (!this.isConfigured) {\n      console.log('📧 Platform Owner Notification:', {\n        to: process.env.OWNER_EMAIL || 'owner@adelplatform.com',\n        subject: `New ADEL Demo Request from ${booking.company}`,\n        requestId: booking.requestId,\n        prospect: {\n          name: `${booking.firstName} ${booking.lastName}`,\n          email: booking.email,\n          company: booking.company,\n          organizationType: booking.organizationType,\n          teamSize: booking.teamSize,\n          meetingPurpose: booking.meetingPurpose,\n          preferredTime: booking.preferredTime,\n          phone: booking.phone,\n          message: booking.message\n        },\n        submittedAt: booking.createdAt\n      });\n      return true;\n    }\n\n    try {\n      // When SENDGRID_API_KEY is provided, this will send actual emails\n      const sgMail = require('@sendgrid/mail');\n      sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n\n      const ownerEmail = {\n        to: process.env.OWNER_EMAIL || 'owner@adelplatform.com', // Your email as platform owner\n        from: 'noreply@adelplatform.com', // Replace with your verified sender\n        subject: `New ADEL Demo Request from ${booking.company}`,\n        html: this.generateOwnerEmailHTML(booking),\n        text: this.generateOwnerEmailText(booking)\n      };\n\n      const confirmationEmail = {\n        to: booking.email,\n        from: 'noreply@adelplatform.com',\n        subject: 'Demo Request Received - ADEL Platform',\n        html: this.generateConfirmationEmailHTML(booking),\n        text: this.generateConfirmationEmailText(booking)\n      };\n\n      await Promise.all([\n        sgMail.send(ownerEmail),\n        sgMail.send(confirmationEmail)\n      ]);\n\n      return true;\n    } catch (error) {\n      console.error('Email notification failed:', error);\n      return false;\n    }\n  }\n\n  private generateOwnerEmailHTML(booking: MeetingBooking): string {\n    return `\n      <h2>🎯 New ADEL Platform Demo Request</h2>\n      <p>A potential customer wants to see your NGO management platform in action!</p>\n      \n      <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n        <h3 style=\"color: #1e40af; margin-top: 0;\">👤 Prospect Information</h3>\n        <ul style=\"list-style: none; padding: 0;\">\n          <li><strong>Contact:</strong> ${booking.firstName} ${booking.lastName}</li>\n          <li><strong>Email:</strong> <a href=\"mailto:${booking.email}\">${booking.email}</a></li>\n          <li><strong>Phone:</strong> ${booking.phone || 'Not provided'}</li>\n          <li><strong>Organization:</strong> ${booking.company}</li>\n        </ul>\n      </div>\n      \n      <div style=\"background: #f0f9ff; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n        <h3 style=\"color: #0284c7; margin-top: 0;\">🏢 Organization Profile</h3>\n        <ul style=\"list-style: none; padding: 0;\">\n          <li><strong>Type:</strong> ${booking.organizationType || 'Not specified'}</li>\n          <li><strong>Team Size:</strong> ${booking.teamSize || 'Not specified'}</li>\n        </ul>\n      </div>\n      \n      <div style=\"background: #f0fdf4; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n        <h3 style=\"color: #16a34a; margin-top: 0;\">📅 Meeting Request</h3>\n        <ul style=\"list-style: none; padding: 0;\">\n          <li><strong>Interest:</strong> ${booking.meetingPurpose || 'Product Demo'}</li>\n          <li><strong>Preferred Time:</strong> ${booking.preferredTime || 'Flexible'}</li>\n        </ul>\n      </div>\n      \n      ${booking.message ? `\n        <div style=\"background: #fef7cd; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n          <h3 style=\"color: #a16207; margin-top: 0;\">💬 Their Message</h3>\n          <p style=\"font-style: italic;\">\"${booking.message}\"</p>\n        </div>\n      ` : ''}\n      \n      <hr style=\"margin: 30px 0;\">\n      <p><strong>Request ID:</strong> ${booking.requestId}</p>\n      <p><strong>Submitted:</strong> ${new Date(booking.createdAt).toLocaleString()}</p>\n      \n      <div style=\"margin-top: 30px; padding: 20px; background: #dbeafe; border-radius: 8px;\">\n        <p style=\"margin: 0;\"><strong>💡 Next Steps:</strong> Reach out within 24 hours to schedule their personalized ADEL demo. This is a qualified lead interested in your NGO management platform!</p>\n      </div>\n    `;\n  }\n\n  private generateOwnerEmailText(booking: MeetingBooking): string {\n    return `\n🎯 NEW ADEL PLATFORM DEMO REQUEST\n\nA potential customer wants to see your NGO management platform!\n\nPROSPECT INFORMATION:\n- Contact: ${booking.firstName} ${booking.lastName}\n- Email: ${booking.email}\n- Phone: ${booking.phone || 'Not provided'}\n- Organization: ${booking.company}\n\nORGANIZATION PROFILE:\n- Type: ${booking.organizationType || 'Not specified'}\n- Team Size: ${booking.teamSize || 'Not specified'}\n\nMEETING REQUEST:\n- Interest: ${booking.meetingPurpose || 'Product Demo'}\n- Preferred Time: ${booking.preferredTime || 'Flexible'}\n\n${booking.message ? `THEIR MESSAGE: \"${booking.message}\"` : ''}\n\nRequest ID: ${booking.requestId}\nSubmitted: ${new Date(booking.createdAt).toLocaleString()}\n\nNEXT STEPS: Reach out within 24 hours to schedule their personalized ADEL demo. This is a qualified lead interested in your NGO management platform!\n    `;\n  }\n\n  private generateConfirmationEmailHTML(booking: MeetingBooking): string {\n    return `\n      <h2>Thank you for your interest in ADEL!</h2>\n      <p>Hi ${booking.firstName},</p>\n      \n      <p>I've received your demo request for ${booking.company} and will personally reach out within 24 hours to schedule a demonstration of the ADEL platform.</p>\n      \n      <div style=\"background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n        <h3 style=\"margin-top: 0;\">Your Request Details</h3>\n        <ul style=\"list-style: none; padding: 0;\">\n          <li><strong>Request ID:</strong> ${booking.requestId}</li>\n          <li><strong>Organization:</strong> ${booking.company}</li>\n          <li><strong>Meeting Purpose:</strong> ${booking.meetingPurpose || 'Product Demo'}</li>\n          <li><strong>Preferred Time:</strong> ${booking.preferredTime || 'Flexible'}</li>\n        </ul>\n      </div>\n      \n      <p>During our demo, I'll show you how ADEL can help ${booking.company} streamline project management, enhance team collaboration, and track progress more effectively.</p>\n      \n      <p>If you have any urgent questions before our meeting, feel free to reply to this email.</p>\n      \n      <p>Looking forward to connecting with you!</p>\n      \n      <p>Best regards,<br>\n      ADEL Platform</p>\n      \n      <hr>\n      <p><small>This confirmation was sent automatically. You can reply if you need to make changes to your request.</small></p>\n    `;\n  }\n\n  private generateConfirmationEmailText(booking: MeetingBooking): string {\n    return `\nThank you for your interest in ADEL!\n\nHi ${booking.firstName},\n\nI've received your demo request for ${booking.company} and will personally reach out within 24 hours to schedule a demonstration of the ADEL platform.\n\nYour Request Details:\n- Request ID: ${booking.requestId}\n- Organization: ${booking.company}\n- Meeting Purpose: ${booking.meetingPurpose || 'Product Demo'}\n- Preferred Time: ${booking.preferredTime || 'Flexible'}\n\nDuring our demo, I'll show you how ADEL can help ${booking.company} streamline project management, enhance team collaboration, and track progress more effectively.\n\nIf you have any urgent questions before our meeting, feel free to reply to this email.\n\nLooking forward to connecting with you!\n\nBest regards,\nADEL Platform\n\n---\nThis confirmation was sent automatically. You can reply if you need to make changes to your request.\n    `;\n  }\n}\n\nexport const emailService = new EmailNotificationService();","size_bytes":8122},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    const server = await registerRoutes(app);\n\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n      console.error(\"Express error:\", err);\n      res.status(status).json({ message });\n    });\n\n    // importantly only setup vite in development and after\n    // setting up all the other routes so the catch-all route\n    // doesn't interfere with the other routes\n    if (app.get(\"env\") === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    // ALWAYS serve the app on port 5000\n    // this serves both the API and the client.\n    // It is the only port that is not firewalled.\n    const port = 5000;\n    server.listen(port, \"0.0.0.0\", async () => {\n      log(`serving on port ${port}`);\n      \n      // Initialize deadline tracker after server starts successfully\n      try {\n        const { deadlineTracker } = await import(\"./deadlineTracker.js\");\n        deadlineTracker.start();\n      } catch (trackerError) {\n        console.error(\"Failed to start deadline tracker:\", trackerError);\n        // Don't crash the server if deadline tracker fails\n      }\n    });\n  } catch (error) {\n    console.error(\"Failed to start server:\", error);\n    process.exit(1);\n  }\n})();\n","size_bytes":2430},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nimport { z } from \"zod\";\nimport { insertUserSchema, insertProjectSchema, insertReportSchema, insertMessageSchema } from \"@shared/schema\";\nimport { deadlineTracker } from \"./deadlineTracker\";\nimport { emailService } from \"./emailNotifications\";\nimport { aiReportReviewer } from \"./aiReportReviewer\";\n\n// Extend session types\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId: number;\n    userRole: string;\n    organizationId: number;\n  }\n}\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), \"uploads\");\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst upload = multer({\n  dest: uploadDir,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n});\n\n// Session configuration\nconst sessionConfig = {\n  secret: process.env.SESSION_SECRET || \"your-secret-key\",\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false,\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n  },\n};\n\n// Generate unique organization code\nfunction generateOrgCode(): string {\n  return \"NGO-\" + Math.floor(1000 + Math.random() * 9000);\n}\n\n// Authentication middleware\nfunction requireAuth(req: any, res: any, next: any) {\n  if (!req.session.userId) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  next();\n}\n\nfunction requireAdmin(req: any, res: any, next: any) {\n  console.log(\"Admin check - userId:\", req.session.userId, \"userRole:\", req.session.userRole);\n  if (!req.session.userId || req.session.userRole !== \"admin\") {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.use(session(sessionConfig));\n\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { type, ...userData } = req.body;\n      \n      if (type === \"admin\") {\n        // Admin registration\n        const { firstName, lastName, email, password, organizationName } = userData;\n        \n        // Check if email already exists\n        const existingUser = await storage.getUserByEmail(email);\n        if (existingUser) {\n          return res.status(400).json({ message: \"Email already registered\" });\n        }\n\n        // Create organization\n        const orgCode = generateOrgCode();\n        const organization = await storage.createOrganization({\n          name: organizationName,\n          code: orgCode,\n        });\n\n        // Create admin user\n        const hashedPassword = await bcrypt.hash(password, 10);\n        const user = await storage.createUser({\n          email,\n          password: hashedPassword,\n          firstName,\n          lastName,\n          role: \"admin\",\n          organizationId: organization.id,\n        });\n\n        console.log(\"Admin user created:\", { id: user.id, role: user.role, email: user.email });\n\n        req.session.userId = user.id;\n        req.session.userRole = user.role;\n        req.session.organizationId = user.organizationId;\n\n        console.log(\"Session set:\", { userId: req.session.userId, userRole: req.session.userRole });\n\n        res.json({\n          user: {\n            id: user.id,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n          },\n          organization: {\n            id: organization.id,\n            name: organization.name,\n            code: organization.code,\n          },\n        });\n      } else if (type === \"officer\") {\n        // Officer registration\n        const { firstName, lastName, email, password, organizationCode } = userData;\n        \n        // Check if email already exists\n        const existingUser = await storage.getUserByEmail(email);\n        if (existingUser) {\n          return res.status(400).json({ message: \"Email already registered\" });\n        }\n\n        // Find organization by code\n        const organization = await storage.getOrganizationByCode(organizationCode);\n        if (!organization) {\n          return res.status(400).json({ message: \"Invalid organization code\" });\n        }\n\n        // Create officer user\n        const hashedPassword = await bcrypt.hash(password, 10);\n        const user = await storage.createUser({\n          email,\n          password: hashedPassword,\n          firstName,\n          lastName,\n          role: \"officer\",\n          organizationId: organization.id,\n        });\n\n        req.session.userId = user.id;\n        req.session.userRole = user.role;\n        req.session.organizationId = user.organizationId;\n\n        res.json({\n          user: {\n            id: user.id,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            role: user.role,\n          },\n          organization: {\n            id: organization.id,\n            name: organization.name,\n            code: organization.code,\n          },\n        });\n      } else {\n        return res.status(400).json({ message: \"Invalid registration type\" });\n      }\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      console.log(\"Login attempt:\", email, \"password length:\", password?.length);\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        console.log(\"User not found:\", email);\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      console.log(\"User found:\", user.id, \"stored hash:\", user.password);\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      console.log(\"Password valid:\", isValidPassword);\n      \n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.userId = user.id;\n      req.session.userRole = user.role;\n      req.session.organizationId = user.organizationId;\n\n      const organization = await storage.getOrganizationByCode(\"\");\n      \n      res.json({\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n        },\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req: any, res) => {\n    console.log(\"Logout request - sessionUserId:\", req.session?.userId);\n    \n    // Clear session data\n    req.session.destroy((err: any) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      \n      // Clear the session cookie\n      res.clearCookie('connect.sid', {\n        path: '/',\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production'\n      });\n      \n      console.log(\"Logout successful\");\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", requireAuth, async (req: any, res) => {\n    try {\n      console.log(\"Auth me request - sessionUserId:\", req.session.userId, \"sessionRole:\", req.session.userRole);\n      const user = await storage.getUserById(req.session.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      console.log(\"User from database:\", { id: user.id, role: user.role, email: user.email });\n\n      res.json({\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          organizationId: user.organizationId,\n        },\n      });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  // Get organization details\n  app.get(\"/api/organization\", requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUserById(req.session.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const organization = await storage.getOrganizationById(user.organizationId);\n      if (!organization) {\n        return res.status(404).json({ message: \"Organization not found\" });\n      }\n\n      res.json({\n        id: organization.id,\n        name: organization.name,\n        code: organization.code,\n        createdAt: organization.createdAt,\n      });\n    } catch (error) {\n      console.error(\"Get organization error:\", error);\n      res.status(500).json({ message: \"Failed to get organization\" });\n    }\n  });\n\n  // Get team members\n  app.get(\"/api/organization/members\", requireAuth, async (req: any, res) => {\n    try {\n      const user = await storage.getUserById(req.session.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const members = await storage.getUsersByOrganization(user.organizationId);\n      res.json(members.map(member => ({\n        id: member.id,\n        email: member.email,\n        firstName: member.firstName,\n        lastName: member.lastName,\n        role: member.role,\n        createdAt: member.createdAt,\n      })));\n    } catch (error) {\n      console.error(\"Get team members error:\", error);\n      res.status(500).json({ message: \"Failed to get team members\" });\n    }\n  });\n\n  // Remove team member (admin only)\n  app.delete(\"/api/organization/members/:memberId\", requireAuth, requireAdmin, async (req: any, res) => {\n    try {\n      const memberId = parseInt(req.params.memberId);\n      const memberToRemove = await storage.getUserById(memberId);\n      \n      if (!memberToRemove) {\n        return res.status(404).json({ message: \"Member not found\" });\n      }\n\n      // Check if member belongs to same organization\n      if (memberToRemove.organizationId !== req.session.organizationId) {\n        return res.status(403).json({ message: \"Member not in your organization\" });\n      }\n\n      // Cannot remove admin accounts\n      if (memberToRemove.role === \"admin\") {\n        return res.status(403).json({ message: \"Cannot remove admin accounts\" });\n      }\n\n      // Delete the user account completely\n      await storage.deleteUser(memberId);\n      res.json({ message: \"Team member removed successfully\" });\n    } catch (error) {\n      console.error(\"Remove member error:\", error);\n      res.status(500).json({ message: \"Failed to remove team member\" });\n    }\n  });\n\n  // Project routes\n  app.post(\"/api/projects\", requireAuth, async (req: any, res) => {\n    try {\n      console.log(\"Project creation attempt - userId:\", req.session.userId, \"userRole:\", req.session.userRole);\n      \n      // Check if user is admin using session role\n      if (req.session.userRole !== \"admin\") {\n        console.log(\"Project creation denied - user role:\", req.session.userRole);\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const projectData = insertProjectSchema.parse({\n        ...req.body,\n        deadline: req.body.deadline ? new Date(req.body.deadline) : null,\n        budget: req.body.budget ? String(req.body.budget) : null,\n        budgetUsed: req.body.budgetUsed ? String(req.body.budgetUsed) : \"0\",\n        organizationId: req.session.organizationId,\n        createdBy: req.session.userId,\n      });\n\n      console.log(\"Creating project with data:\", projectData);\n      const project = await storage.createProject(projectData);\n      console.log(\"Project created successfully:\", project.id);\n      res.json(project);\n    } catch (error) {\n      console.error(\"Create project error:\", error);\n      res.status(500).json({ message: \"Failed to create project\" });\n    }\n  });\n\n  app.get(\"/api/projects\", requireAuth, async (req: any, res) => {\n    try {\n      const projects = await storage.getProjectsByOrganization(req.session.organizationId);\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Get projects error:\", error);\n      res.status(500).json({ message: \"Failed to get projects\" });\n    }\n  });\n\n  // Update project (PUT)\n  app.put(\"/api/projects/:id\", requireAuth, async (req: any, res) => {\n    try {\n      if (req.session.userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const projectId = parseInt(req.params.id);\n      const updateData = {\n        ...req.body,\n        deadline: req.body.deadline ? new Date(req.body.deadline) : null,\n        budget: req.body.budget ? String(req.body.budget) : null,\n        budgetUsed: req.body.budgetUsed ? String(req.body.budgetUsed) : undefined,\n        progress: req.body.progress !== undefined ? parseInt(req.body.progress) : undefined,\n      };\n\n      const project = await storage.updateProject(projectId, updateData);\n      res.json(project);\n    } catch (error) {\n      console.error(\"Update project error:\", error);\n      res.status(500).json({ message: \"Failed to update project\" });\n    }\n  });\n\n  // Update project (PATCH) - for edit modal\n  app.patch(\"/api/projects/:id\", requireAuth, async (req: any, res) => {\n    try {\n      if (req.session.userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const projectId = parseInt(req.params.id);\n      \n      // Clean update data with proper type conversion\n      const updateData: any = {};\n      \n      if (req.body.name !== undefined) updateData.name = req.body.name;\n      if (req.body.description !== undefined) updateData.description = req.body.description;\n      if (req.body.status !== undefined) updateData.status = req.body.status;\n      if (req.body.progress !== undefined) updateData.progress = parseInt(req.body.progress);\n      if (req.body.budget !== undefined) updateData.budget = String(req.body.budget);\n      if (req.body.budgetUsed !== undefined) updateData.budgetUsed = String(req.body.budgetUsed);\n      if (req.body.deadline !== undefined) {\n        updateData.deadline = req.body.deadline ? new Date(req.body.deadline) : null;\n      }\n\n      console.log(\"PATCH project update data:\", updateData);\n      const project = await storage.updateProject(projectId, updateData);\n      console.log(\"Updated project:\", project);\n      res.json(project);\n    } catch (error) {\n      console.error(\"PATCH project error:\", error);\n      res.status(500).json({ message: \"Failed to update project\" });\n    }\n  });\n\n  // Delete project\n  app.delete(\"/api/projects/:id\", requireAuth, async (req: any, res) => {\n    try {\n      if (req.session.userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const projectId = parseInt(req.params.id);\n      await storage.bulkDeleteProjects([projectId], req.session.organizationId);\n      res.json({ message: \"Project deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete project error:\", error);\n      res.status(500).json({ message: \"Failed to delete project\" });\n    }\n  });\n\n  // Bulk project operations\n  app.delete(\"/api/projects/bulk\", requireAuth, async (req: any, res) => {\n    try {\n      if (req.session.userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { projectIds } = req.body;\n      if (!Array.isArray(projectIds) || projectIds.length === 0) {\n        return res.status(400).json({ message: \"Project IDs are required\" });\n      }\n\n      await storage.bulkDeleteProjects(projectIds, req.session.organizationId);\n      res.json({ message: `${projectIds.length} projects deleted successfully` });\n    } catch (error) {\n      console.error(\"Bulk delete projects error:\", error);\n      res.status(500).json({ message: \"Failed to delete projects\" });\n    }\n  });\n\n  app.patch(\"/api/projects/bulk-status\", requireAuth, async (req: any, res) => {\n    try {\n      if (req.session.userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { projectIds, status } = req.body;\n      if (!Array.isArray(projectIds) || projectIds.length === 0) {\n        return res.status(400).json({ message: \"Project IDs are required\" });\n      }\n\n      await storage.bulkUpdateProjectStatus(projectIds, status, req.session.organizationId);\n      res.json({ message: `${projectIds.length} projects updated successfully` });\n    } catch (error) {\n      console.error(\"Bulk update projects error:\", error);\n      res.status(500).json({ message: \"Failed to update projects\" });\n    }\n  });\n\n  app.post(\"/api/projects/export\", requireAuth, async (req: any, res) => {\n    try {\n      const { projectIds } = req.body;\n      const projects = await storage.getProjectsForExport(projectIds || [], req.session.organizationId);\n      \n      const headers = [\"ID\", \"Name\", \"Description\", \"Budget\", \"Deadline\", \"Status\", \"Goals\", \"Created At\"];\n      const csvRows = [\n        headers.join(\",\"),\n        ...projects.map((project: any) => [\n          project.id,\n          `\"${(project.name || \"\").replace(/\"/g, '\"\"')}\"`,\n          `\"${(project.description || \"\").replace(/\"/g, '\"\"')}\"`,\n          project.budget || \"\",\n          project.deadline ? new Date(project.deadline).toISOString().split('T')[0] : \"\",\n          project.status || \"active\",\n          `\"${(project.goals || \"\").replace(/\"/g, '\"\"')}\"`,\n          new Date(project.createdAt).toISOString().split('T')[0]\n        ].join(\",\"))\n      ];\n\n      res.setHeader(\"Content-Type\", \"text/csv\");\n      res.setHeader(\"Content-Disposition\", \"attachment; filename=projects-export.csv\");\n      res.send(csvRows.join(\"\\n\"));\n    } catch (error) {\n      console.error(\"Export projects error:\", error);\n      res.status(500).json({ message: \"Failed to export projects\" });\n    }\n  });\n\n  // Report routes\n  app.post(\"/api/reports\", requireAuth, upload.array(\"files\", 5), async (req: any, res) => {\n    try {\n      const files = req.files?.map((file: any) => ({\n        originalName: file.originalname,\n        filename: file.filename,\n        path: file.path,\n        size: file.size,\n      })) || [];\n\n      console.log(\"Report submission data:\", {\n        title: req.body.title,\n        content: req.body.content,\n        projectId: req.body.projectId,\n        projectIdType: typeof req.body.projectId,\n        userId: req.session.userId,\n        organizationId: req.session.organizationId\n      });\n\n      const projectId = parseInt(req.body.projectId);\n      if (isNaN(projectId)) {\n        console.error(\"Invalid projectId:\", req.body.projectId);\n        return res.status(400).json({ message: \"Invalid project ID\" });\n      }\n\n      const reportData = {\n        title: req.body.title,\n        content: req.body.content,\n        projectId: projectId,\n        submittedBy: req.session.userId,\n        files: files.length > 0 ? files : null,\n        status: \"submitted\", // Set status to submitted when creating\n        submittedAt: new Date() // Set submission timestamp\n      };\n\n      console.log(\"Validated report data:\", reportData);\n      const validatedData = insertReportSchema.parse(reportData);\n\n      const report = await storage.createReport(validatedData);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Create report error:\", error);\n      res.status(500).json({ message: \"Failed to create report\" });\n    }\n  });\n\n  app.get(\"/api/reports\", requireAuth, async (req: any, res) => {\n    try {\n      let reports;\n      if (req.session.userRole === 'admin') {\n        reports = await storage.getReportsByOrganization(req.session.organizationId);\n      } else {\n        // Officers should only see their own reports\n        const allReports = await storage.getReportsByOrganization(req.session.organizationId);\n        reports = allReports.filter((report: any) => report.submittedBy === req.session.userId);\n        console.log(`Officer ${req.session.userId} reports:`, reports.map(r => ({ id: r.id, title: r.title, status: r.status, submittedBy: r.submittedBy })));\n        console.log(`Officer ${req.session.userId} has ${reports.length} reports total`);\n      }\n      \n      res.json(reports);\n    } catch (error) {\n      console.error(\"Get reports error:\", error);\n      res.status(500).json({ message: \"Failed to get reports\" });\n    }\n  });\n\n  app.get(\"/api/reports/pending\", requireAdmin, async (req: any, res) => {\n    try {\n      const reports = await storage.getPendingReports(req.session.organizationId);\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Get pending reports error:\", error);\n      res.status(500).json({ message: \"Failed to get pending reports\" });\n    }\n  });\n\n  app.patch(\"/api/reports/:id/status\", requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status, reviewNotes } = req.body;\n\n      const report = await storage.updateReportStatus(\n        parseInt(id),\n        status,\n        req.session.userId,\n        reviewNotes\n      );\n\n      res.json(report);\n    } catch (error) {\n      console.error(\"Update report status error:\", error);\n      res.status(500).json({ message: \"Failed to update report status\" });\n    }\n  });\n\n  // Bulk report operations\n  app.patch(\"/api/reports/bulk-approve\", requireAuth, async (req: any, res) => {\n    try {\n      if (req.session.userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { reportIds } = req.body;\n      if (!Array.isArray(reportIds) || reportIds.length === 0) {\n        return res.status(400).json({ message: \"Report IDs are required\" });\n      }\n\n      await storage.bulkUpdateReportStatus(reportIds, \"approved\", req.session.userId, req.session.organizationId);\n      res.json({ message: `${reportIds.length} reports approved successfully` });\n    } catch (error) {\n      console.error(\"Bulk approve reports error:\", error);\n      res.status(500).json({ message: \"Failed to approve reports\" });\n    }\n  });\n\n  app.patch(\"/api/reports/bulk-reject\", requireAuth, async (req: any, res) => {\n    try {\n      if (req.session.userRole !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { reportIds } = req.body;\n      if (!Array.isArray(reportIds) || reportIds.length === 0) {\n        return res.status(400).json({ message: \"Report IDs are required\" });\n      }\n\n      await storage.bulkUpdateReportStatus(reportIds, \"rejected\", req.session.userId, req.session.organizationId);\n      res.json({ message: `${reportIds.length} reports rejected successfully` });\n    } catch (error) {\n      console.error(\"Bulk reject reports error:\", error);\n      res.status(500).json({ message: \"Failed to reject reports\" });\n    }\n  });\n\n  // Update an existing report (for editing drafts) - with file upload support\n  app.put(\"/api/reports/:id\", requireAuth, upload.array('files', 10), async (req: any, res) => {\n    const reportId = parseInt(req.params.id);\n    const { userId, userRole, organizationId } = req.session;\n    \n    try {\n      const existingReport = await storage.getReportById(reportId);\n      if (!existingReport) {\n        return res.status(404).json({ error: \"Report not found\" });\n      }\n      \n      if (existingReport.submittedBy !== userId) {\n        return res.status(403).json({ error: \"Can only edit your own reports\" });\n      }\n      \n      if (existingReport.status !== 'draft') {\n        return res.status(400).json({ error: \"Can only edit draft reports\" });\n      }\n      \n      // Handle file uploads\n      const files = Array.isArray(req.files) ? req.files.map((file: any) => ({\n        originalName: file.originalname,\n        filename: file.filename,\n        path: file.path,\n        size: file.size,\n      })) : [];\n      \n      console.log(\"Updating report:\", {\n        reportId,\n        title: req.body.title,\n        content: req.body.content,\n        projectId: req.body.projectId,\n        files: files.length\n      });\n      \n      const { title, content, projectId } = req.body;\n      \n      // Merge existing files with new files if any\n      let updatedFiles = Array.isArray(existingReport.files) ? existingReport.files : [];\n      if (files.length > 0) {\n        updatedFiles = [...updatedFiles, ...files];\n      }\n      \n      const updated = await storage.updateReport(reportId, {\n        title,\n        content,\n        projectId: parseInt(projectId),\n        files: updatedFiles.length > 0 ? updatedFiles : undefined,\n        status: \"submitted\",\n        submittedAt: new Date(),\n      });\n      \n      res.json(updated);\n    } catch (error: any) {\n      console.error(\"Error updating report:\", error);\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Recall report (officer only - for their own reports)\n  app.post(\"/api/reports/:id/recall\", requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const report = await storage.recallReport(parseInt(id), req.session.userId);\n      res.json(report);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Failed to recall report\" });\n    }\n  });\n\n  app.post(\"/api/reports/export\", requireAuth, async (req: any, res) => {\n    try {\n      const { reportIds } = req.body;\n      const reports = await storage.getReportsForExport(reportIds || [], req.session.organizationId);\n      \n      const headers = [\"ID\", \"Title\", \"Description\", \"Status\", \"Project\", \"Submitted By\", \"Created At\", \"Review Notes\"];\n      const csvRows = [\n        headers.join(\",\"),\n        ...reports.map((report: any) => [\n          report.id,\n          `\"${(report.title || \"\").replace(/\"/g, '\"\"')}\"`,\n          `\"${(report.description || \"\").replace(/\"/g, '\"\"')}\"`,\n          report.status,\n          `\"${(report.projectName || \"\").replace(/\"/g, '\"\"')}\"`,\n          `\"${(report.submittedByName || \"\").replace(/\"/g, '\"\"')}\"`,\n          new Date(report.createdAt).toISOString().split('T')[0],\n          `\"${(report.reviewNotes || \"\").replace(/\"/g, '\"\"')}\"`\n        ].join(\",\"))\n      ];\n\n      res.setHeader(\"Content-Type\", \"text/csv\");\n      res.setHeader(\"Content-Disposition\", \"attachment; filename=reports-export.csv\");\n      res.send(csvRows.join(\"\\n\"));\n    } catch (error) {\n      console.error(\"Export reports error:\", error);\n      res.status(500).json({ message: \"Failed to export reports\" });\n    }\n  });\n\n  // Dashboard data routes\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req: any, res) => {\n    try {\n      const projects = await storage.getProjectsByOrganization(req.session.organizationId);\n      const reports = await storage.getReportsByOrganization(req.session.organizationId);\n      const users = await storage.getUsersByOrganization(req.session.organizationId);\n      const pendingReports = await storage.getPendingReports(req.session.organizationId);\n\n      const totalBudget = projects.reduce((sum, project) => {\n        return sum + (parseFloat(project.budget?.toString() || \"0\"));\n      }, 0);\n\n      // Calculate active projects (not completed) and completed projects\n      const completedProjects = projects.filter(project => project.progress === 100).length;\n      const activeProjects = projects.length - completedProjects;\n\n      // Calculate overall progress as average of all project progress\n      const overallProgress = projects.length > 0 \n        ? Math.round(projects.reduce((sum, project) => sum + (project.progress || 0), 0) / projects.length)\n        : 0;\n\n      // Calculate total budget used across all projects\n      const totalBudgetUsed = projects.reduce((sum, project) => {\n        return sum + (parseFloat(project.budgetUsed?.toString() || \"0\"));\n      }, 0);\n\n      // Calculate budget utilization percentage\n      const budgetUtilization = totalBudget > 0 \n        ? Math.round((totalBudgetUsed / totalBudget) * 100)\n        : 0;\n\n      res.json({\n        activeProjects,\n        completedProjects,\n        totalProjects: projects.length,\n        overallProgress,\n        totalReports: reports.length,\n        pendingReports: pendingReports.length,\n        teamMembers: users.length,\n        totalBudget,\n        totalBudgetUsed,\n        budgetUtilization,\n      });\n    } catch (error) {\n      console.error(\"Get dashboard stats error:\", error);\n      res.status(500).json({ message: \"Failed to get dashboard stats\" });\n    }\n  });\n\n  // File serving route\n  app.get(\"/api/files/:filename\", requireAuth, async (req: any, res) => {\n    try {\n      const { filename } = req.params;\n      const uploadsDir = path.resolve(process.cwd(), \"uploads\");\n      const filePath = path.join(uploadsDir, filename);\n      \n      console.log(\"=== FILE DOWNLOAD REQUEST ===\");\n      console.log(\"Filename:\", filename);\n      console.log(\"File path:\", filePath);\n      console.log(\"User ID:\", req.session.userId);\n      console.log(\"User role:\", req.session.userRole);\n      console.log(\"Organization ID:\", req.session.organizationId);\n      \n      // Check if file exists\n      if (!fs.existsSync(filePath)) {\n        console.error(\"File not found:\", filePath);\n        return res.status(404).json({ message: \"File not found\" });\n      }\n      \n      // Check if this is a report file first\n      const reports = await storage.getReportsByOrganization(req.session.organizationId);\n      console.log(\"Checking reports for file:\", filename);\n      console.log(\"Found reports:\", reports.length);\n      \n      const reportWithFile = reports.find(report => {\n        if (report.files && Array.isArray(report.files)) {\n          console.log(\"Report\", report.id, \"files:\", report.files);\n          return report.files.some((file: any) => file.filename === filename);\n        }\n        return false;\n      });\n      \n      if (reportWithFile) {\n        console.log(\"File found in report:\", reportWithFile.id);\n        const fileInfo = reportWithFile.files.find((file: any) => file.filename === filename);\n        const originalName = fileInfo?.originalName || filename;\n        \n        console.log(\"Serving report file:\", {\n          filename,\n          originalName,\n          filePath,\n          fileExists: fs.existsSync(filePath)\n        });\n        \n        // Set proper headers for file download\n        res.setHeader('Content-Disposition', `attachment; filename=\"${originalName}\"`);\n        res.setHeader('Content-Type', 'application/octet-stream');\n        \n        // Serve the file\n        return res.sendFile(filePath, (err) => {\n          if (err) {\n            console.error(\"File download error:\", err);\n            if (!res.headersSent) {\n              res.status(500).json({ message: \"Download failed\" });\n            }\n          }\n        });\n      }\n      \n      // Check if this is a message file\n      const messages = await storage.getAllMessagesForOrganization(req.session.organizationId);\n      console.log(\"Found messages for organization:\", messages.length);\n      \n      const messageWithFile = messages.find(msg => {\n        if (!msg.fileUrl) return false;\n        // Handle both \"/api/files/filename\" and just \"filename\" formats\n        const msgFilename = msg.fileUrl.replace('/api/files/', '');\n        return msgFilename === filename;\n      });\n      \n      console.log(\"Looking for message with filename:\", filename);\n      console.log(\"Message with file found:\", messageWithFile ? 'Yes' : 'No');\n      if (messageWithFile) {\n        console.log(\"File message details:\", {\n          id: messageWithFile.id,\n          senderId: messageWithFile.senderId,\n          recipientId: messageWithFile.recipientId,\n          fileUrl: messageWithFile.fileUrl\n        });\n      }\n      \n      if (!messageWithFile) {\n        console.log(\"File access denied - not found in messages or reports\");\n        return res.status(403).json({ message: \"File access denied\" });\n      }\n      \n      const originalName = messageWithFile.fileName || filename;\n      \n      // Set proper headers for file download\n      res.setHeader('Content-Disposition', `attachment; filename=\"${originalName}\"`);\n      res.setHeader('Content-Type', messageWithFile?.fileType || 'application/octet-stream');\n      \n      // Serve the file\n      res.sendFile(filePath, (err) => {\n        if (err) {\n          console.error(\"File download error:\", err);\n          if (!res.headersSent) {\n            res.status(500).json({ message: \"Download failed\" });\n          }\n        }\n      });\n    } catch (error) {\n      console.error(\"File serving error:\", error);\n      res.status(500).json({ message: \"File serving failed\" });\n    }\n  });\n\n  // Messaging routes\n  app.post(\"/api/messages\", requireAuth, async (req: any, res) => {\n    try {\n      console.log(\"Message request body:\", req.body);\n      console.log(\"Session data:\", {\n        userId: req.session.userId,\n        organizationId: req.session.organizationId\n      });\n\n      const messageData = {\n        content: req.body.content,\n        recipientId: req.body.recipientId,\n        senderId: req.session.userId,\n        organizationId: req.session.organizationId,\n        urgency: req.body.urgency || \"normal\",\n      };\n\n      console.log(\"Prepared message data:\", messageData);\n      const validatedData = insertMessageSchema.parse(messageData);\n      console.log(\"Validated message data:\", validatedData);\n\n      const message = await storage.sendMessage(validatedData);\n      res.json(message);\n    } catch (error) {\n      console.error(\"Send message error:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // File upload for messages\n  app.post(\"/api/messages/upload\", requireAuth, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const { recipientId, content } = req.body;\n      if (!recipientId) {\n        return res.status(400).json({ message: \"Recipient ID is required\" });\n      }\n\n      // Generate a unique filename\n      const fileExtension = path.extname(req.file.originalname);\n      const uniqueFilename = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}${fileExtension}`;\n      const newPath = path.join(uploadDir, uniqueFilename);\n      \n      // Move file to permanent location with unique name\n      fs.renameSync(req.file.path, newPath);\n\n      // Create message with file attachment\n      const messageData = {\n        content: content || `📎 Document: ${req.file.originalname}`,\n        senderId: req.session.userId,\n        recipientId: parseInt(recipientId),\n        organizationId: req.session.organizationId,\n        fileUrl: `/api/files/${uniqueFilename}`,\n        fileName: req.file.originalname,\n        fileSize: req.file.size,\n        fileType: req.file.mimetype\n      };\n\n      const message = await storage.sendMessage(messageData);\n      res.json(message);\n    } catch (error) {\n      console.error(\"Upload message error:\", error);\n      // Clean up uploaded file if there was an error\n      if (req.file && fs.existsSync(req.file.path)) {\n        fs.unlinkSync(req.file.path);\n      }\n      res.status(500).json({ message: \"Failed to upload file\" });\n    }\n  });\n\n  // Get unread messages count for current user\n  app.get(\"/api/messages/unread\", requireAuth, async (req: any, res) => {\n    try {\n      console.log(\"Getting unread messages for user:\", req.session.userId, \"org:\", req.session.organizationId);\n      \n      if (!req.session.userId || !req.session.organizationId) {\n        return res.status(400).json({ message: \"Invalid session data\" });\n      }\n      \n      const unreadMessages = await storage.getUnreadMessagesForUser(req.session.userId, req.session.organizationId);\n      res.json({ count: unreadMessages.length, messages: unreadMessages });\n    } catch (error) {\n      console.error(\"Get unread messages error:\", error);\n      res.status(500).json({ message: \"Failed to get unread messages\" });\n    }\n  });\n\n  // Mark message as read\n  app.patch(\"/api/messages/:messageId/read\", requireAuth, async (req: any, res) => {\n    try {\n      const { messageId } = req.params;\n      await storage.markMessageAsRead(parseInt(messageId));\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Mark message as read error:\", error);\n      res.status(500).json({ message: \"Failed to mark message as read\" });\n    }\n  });\n\n  // Mark all messages as read for current user\n  app.post(\"/api/messages/mark-all-read\", requireAuth, async (req: any, res) => {\n    try {\n      console.log(`Marking all messages as read for user: ${req.session.userId} org: ${req.session.organizationId}`);\n      await storage.markAllMessagesAsReadForUser(req.session.userId, req.session.organizationId);\n      console.log(`Successfully marked all messages as read for user: ${req.session.userId}`);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Mark all messages as read error:\", error);\n      res.status(500).json({ message: \"Failed to mark all messages as read\" });\n    }\n  });\n\n  // Get all messages for current user\n  app.get(\"/api/messages\", requireAuth, async (req: any, res) => {\n    try {\n      if (req.session.userRole === \"admin\") {\n        // Admin gets all messages in organization\n        const messages = await storage.getAllMessagesForOrganization(req.session.organizationId);\n        res.json(messages);\n      } else {\n        // Officer gets messages between them and admin\n        const users = await storage.getUsersByOrganization(req.session.organizationId);\n        const admin = users.find(user => user.role === \"admin\");\n        if (!admin) {\n          return res.status(404).json({ message: \"Admin not found\" });\n        }\n        \n        const messages = await storage.getMessagesBetweenUsers(admin.id, req.session.userId, req.session.organizationId);\n        res.json(messages);\n      }\n    } catch (error) {\n      console.error(\"Get messages error:\", error);\n      res.status(500).json({ message: \"Failed to get messages\" });\n    }\n  });\n\n  // AI Dashboard Insights\n  app.post(\"/api/ai/dashboard-insights\", requireAuth, async (req: any, res) => {\n    try {\n      const { aiDashboardService } = await import(\"./aiDashboardService\");\n      \n      // Get enhanced project data for AI analysis\n      const projects = await storage.getProjectsByOrganization(req.session.organizationId);\n      const reports = await storage.getReportsByOrganization(req.session.organizationId);\n      const users = await storage.getUsersByOrganization(req.session.organizationId);\n      \n      // Get detailed project information for comprehensive analysis\n      const projectDetails = projects.map(p => ({\n        name: p.name,\n        description: p.description,\n        goals: p.goals,\n        status: p.status,\n        progress: p.progress,\n        budget: p.budget,\n        budgetUsed: p.budgetUsed\n      }));\n      \n      // Prepare comprehensive analysis data\n      const analysisData = {\n        totalProjects: projects.length,\n        activeProjects: projects.filter(p => p.status === 'active').length,\n        completedProjects: projects.filter(p => p.status === 'completed').length,\n        overdueProjects: projects.filter(p => {\n          if (!p.deadline) return false;\n          return new Date(p.deadline) < new Date() && p.status !== 'completed';\n        }).length,\n        averageProgress: projects.length > 0 ? \n          projects.reduce((acc, p) => acc + (p.progress || 0), 0) / projects.length : 0,\n        totalBudget: projects.reduce((acc, p) => acc + parseFloat(p.budget || '0'), 0),\n        usedBudget: projects.reduce((acc, p) => acc + parseFloat(p.budgetUsed || '0'), 0),\n        pendingReports: reports.filter(r => r.status === 'submitted').length,\n        approvedReports: reports.filter(r => r.status === 'approved').length,\n        rejectedReports: reports.filter(r => r.status === 'rejected').length,\n        recentActivity: reports.filter(r => {\n          const reportDate = new Date(r.createdAt);\n          const weekAgo = new Date();\n          weekAgo.setDate(weekAgo.getDate() - 7);\n          return reportDate > weekAgo;\n        }).length,\n        teamMembers: users.length,\n        projectDeadlines: projects.map(p => p.deadline).filter(Boolean),\n        projectDetails: projectDetails\n      };\n\n      const insights = await aiDashboardService.generateDashboardInsights(analysisData);\n      res.json(insights);\n      \n    } catch (error: any) {\n      console.error(\"AI Dashboard Insights Error:\", error);\n      res.status(500).json({ message: \"Failed to generate AI insights\" });\n    }\n  });\n\n  app.get(\"/api/messages/:userId\", requireAuth, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      \n      if (req.session.userRole === \"admin\") {\n        // Admin viewing messages with a specific user\n        const messages = await storage.getMessagesBetweenUsers(req.session.userId, parseInt(userId), req.session.organizationId);\n        res.json(messages);\n      } else {\n        // Officer viewing messages with admin\n        // Find admin of the organization\n        const users = await storage.getUsersByOrganization(req.session.organizationId);\n        const admin = users.find(user => user.role === \"admin\");\n        if (!admin) {\n          return res.status(404).json({ message: \"Admin not found\" });\n        }\n        \n        // Get messages between admin and current user\n        const messages = await storage.getMessagesBetweenUsers(admin.id, req.session.userId, req.session.organizationId);\n        res.json(messages);\n      }\n    } catch (error) {\n      console.error(\"Get messages error:\", error);\n      res.status(500).json({ message: \"Failed to get messages\" });\n    }\n  });\n\n  app.get(\"/api/messages/unread/count\", requireAuth, async (req: any, res) => {\n    try {\n      const unreadMessages = await storage.getUnreadMessagesForUser(req.session.userId, req.session.organizationId);\n      res.json({ count: unreadMessages.length });\n    } catch (error) {\n      console.error(\"Get unread messages error:\", error);\n      res.status(500).json({ message: \"Failed to get unread messages\" });\n    }\n  });\n\n  app.patch(\"/api/messages/:id/read\", requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.markMessageAsRead(parseInt(id));\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Mark message as read error:\", error);\n      res.status(500).json({ message: \"Failed to mark message as read\" });\n    }\n  });\n\n  // AI Report Review endpoint\n  app.post('/api/reports/analyze', requireAuth, async (req: any, res) => {\n    try {\n      console.log('AI Analysis Request received:', {\n        bodyKeys: Object.keys(req.body),\n        userId: req.session.userId,\n        hasOpenAI: !!process.env.OPENAI_API_KEY,\n        title: req.body.title,\n        contentLength: req.body.content?.length\n      });\n\n      const { \n        title, \n        content, \n        projectId, \n        projectDescription, \n        projectGoals, \n        hasAttachments, \n        attachmentCount, \n        attachmentTypes,\n        attachmentContents,\n        reportId,\n        challengesFaced, \n        nextSteps, \n        budgetNotes \n      } = req.body;\n      \n      if (!title || !content) {\n        return res.status(400).json({ message: \"Title and content are required\" });\n      }\n\n      // Get full project details for context\n      let project = null;\n      if (projectId) {\n        project = await storage.getProjectById(projectId);\n        console.log('Project found:', project);\n      }\n\n      // Handle file parsing for existing reports\n      let finalAttachmentContents = attachmentContents || '';\n      let attachmentPaths: string[] = [];\n      \n      console.log('Analysis request - attachmentContents provided:', !!attachmentContents);\n      console.log('Analysis request - reportId:', reportId);\n      console.log('Analysis request - hasAttachments:', hasAttachments);\n      \n      if (!finalAttachmentContents && reportId && hasAttachments) {\n        // Get the existing report with files\n        const existingReport = await storage.getReportById(reportId);\n        if (existingReport && existingReport.files && Array.isArray(existingReport.files)) {\n          console.log('Found existing report files:', existingReport.files);\n          attachmentPaths = existingReport.files.map((file: any) => file.filename);\n          console.log('Attachment paths for parsing:', attachmentPaths);\n        }\n      }\n\n      const reportData = {\n        title,\n        content,\n        projectName: project?.name || \"Unknown Project\",\n        projectDescription: project?.description || projectDescription || \"\",\n        projectGoals: project?.goals || projectGoals || \"\",\n        projectBudget: project?.budget || 0,\n        projectStatus: project?.status || \"active\",\n        hasAttachments,\n        attachmentCount: attachmentCount || 0,\n        attachmentTypes: attachmentTypes || [],\n        attachmentPaths: attachmentPaths.length > 0 ? attachmentPaths : undefined,\n        attachmentContents: finalAttachmentContents,\n        challengesFaced,\n        nextSteps,\n        budgetNotes\n      };\n\n      console.log('Calling AI with data:', reportData);\n      const analysis = await aiReportReviewer.analyzeReport(reportData);\n      console.log('AI Analysis completed:', analysis);\n\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"AI Report Analysis Error Details:\", {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      });\n      res.status(500).json({ \n        message: \"Failed to analyze report\", \n        error: error.message,\n        details: process.env.NODE_ENV === 'development' ? error.stack : undefined\n      });\n    }\n  });\n\n  // Contact/Meeting booking endpoint\n  app.post('/api/contact/meeting', async (req, res) => {\n    try {\n      const {\n        firstName,\n        lastName,\n        email,\n        company,\n        phone,\n        organizationType,\n        teamSize,\n        meetingPurpose,\n        preferredTime,\n        message\n      } = req.body;\n\n      // Validate required fields\n      if (!firstName || !lastName || !email || !company) {\n        return res.status(400).json({\n          message: \"Missing required fields: firstName, lastName, email, and company are required\"\n        });\n      }\n\n      const requestId = `MTG-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n      // Store the meeting booking in the database\n      const booking = await storage.createMeetingBooking({\n        firstName,\n        lastName,\n        email,\n        company,\n        phone: phone || null,\n        organizationType: organizationType || null,\n        teamSize: teamSize || null,\n        meetingPurpose: meetingPurpose || null,\n        preferredTime: preferredTime || null,\n        message: message || null,\n        requestId,\n        status: \"pending\"\n      });\n\n      // Send email notifications\n      const { emailService } = await import('./emailNotifications');\n      try {\n        await emailService.sendNewBookingNotification(booking);\n        console.log('Email notifications sent for booking:', booking.requestId);\n      } catch (emailError) {\n        console.error('Failed to send email notifications:', emailError);\n        // Don't fail the request if email fails\n      }\n\n      console.log('Meeting booking stored:', {\n        id: booking.id,\n        requestId: booking.requestId,\n        company: booking.company,\n        email: booking.email\n      });\n\n      res.json({\n        message: \"Meeting request submitted successfully\",\n        requestId: booking.requestId\n      });\n\n    } catch (error) {\n      console.error(\"Error processing meeting request:\", error);\n      res.status(500).json({ message: \"Failed to process meeting request\" });\n    }\n  });\n\n  // Admin endpoint to get meeting bookings\n  app.get('/api/admin/meeting-bookings', async (req, res) => {\n    try {\n      const { status } = req.query;\n      const bookings = await storage.getMeetingBookings(status as string);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching meeting bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch meeting bookings\" });\n    }\n  });\n\n  // Admin endpoint to update booking status\n  app.patch('/api/admin/meeting-bookings/:id/status', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      if (!status) {\n        return res.status(400).json({ message: \"Status is required\" });\n      }\n\n      const updatedBooking = await storage.updateMeetingBookingStatus(parseInt(id), status);\n      res.json(updatedBooking);\n    } catch (error) {\n      console.error(\"Error updating booking status:\", error);\n      res.status(500).json({ message: \"Failed to update booking status\" });\n    }\n  });\n\n  // PDF Generation endpoint\n  app.post(\"/api/generate-pdf\", requireAuth, async (req, res) => {\n    try {\n      const { htmlContent, filename, reportType } = req.body;\n      \n      if (!htmlContent || !filename) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      const puppeteer = require('puppeteer');\n      \n      const browser = await puppeteer.launch({\n        headless: true,\n        args: ['--no-sandbox', '--disable-setuid-sandbox']\n      });\n      \n      const page = await browser.newPage();\n      \n      // Set page format and options\n      await page.setContent(htmlContent, { \n        waitUntil: 'networkidle0',\n        timeout: 30000 \n      });\n      \n      // Generate PDF\n      const pdfBuffer = await page.pdf({\n        format: 'A4',\n        printBackground: true,\n        margin: {\n          top: '20px',\n          right: '20px',\n          bottom: '20px',\n          left: '20px'\n        }\n      });\n      \n      await browser.close();\n      \n      // Set response headers for PDF download\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.setHeader('Content-Length', pdfBuffer.length);\n      \n      // Send PDF buffer\n      res.send(pdfBuffer);\n      \n    } catch (error) {\n      console.error('PDF generation error:', error);\n      res.status(500).json({ error: \"Failed to generate PDF\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":50825},"server/storage.ts":{"content":"import {\n  organizations,\n  users,\n  projects,\n  reports,\n  messages,\n  meetingBookings,\n  type Organization,\n  type User,\n  type Project,\n  type Report,\n  type Message,\n  type MeetingBooking,\n  type InsertOrganization,\n  type InsertUser,\n  type InsertProject,\n  type InsertReport,\n  type InsertMessage,\n  type InsertMeetingBooking,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, desc, inArray, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Organization operations\n  createOrganization(organization: InsertOrganization): Promise<Organization>;\n  getOrganizationByCode(code: string): Promise<Organization | undefined>;\n  getOrganizationById(id: number): Promise<Organization | undefined>;\n\n  // User operations\n  createUser(user: InsertUser): Promise<User>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserById(id: number): Promise<User | undefined>;\n  getUsersByOrganization(organizationId: number): Promise<User[]>;\n  deleteUser(id: number): Promise<void>;\n\n  // Project operations\n  createProject(project: InsertProject): Promise<Project>;\n  getProjectsByOrganization(organizationId: number): Promise<Project[]>;\n  getProjectById(id: number): Promise<Project | undefined>;\n  updateProject(id: number, updates: Partial<Project>): Promise<Project>;\n  updateReport(id: number, updates: Partial<Report>): Promise<Report>;\n\n  // Report operations\n  createReport(report: InsertReport): Promise<Report>;\n  getReportsByProject(projectId: number): Promise<Report[]>;\n  getReportsByOrganization(organizationId: number): Promise<Report[]>;\n  getPendingReports(organizationId: number): Promise<Report[]>;\n  getReportById(id: number): Promise<Report | undefined>;\n  updateReportStatus(id: number, status: string, reviewedBy: number, reviewNotes?: string): Promise<Report>;\n  recallReport(id: number, officerId: number): Promise<Report>;\n\n  // Message operations\n  sendMessage(message: InsertMessage): Promise<Message>;\n  getMessagesBetweenUsers(senderId: number, recipientId: number, organizationId: number): Promise<Message[]>;\n  getAllMessagesForOrganization(organizationId: number): Promise<Message[]>;\n  getUnreadMessagesForUser(userId: number, organizationId: number): Promise<Message[]>;\n  markMessageAsRead(messageId: number): Promise<void>;\n  markAllMessagesAsReadForUser(userId: number, organizationId: number): Promise<void>;\n\n  // Bulk operations\n  bulkDeleteProjects(projectIds: number[], organizationId: number): Promise<void>;\n  bulkUpdateProjectStatus(projectIds: number[], status: string, organizationId: number): Promise<void>;\n  getProjectsForExport(projectIds: number[], organizationId: number): Promise<any[]>;\n  bulkUpdateReportStatus(reportIds: number[], status: string, reviewedBy: number, organizationId: number): Promise<void>;\n  getReportsForExport(reportIds: number[], organizationId: number): Promise<any[]>;\n\n  // Meeting booking operations\n  createMeetingBooking(booking: InsertMeetingBooking): Promise<MeetingBooking>;\n  getMeetingBookings(status?: string): Promise<MeetingBooking[]>;\n  getMeetingBookingById(id: number): Promise<MeetingBooking | undefined>;\n  updateMeetingBookingStatus(id: number, status: string): Promise<MeetingBooking>;\n  getMeetingBookingByRequestId(requestId: string): Promise<MeetingBooking | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async createOrganization(organization: InsertOrganization): Promise<Organization> {\n    const [created] = await db.insert(organizations).values(organization).returning();\n    return created;\n  }\n\n  async getOrganizationByCode(code: string): Promise<Organization | undefined> {\n    const [organization] = await db.select().from(organizations).where(eq(organizations.code, code));\n    return organization;\n  }\n\n  async getOrganizationById(id: number): Promise<Organization | undefined> {\n    const [organization] = await db.select().from(organizations).where(eq(organizations.id, id));\n    return organization;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [created] = await db.insert(users).values(user).returning();\n    return created;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserById(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUsersByOrganization(organizationId: number): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.organizationId, organizationId));\n  }\n\n  async deleteUser(id: number): Promise<void> {\n    // First delete all messages sent by this user\n    await db.delete(messages).where(eq(messages.senderId, id));\n    \n    // Delete all messages received by this user\n    await db.delete(messages).where(eq(messages.recipientId, id));\n    \n    // Delete all reports submitted by this user\n    await db.delete(reports).where(eq(reports.submittedBy, id));\n    \n    // Finally delete the user\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async createProject(project: InsertProject): Promise<Project> {\n    // Calculate days left if deadline is provided\n    if (project.deadline) {\n      const deadline = new Date(project.deadline);\n      const now = new Date();\n      now.setHours(0, 0, 0, 0);\n      deadline.setHours(0, 0, 0, 0);\n      const diffTime = deadline.getTime() - now.getTime();\n      const daysLeft = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      \n      project.daysLeft = daysLeft;\n      project.isOverdue = daysLeft < 0;\n    }\n\n    const [created] = await db.insert(projects).values(project).returning();\n    return created;\n  }\n\n  async getProjectsByOrganization(organizationId: number): Promise<Project[]> {\n    return await db.select().from(projects).where(eq(projects.organizationId, organizationId));\n  }\n\n  async getProjectById(id: number): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project;\n  }\n\n  async updateProject(id: number, updates: Partial<Project>): Promise<Project> {\n    // If deadline is being updated, recalculate days left\n    if (updates.deadline) {\n      const deadline = new Date(updates.deadline);\n      const now = new Date();\n      now.setHours(0, 0, 0, 0);\n      deadline.setHours(0, 0, 0, 0);\n      const diffTime = deadline.getTime() - now.getTime();\n      const daysLeft = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      \n      updates.daysLeft = daysLeft;\n      updates.isOverdue = daysLeft < 0;\n      updates.overdueNotificationSent = false; // Reset notification flag when deadline changes\n    }\n\n    // Auto-update status based on progress and overdue state\n    if (updates.progress !== undefined) {\n      // Get current project data first\n      const [currentProject] = await db.select().from(projects).where(eq(projects.id, id));\n      \n      if (updates.progress >= 100) {\n        updates.status = 'completed';\n      } else if (currentProject?.isOverdue && updates.progress < 100) {\n        updates.status = 'overdue';\n      } else if (updates.progress < 100 && (currentProject?.status === 'completed' || updates.status === 'completed')) {\n        updates.status = 'active'; // Revert from completed to active if progress drops\n      }\n    }\n    \n    // Also check if we're updating progress without explicit status change\n    if (updates.progress !== undefined && !updates.status) {\n      const [currentProject] = await db.select().from(projects).where(eq(projects.id, id));\n      if (currentProject?.status === 'completed' && updates.progress < 100) {\n        updates.status = 'active';\n      }\n    }\n\n    const [updated] = await db.update(projects).set({...updates, updatedAt: new Date()}).where(eq(projects.id, id)).returning();\n    return updated;\n  }\n\n  async createReport(report: InsertReport): Promise<Report> {\n    const [created] = await db.insert(reports).values(report).returning();\n    return created;\n  }\n\n  async getReportsByProject(projectId: number): Promise<Report[]> {\n    return await db.select().from(reports).where(eq(reports.projectId, projectId)).orderBy(desc(reports.submittedAt));\n  }\n\n  async getReportsByOrganization(organizationId: number): Promise<Report[]> {\n    return await db\n      .select({\n        id: reports.id,\n        title: reports.title,\n        content: reports.content,\n        files: reports.files,\n        status: reports.status,\n        projectId: reports.projectId,\n        submittedBy: reports.submittedBy,\n        reviewedBy: reports.reviewedBy,\n        reviewNotes: reports.reviewNotes,\n        submittedAt: reports.submittedAt,\n        reviewedAt: reports.reviewedAt,\n        projectName: projects.name,\n        createdAt: reports.submittedAt,\n      })\n      .from(reports)\n      .innerJoin(projects, eq(reports.projectId, projects.id))\n      .where(eq(projects.organizationId, organizationId))\n      .orderBy(desc(reports.submittedAt));\n  }\n\n  async getPendingReports(organizationId: number): Promise<Report[]> {\n    return await db\n      .select({\n        id: reports.id,\n        title: reports.title,\n        content: reports.content,\n        files: reports.files,\n        status: reports.status,\n        projectId: reports.projectId,\n        submittedBy: reports.submittedBy,\n        reviewedBy: reports.reviewedBy,\n        reviewNotes: reports.reviewNotes,\n        submittedAt: reports.submittedAt,\n        reviewedAt: reports.reviewedAt,\n      })\n      .from(reports)\n      .innerJoin(projects, eq(reports.projectId, projects.id))\n      .where(\n        and(\n          eq(projects.organizationId, organizationId),\n          eq(reports.status, \"submitted\")\n        )\n      )\n      .orderBy(desc(reports.submittedAt));\n  }\n\n  async getReportById(id: number): Promise<Report | undefined> {\n    const [report] = await db.select().from(reports).where(eq(reports.id, id));\n    return report;\n  }\n\n  async updateReportStatus(id: number, status: string, reviewedBy: number, reviewNotes?: string): Promise<Report> {\n    const [updated] = await db\n      .update(reports)\n      .set({\n        status,\n        reviewedBy,\n        reviewNotes,\n        reviewedAt: new Date(),\n      })\n      .where(eq(reports.id, id))\n      .returning();\n    return updated;\n  }\n\n  async updateReport(id: number, updates: Partial<Report>): Promise<Report> {\n    const [updated] = await db.update(reports).set(updates).where(eq(reports.id, id)).returning();\n    return updated;\n  }\n\n  async recallReport(id: number, officerId: number): Promise<Report> {\n    // First check if the report can be recalled (must be submitted and not reviewed)\n    const [existingReport] = await db.select().from(reports).where(eq(reports.id, id));\n    \n    if (!existingReport) {\n      throw new Error(\"Report not found\");\n    }\n    \n    if (existingReport.submittedBy !== officerId) {\n      throw new Error(\"You can only recall your own reports\");\n    }\n    \n    if (existingReport.status !== \"submitted\") {\n      throw new Error(\"Can only recall submitted reports that haven't been reviewed\");\n    }\n    \n    // Update status back to draft (keep submission timestamp for audit trail)\n    const [updated] = await db.update(reports).set({\n      status: \"draft\"\n    }).where(eq(reports.id, id)).returning();\n    \n    return updated;\n  }\n\n  // Message operations\n  async sendMessage(message: InsertMessage): Promise<Message> {\n    const [created] = await db.insert(messages).values(message).returning();\n    return created;\n  }\n\n  async getMessagesBetweenUsers(senderId: number, recipientId: number, organizationId: number): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(\n        and(\n          eq(messages.organizationId, organizationId),\n          or(\n            and(\n              eq(messages.senderId, senderId),\n              eq(messages.recipientId, recipientId)\n            ),\n            and(\n              eq(messages.senderId, recipientId),\n              eq(messages.recipientId, senderId)\n            )\n          )\n        )\n      )\n      .orderBy(desc(messages.createdAt));\n  }\n\n  async getAllMessagesForOrganization(organizationId: number): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.organizationId, organizationId))\n      .orderBy(desc(messages.createdAt));\n  }\n\n  async getUnreadMessagesForUser(userId: number, organizationId: number): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(\n        and(\n          eq(messages.recipientId, userId),\n          eq(messages.organizationId, organizationId),\n          eq(messages.isRead, false)\n        )\n      )\n      .orderBy(desc(messages.createdAt));\n  }\n\n  async markMessageAsRead(messageId: number): Promise<void> {\n    await db\n      .update(messages)\n      .set({ isRead: true })\n      .where(eq(messages.id, messageId));\n  }\n\n  async markAllMessagesAsReadForUser(userId: number, organizationId: number): Promise<void> {\n    await db\n      .update(messages)\n      .set({ isRead: true })\n      .where(\n        and(\n          eq(messages.recipientId, userId),\n          eq(messages.organizationId, organizationId),\n          eq(messages.isRead, false)\n        )\n      );\n  }\n\n  // Bulk operations\n  async bulkDeleteProjects(projectIds: number[], organizationId: number): Promise<void> {\n    // First delete all reports associated with these projects\n    await db\n      .delete(reports)\n      .where(inArray(reports.projectId, projectIds));\n    \n    // Then delete the projects\n    await db\n      .delete(projects)\n      .where(\n        and(\n          inArray(projects.id, projectIds),\n          eq(projects.organizationId, organizationId)\n        )\n      );\n  }\n\n  async bulkUpdateProjectStatus(projectIds: number[], status: string, organizationId: number): Promise<void> {\n    await db\n      .update(projects)\n      .set({ status })\n      .where(\n        and(\n          inArray(projects.id, projectIds),\n          eq(projects.organizationId, organizationId)\n        )\n      );\n  }\n\n  async getProjectsForExport(projectIds: number[], organizationId: number): Promise<any[]> {\n    if (projectIds.length > 0) {\n      return await db\n        .select()\n        .from(projects)\n        .where(\n          and(\n            eq(projects.organizationId, organizationId),\n            inArray(projects.id, projectIds)\n          )\n        );\n    } else {\n      return await db\n        .select()\n        .from(projects)\n        .where(eq(projects.organizationId, organizationId));\n    }\n  }\n\n  async bulkUpdateReportStatus(reportIds: number[], status: string, reviewedBy: number, organizationId: number): Promise<void> {\n    const validReports = await db\n      .select({ id: reports.id })\n      .from(reports)\n      .innerJoin(projects, eq(reports.projectId, projects.id))\n      .where(\n        and(\n          inArray(reports.id, reportIds),\n          eq(projects.organizationId, organizationId)\n        )\n      );\n\n    const validReportIds = validReports.map(r => r.id);\n\n    if (validReportIds.length > 0) {\n      await db\n        .update(reports)\n        .set({\n          status,\n          reviewedBy,\n          reviewedAt: new Date(),\n        })\n        .where(inArray(reports.id, validReportIds));\n    }\n  }\n\n  async getReportsForExport(reportIds: number[], organizationId: number): Promise<any[]> {\n    if (reportIds.length > 0) {\n      return await db\n        .select({\n          id: reports.id,\n          title: reports.title,\n          description: reports.content,\n          status: reports.status,\n          createdAt: reports.submittedAt,\n          reviewNotes: reports.reviewNotes,\n          projectName: projects.name,\n          submittedByName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n        })\n        .from(reports)\n        .innerJoin(projects, eq(reports.projectId, projects.id))\n        .innerJoin(users, eq(reports.submittedBy, users.id))\n        .where(\n          and(\n            eq(projects.organizationId, organizationId),\n            inArray(reports.id, reportIds)\n          )\n        );\n    } else {\n      return await db\n        .select({\n          id: reports.id,\n          title: reports.title,\n          description: reports.content,\n          status: reports.status,\n          createdAt: reports.submittedAt,\n          reviewNotes: reports.reviewNotes,\n          projectName: projects.name,\n          submittedByName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n        })\n        .from(reports)\n        .innerJoin(projects, eq(reports.projectId, projects.id))\n        .innerJoin(users, eq(reports.submittedBy, users.id))\n        .where(eq(projects.organizationId, organizationId));\n    }\n  }\n\n  // Meeting booking operations\n  async createMeetingBooking(booking: InsertMeetingBooking): Promise<MeetingBooking> {\n    const [createdBooking] = await db\n      .insert(meetingBookings)\n      .values(booking)\n      .returning();\n    return createdBooking;\n  }\n\n  async getMeetingBookings(status?: string): Promise<MeetingBooking[]> {\n    const query = db.select().from(meetingBookings);\n    \n    if (status) {\n      return await query.where(eq(meetingBookings.status, status)).orderBy(desc(meetingBookings.createdAt));\n    }\n    \n    return await query.orderBy(desc(meetingBookings.createdAt));\n  }\n\n  async getMeetingBookingById(id: number): Promise<MeetingBooking | undefined> {\n    const [booking] = await db\n      .select()\n      .from(meetingBookings)\n      .where(eq(meetingBookings.id, id));\n    return booking;\n  }\n\n  async updateMeetingBookingStatus(id: number, status: string): Promise<MeetingBooking> {\n    const [updatedBooking] = await db\n      .update(meetingBookings)\n      .set({ \n        status, \n        updatedAt: new Date() \n      })\n      .where(eq(meetingBookings.id, id))\n      .returning();\n    return updatedBooking;\n  }\n\n  async getMeetingBookingByRequestId(requestId: string): Promise<MeetingBooking | undefined> {\n    const [booking] = await db\n      .select()\n      .from(meetingBookings)\n      .where(eq(meetingBookings.requestId, requestId));\n    return booking;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":18244},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, varchar, serial, integer, boolean, timestamp, decimal, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Organizations table\nexport const organizations = pgTable(\"organizations\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  code: text(\"code\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: text(\"role\").notNull(), // 'admin' or 'officer'\n  organizationId: integer(\"organization_id\").references(() => organizations.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Projects table\nexport const projects = pgTable(\"projects\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  budget: decimal(\"budget\", { precision: 10, scale: 2 }),\n  budgetUsed: decimal(\"budget_used\", { precision: 10, scale: 2 }).default(\"0\"), // Amount spent so far\n  deadline: timestamp(\"deadline\"),\n  daysLeft: integer(\"days_left\"),\n  isOverdue: boolean(\"is_overdue\").default(false),\n  overdueNotificationSent: boolean(\"overdue_notification_sent\").default(false),\n  goals: text(\"goals\"),\n  status: text(\"status\").notNull().default(\"active\"), // 'active', 'on-hold', 'completed', 'cancelled', 'overdue'\n  progress: integer(\"progress\").default(0), // Progress percentage 0-100\n  organizationId: integer(\"organization_id\").references(() => organizations.id).notNull(),\n  createdBy: integer(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Reports table\nexport const reports = pgTable(\"reports\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  files: jsonb(\"files\"), // Array of file metadata objects\n  status: text(\"status\").notNull().default(\"draft\"), // 'draft', 'submitted', 'approved', 'rejected'\n  projectId: integer(\"project_id\").references(() => projects.id).notNull(),\n  submittedBy: integer(\"submitted_by\").references(() => users.id).notNull(),\n  reviewedBy: integer(\"reviewed_by\").references(() => users.id),\n  reviewNotes: text(\"review_notes\"),\n  submittedAt: timestamp(\"submitted_at\").defaultNow().notNull(),\n  reviewedAt: timestamp(\"reviewed_at\"),\n});\n\n// Messages table for admin-to-team communication\nexport const messages = pgTable(\"messages\", {\n  id: serial(\"id\").primaryKey(),\n  content: text(\"content\").notNull(),\n  senderId: integer(\"sender_id\").references(() => users.id).notNull(),\n  recipientId: integer(\"recipient_id\").references(() => users.id).notNull(),\n  organizationId: integer(\"organization_id\").references(() => organizations.id).notNull(),\n  urgency: varchar(\"urgency\", { length: 20 }).default(\"normal\").notNull(), // low, normal, high, urgent\n  isRead: boolean(\"is_read\").default(false).notNull(),\n  fileUrl: text(\"file_url\"), // URL to uploaded file\n  fileName: text(\"file_name\"), // Original filename\n  fileSize: integer(\"file_size\"), // File size in bytes\n  fileType: text(\"file_type\"), // MIME type\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Meeting bookings table for sales inquiries\nexport const meetingBookings = pgTable(\"meeting_bookings\", {\n  id: serial(\"id\").primaryKey(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\").notNull(),\n  phone: text(\"phone\"),\n  organizationType: text(\"organization_type\"),\n  teamSize: text(\"team_size\"),\n  meetingPurpose: text(\"meeting_purpose\"),\n  preferredTime: text(\"preferred_time\"),\n  message: text(\"message\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, contacted, scheduled, completed, cancelled\n  requestId: text(\"request_id\").unique().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const organizationsRelations = relations(organizations, ({ many }) => ({\n  users: many(users),\n  projects: many(projects),\n}));\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [users.organizationId],\n    references: [organizations.id],\n  }),\n  createdProjects: many(projects),\n  submittedReports: many(reports, { relationName: \"submittedReports\" }),\n  reviewedReports: many(reports, { relationName: \"reviewedReports\" }),\n  sentMessages: many(messages, { relationName: \"sentMessages\" }),\n  receivedMessages: many(messages, { relationName: \"receivedMessages\" }),\n}));\n\nexport const projectsRelations = relations(projects, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [projects.organizationId],\n    references: [organizations.id],\n  }),\n  creator: one(users, {\n    fields: [projects.createdBy],\n    references: [users.id],\n  }),\n  reports: many(reports),\n}));\n\nexport const reportsRelations = relations(reports, ({ one }) => ({\n  project: one(projects, {\n    fields: [reports.projectId],\n    references: [projects.id],\n  }),\n  submitter: one(users, {\n    fields: [reports.submittedBy],\n    references: [users.id],\n    relationName: \"submittedReports\",\n  }),\n  reviewer: one(users, {\n    fields: [reports.reviewedBy],\n    references: [users.id],\n    relationName: \"reviewedReports\",\n  }),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n    relationName: \"sentMessages\",\n  }),\n  recipient: one(users, {\n    fields: [messages.recipientId],\n    references: [users.id],\n    relationName: \"receivedMessages\",\n  }),\n  organization: one(organizations, {\n    fields: [messages.organizationId],\n    references: [organizations.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertOrganizationSchema = createInsertSchema(organizations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).omit({\n  id: true,\n  submittedAt: true,\n  reviewedAt: true,\n});\n\n// Types\nexport type Organization = typeof organizations.$inferSelect;\nexport type InsertOrganization = z.infer<typeof insertOrganizationSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\n\nexport type Report = typeof reports.$inferSelect;\nexport type InsertReport = z.infer<typeof insertReportSchema>;\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  isRead: true,\n  createdAt: true,\n});\n\nexport const insertMeetingBookingSchema = createInsertSchema(meetingBookings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n\nexport type MeetingBooking = typeof meetingBookings.$inferSelect;\nexport type InsertMeetingBooking = z.infer<typeof insertMeetingBookingSchema>;\n","size_bytes":7584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Landing from \"@/pages/landing-new\";\nimport Dashboard from \"@/pages/dashboard\";\nimport OwnerBookings from \"@/pages/owner-bookings\";\nimport NotFound from \"@/pages/not-found\";\nimport PrivacyPolicy from \"@/pages/privacy-policy\";\nimport TermsOfService from \"@/pages/terms-of-service\";\nimport { useEffect } from \"react\";\nimport { initializeLanguage } from \"@/lib/i18n\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    initializeLanguage();\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/owner-bookings\" component={OwnerBookings} />\n          <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n          <Route path=\"/terms-of-service\" component={TermsOfService} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1794},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Fix tooltip visibility */\n[data-radix-tooltip-content] {\n  background-color: #1f2937 !important;\n  color: white !important;\n  border: 1px solid #374151 !important;\n  z-index: 9999 !important;\n}\n\n/* Chart tooltip fixes */\n.recharts-default-tooltip {\n  background-color: #1f2937 !important;\n  border: 1px solid #374151 !important;\n  border-radius: 6px !important;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1) !important;\n}\n\n.recharts-tooltip-label,\n.recharts-tooltip-item {\n  color: white !important;\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n    transform: translateX(10px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes scaleIn {\n  0% {\n    transform: scale(0.8);\n    opacity: 0;\n  }\n  50% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n@keyframes successPulse {\n  0%, 100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n  50% {\n    transform: scale(1.2);\n    opacity: 0.8;\n  }\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200px 0;\n  }\n  100% {\n    background-position: calc(200px + 100%) 0;\n  }\n}\n\n@keyframes notificationPulse {\n  0%, 100% {\n    transform: scale(1);\n    box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7);\n  }\n  50% {\n    transform: scale(1.1);\n    box-shadow: 0 0 0 4px rgba(239, 68, 68, 0);\n  }\n}\n\n@keyframes notificationBounce {\n  0%, 20%, 53%, 80%, 100% {\n    transform: scale(1) translateY(0);\n  }\n  40%, 43% {\n    transform: scale(1.1) translateY(-2px);\n  }\n  70% {\n    transform: scale(1.05) translateY(-1px);\n  }\n}\n\n@keyframes notificationGlow {\n  0%, 100% {\n    box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.4);\n  }\n  50% {\n    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);\n  }\n}\n\n@keyframes slideInRight {\n  0% {\n    transform: translateX(20px);\n    opacity: 0;\n  }\n  100% {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n.animate-float {\n  animation: float 3s ease-in-out infinite;\n}\n\n.animate-fadeIn {\n  animation: fadeIn 0.5s ease-out forwards;\n}\n\n.animate-scaleIn {\n  animation: scaleIn 0.3s ease-out forwards;\n}\n\n.animate-successPulse {\n  animation: successPulse 1s ease-in-out;\n}\n\n.animate-shimmer {\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 200px 100%;\n  animation: shimmer 1.5s infinite;\n}\n\n.animate-notificationPulse {\n  animation: notificationPulse 2s infinite;\n}\n\n.animate-notificationBounce {\n  animation: notificationBounce 1s ease-in-out;\n}\n\n.animate-notificationGlow {\n  animation: notificationGlow 2s infinite;\n}\n\n.animate-slideInRight {\n  animation: slideInRight 0.3s ease-out;\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* ADEL specific colors matching design */\n  --adel-primary: hsl(207, 90%, 54%);\n  --adel-primary-hover: hsl(207, 90%, 44%);\n  --adel-secondary: hsl(122, 39%, 49%);\n  --adel-secondary-hover: hsl(122, 39%, 39%);\n  --adel-accent: hsl(36, 100%, 50%);\n  --adel-accent-hover: hsl(36, 100%, 40%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* ADEL specific utility classes */\n  .adel-primary {\n    background-color: var(--adel-primary);\n  }\n  \n  .adel-primary:hover {\n    background-color: var(--adel-primary-hover);\n  }\n  \n  .adel-secondary {\n    background-color: var(--adel-secondary);\n  }\n  \n  .adel-secondary:hover {\n    background-color: var(--adel-secondary-hover);\n  }\n  \n  .adel-accent {\n    background-color: var(--adel-accent);\n  }\n  \n  .adel-accent:hover {\n    background-color: var(--adel-accent-hover);\n  }\n\n  .material-shadow {\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1), 0 8px 16px rgba(0,0,0,0.1);\n  }\n\n  .material-shadow-lg {\n    box-shadow: 0 4px 8px rgba(0,0,0,0.12), 0 12px 24px rgba(0,0,0,0.15);\n  }\n\n  @keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n\n  @keyframes slideUp {\n    from { transform: translateY(20px); opacity: 0; }\n    to { transform: translateY(0); opacity: 1; }\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.3s ease-in-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.4s ease-out;\n  }\n}\n","size_bytes":5664},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/adel-logo.tsx":{"content":"import logoImage from \"@assets/logoO_1750628737384.png\";\n\ninterface AdelLogoProps {\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n  className?: string;\n}\n\nexport default function AdelLogo({ size = \"md\", className = \"\" }: AdelLogoProps) {\n  const sizeClasses = {\n    sm: \"w-8 h-8\",\n    md: \"w-12 h-12\", \n    lg: \"w-16 h-16\",\n    xl: \"w-24 h-24\"\n  };\n\n  return (\n    <img \n      src={logoImage} \n      alt=\"ADEL Logo\"\n      className={`${sizeClasses[size]} object-contain ${className}`}\n    />\n  );\n}","size_bytes":488},"client/src/components/admin-chat-interface.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Send, MessageCircle, User, ArrowLeft, Paperclip, Download, FileText, AlertCircle, AlertTriangle, Zap, File, X, Search, CheckCircle, Upload } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Message {\n  id: number;\n  content: string;\n  senderId: number;\n  recipientId: number;\n  organizationId: number;\n  urgency: string;\n  isRead: boolean;\n  createdAt: string;\n  fileUrl?: string;\n  fileName?: string;\n  fileSize?: number;\n  fileType?: string;\n}\n\ninterface Member {\n  id: number;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n}\n\nexport default function AdminChatInterface() {\n  const [selectedMemberId, setSelectedMemberId] = useState<number | null>(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [selectedUrgency, setSelectedUrgency] = useState<string>(\"normal\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showMembersList, setShowMembersList] = useState(true);\n  const [uploadSuccess, setUploadSuccess] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n  const [hiddenBadges, setHiddenBadges] = useState<Set<number>>(() => {\n    const stored = localStorage.getItem('admin-chat-hidden-badges');\n    return stored ? new Set(JSON.parse(stored)) : new Set();\n  });\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  // Function to hide badge permanently for an officer\n  const hideBadgeForOfficer = (officerId: number) => {\n    const newHiddenBadges = new Set(hiddenBadges);\n    newHiddenBadges.add(officerId);\n    setHiddenBadges(newHiddenBadges);\n    localStorage.setItem('admin-chat-hidden-badges', JSON.stringify(Array.from(newHiddenBadges)));\n  };\n\n  const { data: messages = [], isLoading: messagesLoading } = useQuery<Message[]>({\n    queryKey: [\"/api/messages\"],\n    refetchInterval: 3000,\n  });\n\n  const { data: organizationMembers = [] } = useQuery<Member[]>({\n    queryKey: [\"/api/organization/members\"],\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: { content: string; recipientId: number; urgency?: string }) => {\n      console.log(\"Admin sending message data:\", messageData);\n      const response = await apiRequest(\"POST\", \"/api/messages\", messageData);\n      const result = await response.json();\n      console.log(\"Admin message response:\", result);\n      return result;\n    },\n    onSuccess: () => {\n      setNewMessage(\"\");\n      setSelectedUrgency(\"normal\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n      scrollToBottom();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, selectedMemberId]);\n\n  // Mark messages as read when conversation is opened\n  useEffect(() => {\n    if (selectedMemberId && user?.id) {\n      const unreadMessages = messages.filter(msg => \n        msg.senderId === selectedMemberId && \n        msg.recipientId === user.id && \n        !msg.isRead\n      );\n\n      // Mark each unread message as read\n      unreadMessages.forEach(async (msg) => {\n        try {\n          await apiRequest(`/api/messages/${msg.id}/read`, \"PATCH\", {});\n        } catch (error) {\n          console.error(\"Failed to mark message as read:\", error);\n        }\n      });\n\n      if (unreadMessages.length > 0) {\n        // Invalidate queries to refresh unread counts\n        queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/messages/unread\"] });\n        \n        // Remove badge for this conversation\n        setHiddenBadges(prev => {\n          const newSet = new Set(prev);\n          newSet.add(selectedMemberId);\n          localStorage.setItem('admin-chat-hidden-badges', JSON.stringify(Array.from(newSet)));\n          return newSet;\n        });\n      }\n    }\n  }, [selectedMemberId, messages, user?.id]);\n\n  // Get officers only\n  const officers = organizationMembers.filter(member => member.role === \"officer\");\n  const selectedRecipient = officers.find(o => o.id === selectedMemberId);\n  const isSendingMessage = sendMessageMutation.isPending;\n\n  // Get messages for selected conversation\n  const selectedMessages = selectedMemberId \n    ? messages.filter(msg => \n        (msg.senderId === user?.id && msg.recipientId === selectedMemberId) ||\n        (msg.senderId === selectedMemberId && msg.recipientId === user?.id)\n      ).sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())\n    : [];\n\n  // Get unread count for each officer\n  const getUnreadCount = (officerId: number) => {\n    return messages.filter(msg => \n      msg.senderId === officerId && \n      msg.recipientId === user?.id && \n      !msg.isRead\n    ).length;\n  };\n\n  // Get last message for each officer\n  const getLastMessage = (officerId: number) => {\n    const conversation = messages.filter(msg => \n      (msg.senderId === user?.id && msg.recipientId === officerId) ||\n      (msg.senderId === officerId && msg.recipientId === user?.id)\n    );\n    return conversation.length > 0 \n      ? conversation.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())[0]\n      : null;\n  };\n\n  const getMemberName = (member: Member) => {\n    return member ? `${member.firstName || ''} ${member.lastName || ''}`.trim() || member.email : '';\n  };\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedMemberId || (!newMessage.trim() && !selectedFile)) return;\n\n    try {\n      if (selectedFile) {\n        // Start upload animation\n        setIsUploading(true);\n        setUploadProgress(0);\n        setUploadSuccess(false);\n\n        // Simulate progress animation\n        const progressInterval = setInterval(() => {\n          setUploadProgress(prev => {\n            if (prev >= 90) {\n              clearInterval(progressInterval);\n              return 90;\n            }\n            return prev + 10;\n          });\n        }, 100);\n\n        // Handle file upload\n        const formData = new FormData();\n        formData.append('recipientId', selectedMemberId.toString());\n        formData.append('urgency', selectedUrgency);\n        formData.append('file', selectedFile);\n        \n        // Add text content if provided, otherwise use file name\n        const messageContent = newMessage.trim() || `Shared document: ${selectedFile.name}`;\n        formData.append('content', messageContent);\n\n        const response = await fetch('/api/messages/upload', {\n          method: 'POST',\n          body: formData,\n          credentials: 'include'\n        });\n\n        clearInterval(progressInterval);\n\n        if (!response.ok) {\n          throw new Error(`Upload failed: ${response.statusText}`);\n        }\n\n        // Complete progress and show success animation\n        setUploadProgress(100);\n        setTimeout(() => {\n          setUploadSuccess(true);\n          \n          // Success animation with checkmark\n          setTimeout(() => {\n            setIsUploading(false);\n            setUploadSuccess(false);\n            setUploadProgress(0);\n            setNewMessage(\"\");\n            setSelectedFile(null);\n            setSelectedUrgency(\"normal\");\n            if (fileInputRef.current) fileInputRef.current.value = '';\n            \n            queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n            queryClient.invalidateQueries({ queryKey: [\"/api/messages/unread\"] });\n          }, 1000);\n        }, 200);\n\n        toast({\n          title: \"File shared successfully\",\n          description: `${selectedFile.name} has been sent`,\n        });\n      } else {\n        // Handle text message\n        sendMessageMutation.mutate({\n          content: newMessage,\n          recipientId: selectedMemberId,\n          urgency: selectedUrgency,\n        });\n      }\n    } catch (error: any) {\n      console.error(\"Message send error:\", error);\n      setIsUploading(false);\n      setUploadSuccess(false);\n      setUploadProgress(0);\n      \n      toast({\n        title: \"Failed to send message\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const clearSelectedFile = () => {\n    setSelectedFile(null);\n    setNewMessage(\"\");\n    if (fileInputRef.current) fileInputRef.current.value = '';\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      // Check file size (limit to 10MB)\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Please select a file smaller than 10MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setSelectedFile(file);\n      // Don't automatically set message content, let user add their own message\n      if (!newMessage.trim()) {\n        setNewMessage(\"\");\n      }\n    }\n  };\n\n  const getUrgencyConfig = (urgency: string) => {\n    switch (urgency) {\n      case \"low\":\n        return {\n          color: \"text-green-600\",\n          bgColor: \"bg-green-50\",\n          borderColor: \"border-green-200\",\n          icon: MessageCircle,\n          label: \"Low Priority\"\n        };\n      case \"high\":\n        return {\n          color: \"text-orange-600\",\n          bgColor: \"bg-orange-50\",\n          borderColor: \"border-orange-200\",\n          icon: AlertCircle,\n          label: \"High Priority\"\n        };\n      case \"urgent\":\n        return {\n          color: \"text-red-600\",\n          bgColor: \"bg-red-50\",\n          borderColor: \"border-red-200\",\n          icon: AlertTriangle,\n          label: \"Urgent\"\n        };\n      default:\n        return {\n          color: \"text-blue-600\",\n          bgColor: \"bg-blue-50\",\n          borderColor: \"border-blue-200\",\n          icon: MessageCircle,\n          label: \"Normal\"\n        };\n    }\n  };\n\n\n\n  if (messagesLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">Loading conversations...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"h-[calc(100vh-200px)] bg-gradient-to-br from-slate-50 to-blue-50 rounded-lg overflow-hidden\">\n      <div className=\"flex h-full\">\n        {/* Sidebar - Team Members */}\n        <div className=\"w-80 bg-white border-r border-gray-200 flex flex-col\">\n          {/* Header */}\n          <div className=\"p-4 border-b bg-gradient-to-r from-blue-600 to-blue-700 text-white\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <MessageCircle className=\"h-5 w-5\" />\n                <h2 className=\"font-semibold\">Team Chat</h2>\n              </div>\n              <Badge variant=\"secondary\" className=\"bg-blue-500 text-white\">\n                {officers.length} members\n              </Badge>\n            </div>\n          </div>\n\n          {/* Search */}\n          <div className=\"p-3 border-b bg-gray-50\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search team members...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 h-9 bg-white border-gray-300\"\n              />\n            </div>\n          </div>\n\n          {/* Members List */}\n          <div className=\"flex-1 overflow-y-auto\">\n            {officers.length === 0 ? (\n              <div className=\"p-6 text-center\">\n                <User className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n                <p className=\"text-gray-500 text-sm\">No team members yet</p>\n              </div>\n            ) : (\n              <div className=\"p-2 space-y-1\">\n                {officers\n                  .filter(officer => {\n                    if (!searchTerm) return true;\n                    const memberName = getMemberName(officer).toLowerCase();\n                    const email = officer.email.toLowerCase();\n                    const search = searchTerm.toLowerCase();\n                    return memberName.includes(search) || email.includes(search);\n                  })\n                  .map(officer => {\n                    const unreadCount = getUnreadCount(officer.id);\n                    const isSelected = selectedMemberId === officer.id;\n                    \n                    return (\n                      <button\n                        key={officer.id}\n                        onClick={() => {\n                          setSelectedMemberId(officer.id);\n                          hideBadgeForOfficer(officer.id);\n                        }}\n                        className={`w-full p-3 text-left hover:bg-blue-50 transition-all duration-200 rounded-lg ${\n                          isSelected ? \"bg-blue-100 border-l-4 border-l-blue-500\" : \"\"\n                        }`}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-10 h-10 rounded-full flex items-center justify-center text-white font-medium ${\n                            isSelected ? \"bg-blue-500\" : \"bg-gray-400\"\n                          }`}>\n                            {getMemberName(officer).charAt(0).toUpperCase()}\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"font-medium text-sm text-gray-900 truncate\">\n                                {getMemberName(officer)}\n                              </span>\n                              {unreadCount > 0 && selectedMemberId !== officer.id && !hiddenBadges.has(officer.id) && (\n                                <Badge \n                                  variant=\"destructive\" \n                                  className=\"text-xs min-w-[20px] h-5 cursor-pointer hover:bg-red-600\" \n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    hideBadgeForOfficer(officer.id);\n                                  }}\n                                >\n                                  {unreadCount}\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">Officer</div>\n                          </div>\n                        </div>\n                      </button>\n                    );\n                  })}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Main Chat Area */}\n        <div className=\"flex-1 bg-white flex flex-col\">\n          {selectedMemberId ? (\n            <>\n              {/* Chat Header */}\n              <div className=\"p-4 border-b bg-gradient-to-r from-blue-600 to-blue-700 text-white\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-sm font-medium\">\n                    {getMemberName(officers.find(o => o.id === selectedMemberId)!).charAt(0).toUpperCase()}\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold\">{getMemberName(officers.find(o => o.id === selectedMemberId)!)}</h3>\n                    <p className=\"text-blue-100 text-sm\">Officer</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Messages Area */}\n              <div className=\"flex-1 overflow-y-auto p-4 bg-gray-50\">\n                <div className=\"space-y-4\">\n                  {selectedMessages.length === 0 ? (\n                    <div className=\"text-center py-12\">\n                      <MessageCircle className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                      <p className=\"text-gray-500 text-lg\">No messages yet</p>\n                      <p className=\"text-gray-400 text-sm\">Start a conversation</p>\n                    </div>\n                  ) : (\n                    selectedMessages.map(message => {\n                      const isCurrentUser = message.senderId === user?.id;\n                      const urgencyConfig = getUrgencyConfig(message.urgency || \"normal\");\n                      const UrgencyIcon = urgencyConfig.icon;\n                      const isFileMessage = message.content.includes('📎') || message.content.includes('Shared document:');\n                      \n                      return (\n                        <div\n                          key={message.id}\n                          className={`flex ${isCurrentUser ? 'justify-end' : 'justify-start'}`}\n                        >\n                          <div\n                            className={`max-w-xs lg:max-w-md rounded-2xl shadow-sm ${\n                              isCurrentUser\n                                ? 'bg-blue-500 text-white'\n                                : 'bg-white text-gray-800 border'\n                            }`}\n                          >\n                            {message.urgency !== 'normal' && (\n                              <div className={`flex items-center gap-1 mb-2 px-4 pt-3 text-xs ${\n                                isCurrentUser ? 'text-blue-100' : urgencyConfig.color\n                              }`}>\n                                <UrgencyIcon className=\"w-3 h-3\" />\n                                <span>{urgencyConfig.label}</span>\n                              </div>\n                            )}\n                            \n                            {isFileMessage ? (\n                              <div className=\"p-4\">\n                                <div className=\"flex items-center gap-3\">\n                                  <div className={`p-2 rounded-full ${\n                                    isCurrentUser ? 'bg-blue-400' : 'bg-blue-100'\n                                  }`}>\n                                    <FileText className={`w-4 h-4 ${\n                                      isCurrentUser ? 'text-white' : 'text-blue-600'\n                                    }`} />\n                                  </div>\n                                  <div className=\"flex-1\">\n                                    <div className=\"text-sm font-medium\">\n                                      {message.fileName || message.content.replace(/^(📎|Shared document:)\\s*/, '')}\n                                    </div>\n                                    <div className={`text-xs ${\n                                      isCurrentUser ? 'text-blue-100' : 'text-gray-500'\n                                    }`}>\n                                      {message.fileSize ? \n                                        `${(message.fileSize / 1024 / 1024).toFixed(2)} MB` : \n                                        'Document attachment'\n                                      }\n                                    </div>\n                                  </div>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => {\n                                      // Use the fileUrl from the message if available, otherwise construct it\n                                      let downloadUrl;\n                                      if (message.fileUrl) {\n                                        downloadUrl = message.fileUrl;\n                                      } else {\n                                        // Extract filename from message content and construct URL\n                                        const filename = message.content.replace(/^(📎|Shared document:)\\s*/, '');\n                                        downloadUrl = `/api/files/${encodeURIComponent(filename)}`;\n                                      }\n                                      window.open(downloadUrl, '_blank');\n                                    }}\n                                    className={`p-2 ${\n                                      isCurrentUser \n                                        ? 'text-white hover:bg-blue-400' \n                                        : 'text-blue-600 hover:bg-blue-50'\n                                    }`}\n                                  >\n                                    <Download className=\"w-4 h-4\" />\n                                  </Button>\n                                </div>\n                              </div>\n                            ) : (\n                              <div className=\"px-4 py-3\">\n                                <p className=\"text-sm break-words\">{message.content}</p>\n                              </div>\n                            )}\n                            \n                            <div className={`px-4 pb-3 text-xs ${\n                              isCurrentUser ? 'text-blue-100' : 'text-gray-500'\n                            }`}>\n                              {new Date(message.createdAt).toLocaleTimeString([], {\n                                hour: '2-digit',\n                                minute: '2-digit'\n                              })}\n                              {isCurrentUser && (\n                                <span className=\"ml-2\">Sent</span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })\n                  )}\n                </div>\n                <div ref={messagesEndRef} />\n              </div>\n\n              {/* Message Input */}\n              <div className=\"p-4 border-t bg-white\">\n                <form onSubmit={handleSendMessage} className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <label className=\"text-sm font-medium text-gray-700\">Priority:</label>\n                    <Select value={selectedUrgency} onValueChange={setSelectedUrgency}>\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"normal\">Normal</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"flex gap-2 items-end\">\n                    <div className=\"flex-1\">\n                      <Input\n                        value={newMessage}\n                        onChange={(e) => setNewMessage(e.target.value)}\n                        placeholder=\"Type your message...\"\n                      />\n                    </div>\n                    \n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => fileInputRef.current?.click()}\n                      className=\"shrink-0 px-3\"\n                    >\n                      <Paperclip className=\"h-4 w-4\" />\n                    </Button>\n                    \n                    <Button \n                      type=\"submit\" \n                      size=\"sm\" \n                      disabled={(!newMessage.trim() && !selectedFile) || isUploading}\n                      className={`transition-all duration-200 ${\n                        isUploading \n                          ? 'bg-blue-400 cursor-not-allowed' \n                          : 'bg-blue-600 hover:bg-blue-700'\n                      }`}\n                    >\n                      {isUploading ? (\n                        <Upload className=\"h-4 w-4 animate-spin\" />\n                      ) : (\n                        <Send className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </div>\n\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    onChange={handleFileSelect}\n                    className=\"hidden\"\n                  />\n\n                  {selectedFile && (\n                    <div className=\"bg-blue-50 p-3 rounded-lg border border-blue-200 transition-all duration-300\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`relative transition-all duration-300 ${\n                            uploadSuccess ? 'animate-scaleIn' : ''\n                          }`}>\n                            {uploadSuccess ? (\n                              <CheckCircle className=\"h-4 w-4 text-green-600 animate-successPulse\" />\n                            ) : isUploading ? (\n                              <Upload className=\"h-4 w-4 text-blue-600 animate-spin\" />\n                            ) : (\n                              <FileText className=\"h-4 w-4 text-blue-600\" />\n                            )}\n                          </div>\n                          <span className=\"text-sm text-gray-700\">{selectedFile.name}</span>\n                          {uploadSuccess && (\n                            <span className=\"text-xs text-green-600 font-medium animate-fadeIn\">\n                              Uploaded!\n                            </span>\n                          )}\n                        </div>\n                        {!isUploading && !uploadSuccess && (\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setSelectedFile(null)}\n                            className=\"opacity-60 hover:opacity-100 transition-opacity\"\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                      \n                      {/* Animated Progress Bar */}\n                      {(isUploading || uploadSuccess) && (\n                        <div className=\"w-full bg-gray-200 rounded-full h-1.5 overflow-hidden\">\n                          <div \n                            className={`h-full transition-all duration-300 ease-out ${\n                              uploadSuccess \n                                ? 'bg-green-500 animate-pulse' \n                                : 'bg-blue-500'\n                            }`}\n                            style={{ \n                              width: `${uploadProgress}%`,\n                              transition: 'width 0.3s ease-out'\n                            }}\n                          />\n                        </div>\n                      )}\n                      \n                      {/* Upload Status Text */}\n                      {isUploading && !uploadSuccess && (\n                        <div className=\"mt-2 text-xs text-blue-600 animate-pulse\">\n                          Uploading... {uploadProgress}%\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </form>\n              </div>\n            </>\n          ) : (\n            <div className=\"flex-1 flex items-center justify-center bg-gray-50\">\n              <div className=\"text-center py-12\">\n                <MessageCircle className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-700 mb-2\">Select a Team Member</h3>\n                <p className=\"text-gray-500\">Choose a member to start messaging</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":28890},"client/src/components/admin-dashboard-professional.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useState, useEffect } from \"react\";\nimport { \n  Users, \n  Projector, \n  Clock, \n  Calendar, \n  DollarSign,\n  Target,\n  TrendingUp,\n  FileText,\n  BarChart3,\n  Edit2,\n  Trash2,\n  MoreHorizontal,\n  CheckCircle2,\n  LogOut,\n  Plus,\n  Star,\n  ArrowUpRight,\n  Activity,\n  Mail,\n  Download\n} from \"lucide-react\";\nimport { t } from \"@/lib/i18n\";\nimport { useLogout, useAuth } from \"@/hooks/use-auth\";\nimport OrganizationInfo from \"./organization-info\";\nimport ProjectForm from \"./project-form\";\nimport ReportApproval from \"./report-approval\";\nimport ProgressChart from \"./progress-chart\";\nimport AdminChatInterface from \"./admin-chat-interface\";\nimport { BulkProjectOperations, BulkReportOperations } from \"./bulk-operations\";\nimport MeetingBookingsManager from \"./meeting-bookings-manager\";\nimport AdelLogo from \"./adel-logo\";\nimport DeadlineBadge from \"./deadline-badge\";\nimport OverdueNotifications from \"./overdue-notifications\";\nimport AnalyticsDashboard from \"./analytics-dashboard\";\nimport SmartNotifications from \"./smart-notifications\";\nimport ProjectTimeline from \"./project-timeline\";\nimport PDFReportPreview from \"./pdf-report-preview\";\n\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const logout = useLogout();\n  const { user, isLoading } = useAuth();\n  \n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [editingProject, setEditingProject] = useState<any>(null);\n  const [hideMessagesBadge, setHideMessagesBadge] = useState(() => {\n    return localStorage.getItem('admin-messages-badge-hidden') === 'true';\n  });\n  const [lastSeenMessageCount, setLastSeenMessageCount] = useState(() => {\n    return parseInt(localStorage.getItem('admin-last-seen-count') || '0');\n  });\n\n\n  const [editName, setEditName] = useState(\"\");\n  const [editProgress, setEditProgress] = useState([0]);\n  const [editBudget, setEditBudget] = useState(\"\");\n  const [editBudgetUsed, setEditBudgetUsed] = useState(\"\");\n  const [editDeadline, setEditDeadline] = useState(\"\");\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [viewingProject, setViewingProject] = useState<any>(null);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [isPDFPreviewOpen, setIsPDFPreviewOpen] = useState(false);\n  \n  const { data: projects, isLoading: projectsLoading, refetch } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: reports, isLoading: reportsLoading, refetch: refetchReports } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  const { data: pendingReports } = useQuery({\n    queryKey: [\"/api/reports/pending\"],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  // Get unread message count for notification\n  const { data: unreadMessages } = useQuery({\n    queryKey: [\"/api/messages/unread\"],\n  });\n\n  const { data: organization } = useQuery({\n    queryKey: [\"/api/organization\"],\n  });\n\n  // Debug logging for activeTab changes\n  useEffect(() => {\n    console.log(\"AdminDashboard - ActiveTab changed to:\", activeTab, \"UserRole:\", user?.role);\n  }, [activeTab, user?.role]);\n\n  // Handle Messages tab badge visibility with 2-second delay\n  useEffect(() => {\n    if (activeTab === \"messages\") {\n      const timer = setTimeout(() => {\n        setHideMessagesBadge(true);\n        localStorage.setItem('admin-messages-badge-hidden', 'true');\n        localStorage.setItem('admin-last-seen-count', String(unreadMessages?.count || 0));\n      }, 2000);\n      return () => clearTimeout(timer);\n    }\n  }, [activeTab, unreadMessages?.count]);\n\n  // Show badge only when new messages arrive (count increased from last seen)\n  useEffect(() => {\n    const currentCount = unreadMessages?.count || 0;\n    if (currentCount > lastSeenMessageCount) {\n      // New messages arrived, show badge again\n      setHideMessagesBadge(false);\n      localStorage.setItem('admin-messages-badge-hidden', 'false');\n    }\n  }, [unreadMessages?.count, lastSeenMessageCount]);\n\n  // Update project mutation\n  const updateProjectMutation = useMutation({\n    mutationFn: async ({ projectId, data }: { projectId: number; data: any }) => {\n      await apiRequest(\"PUT\", `/api/projects/${projectId}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Project updated successfully\",\n      });\n      setIsEditDialogOpen(false);\n      setEditingProject(null);\n      refetch();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete project mutation\n  const deleteProjectMutation = useMutation({\n    mutationFn: async (projectId: number) => {\n      await apiRequest(\"DELETE\", `/api/projects/${projectId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Project deleted successfully\",\n      });\n      refetch();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleViewDetails = (project: any) => {\n    setViewingProject(project);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleEditProject = (project: any) => {\n    setEditingProject(project);\n    setEditName(project.name);\n    setEditProgress([project.progress || 0]);\n    setEditBudget(project.budget?.toString() || \"\");\n    setEditBudgetUsed(project.budgetUsed?.toString() || \"0\");\n    setEditDeadline(project.deadline ? (() => {\n      const date = new Date(project.deadline);\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    })() : \"\");\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateProject = () => {\n    if (!editingProject) return;\n    \n    updateProjectMutation.mutate({\n      projectId: editingProject.id,\n      data: {\n        name: editName,\n        progress: editProgress[0],\n        description: editingProject.description,\n        deadline: editDeadline || null,\n        budget: editBudget ? parseFloat(editBudget) : null,\n        budgetUsed: editBudgetUsed ? parseFloat(editBudgetUsed) : 0,\n      },\n    });\n  };\n\n  const handleDeleteProject = (projectId: number) => {\n    if (confirm(\"Are you sure you want to delete this project?\")) {\n      deleteProjectMutation.mutate(projectId);\n    }\n  };\n\n  if (projectsLoading || reportsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-16 w-16 border-4 border-blue-500 border-t-transparent mx-auto\"></div>\n          <p className=\"text-slate-600 font-medium\">Loading your dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen w-full bg-gradient-to-br from-gray-50 via-blue-50/40 to-indigo-50/60\">\n      <div className=\"max-w-7xl mx-auto px-3 md:px-6 py-3 md:py-6 space-y-3 md:space-y-6\">\n        {/* Enhanced Header with Modern Design */}\n        <div className=\"bg-white/90 backdrop-blur-sm border border-white/50 rounded-2xl shadow-lg p-4 md:p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3 md:space-x-4\">\n              <div className=\"bg-gradient-to-br from-blue-500 to-indigo-600 p-2 md:p-3 rounded-xl shadow-lg\">\n                <AdelLogo size=\"sm\" className=\"filter brightness-0 invert\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl md:text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent\">\n                  Admin Dashboard\n                </h1>\n                <p className=\"text-sm md:text-base text-gray-600 hidden sm:block\">\n                  Manage projects and team performance\n                </p>\n              </div>\n            </div>\n            <AlertDialog>\n              <AlertDialogTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  disabled={logout.isPending}\n                  size=\"sm\"\n                  className=\"hover:bg-red-50 hover:border-red-300 hover:text-red-700 transition-colors text-xs md:text-sm\"\n                >\n                  <LogOut className=\"w-3 h-3 md:w-4 md:h-4 mr-1 md:mr-2\" />\n                  <span className=\"hidden sm:inline\">{logout.isPending ? \"Signing out...\" : \"Logout\"}</span>\n                  <span className=\"sm:hidden\">Exit</span>\n                </Button>\n              </AlertDialogTrigger>\n              <AlertDialogContent>\n                <AlertDialogHeader>\n                  <AlertDialogTitle>Confirm Logout</AlertDialogTitle>\n                  <AlertDialogDescription>\n                    Are you sure you want to sign out? You'll need to log in again to access your dashboard.\n                  </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                  <AlertDialogAction\n                    onClick={() => logout.mutate()}\n                    disabled={logout.isPending}\n                    className=\"bg-red-600 hover:bg-red-700 focus:ring-red-600\"\n                  >\n                    {logout.isPending ? \"Signing out...\" : \"Sign Out\"}\n                  </AlertDialogAction>\n                </AlertDialogFooter>\n              </AlertDialogContent>\n            </AlertDialog>\n          </div>\n        </div>\n\n        {/* Enhanced Stats Cards with Modern Design */}\n        <div className=\"grid grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-3 md:gap-6\">\n          <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100/60 border-0 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                  <Projector className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl md:text-3xl font-bold text-gray-900\">\n                    {(stats as any)?.activeProjects || 0}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Active Projects</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-emerald-50 to-emerald-100/60 border-0 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg\">\n                  <CheckCircle2 className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl md:text-3xl font-bold text-gray-900\">\n                    {(stats as any)?.completedProjects || 0}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Completed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100/60 border-0 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl flex items-center justify-center shadow-lg\">\n                  <FileText className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl md:text-3xl font-bold text-gray-900\">\n                    {(pendingReports as any)?.length || 0}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Pending Reports</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border border-gray-200\">\n            <CardContent className=\"p-3 md:p-4\">\n              <div className=\"flex items-center space-x-2 md:space-x-3\">\n                <Users className=\"w-6 h-6 md:w-8 md:h-8 text-purple-600\" />\n                <div>\n                  <p className=\"text-lg md:text-2xl font-bold text-gray-900\">\n                    {(stats as any)?.teamMembers || 0}\n                  </p>\n                  <p className=\"text-xs md:text-sm text-gray-600\">Team</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Enhanced Tabs with Modern Design */}\n        <div className=\"bg-white/90 backdrop-blur-sm border border-white/50 rounded-2xl shadow-lg\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <div className=\"border-b border-gray-200 px-2 md:px-4\">\n              <TabsList className=\"grid w-full grid-cols-3 md:grid-cols-6 bg-transparent h-10 md:h-12 gap-1 md:gap-0\">\n                <TabsTrigger \n                  value=\"overview\" \n                  className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700 text-xs md:text-sm px-1 md:px-3 h-8 md:h-10\"\n                >\n                  <span className=\"hidden sm:inline\">Overview</span>\n                  <span className=\"sm:hidden\">Home</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"projects\" \n                  className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700 relative text-xs md:text-sm px-1 md:px-3 h-8 md:h-10\"\n                >\n                  Projects\n                  {(() => {\n                    const overdueCount = (projects as any)?.filter((p: any) => \n                      p.isOverdue && \n                      p.status !== 'completed' && \n                      p.status !== 'cancelled' &&\n                      (p.progress || 0) < 100\n                    ).length || 0;\n                    return overdueCount > 0 ? (\n                      <Badge variant=\"destructive\" className=\"absolute -top-0.5 -right-0.5 h-4 w-4 p-0 text-xs flex items-center justify-center\">\n                        {overdueCount}\n                      </Badge>\n                    ) : null;\n                  })()}\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"reports\" \n                  className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700 text-xs md:text-sm px-1 md:px-3 h-8 md:h-10\"\n                >\n                  Reports\n                </TabsTrigger>\n                \n                {/* Second row for mobile */}\n                <TabsTrigger \n                  value=\"analytics\" \n                  className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700 text-xs md:text-sm px-1 md:px-3 h-8 md:h-10 md:col-span-1 col-span-1\"\n                >\n                  <span className=\"hidden sm:inline\">Analytics</span>\n                  <span className=\"sm:hidden\">Stats</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"messages\" \n                  className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700 relative text-xs md:text-sm px-1 md:px-3 h-8 md:h-10\"\n                >\n                  <span className=\"hidden sm:inline\">Messages</span>\n                  <span className=\"sm:hidden\">Chat</span>\n                  {unreadMessages && unreadMessages.count > 0 && !hideMessagesBadge && (\n                    <Badge \n                      variant=\"destructive\" \n                      className=\"absolute -top-0.5 -right-0.5 h-4 w-4 p-0 text-xs flex items-center justify-center animate-notificationPulse animate-slideInRight bg-red-500 text-white border-2 border-white shadow-lg\"\n                    >\n                      {unreadMessages.count}\n                    </Badge>\n                  )}\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"team\" \n                  className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700 text-xs md:text-sm px-1 md:px-3 h-8 md:h-10\"\n                >\n                  Team\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"overview\" className=\"p-3 md:p-6 space-y-3 md:space-y-6\">\n              <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3\">\n                <h2 className=\"text-lg md:text-xl font-semibold text-slate-800\">Dashboard Overview</h2>\n                <Button\n                  onClick={() => setIsPDFPreviewOpen(true)}\n                  size=\"sm\"\n                  className=\"bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 w-full sm:w-auto\"\n                >\n                  <FileText className=\"w-3 h-3 md:w-4 md:h-4 mr-1 md:mr-2\" />\n                  <span className=\"text-xs md:text-sm\">Analysis</span>\n                </Button>\n              </div>\n              \n              <Card className=\"bg-white border border-gray-200\">\n                <CardHeader>\n                  <CardTitle className=\"text-gray-900\">Progress Overview</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ProgressChart />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"projects\" className=\"p-3 md:p-6 space-y-3 md:space-y-6\">\n              <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3\">\n                <h2 className=\"text-lg md:text-xl font-semibold text-slate-800\">Project Management</h2>\n                <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-3 w-full sm:w-auto\">\n                  <BulkProjectOperations projects={projects || []} onRefresh={refetch} />\n                  <ProjectForm onSuccess={refetch} />\n                </div>\n              </div>\n\n              {/* Overdue Notifications */}\n              <OverdueNotifications />\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-3 md:gap-6\">\n                {(projects as any)?.map((project: any) => (\n                  <Card key={project.id} className=\"bg-white border border-slate-200 shadow-sm hover:shadow-md transition-shadow\">\n                    <CardHeader className=\"pb-2 md:pb-3 p-3 md:p-6\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <CardTitle className=\"text-base md:text-lg text-slate-800 line-clamp-2\">{project.name}</CardTitle>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\" className=\"flex-shrink-0\">\n                              <MoreHorizontal className=\"w-4 h-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent>\n                            <DropdownMenuItem onClick={() => handleViewDetails(project)}>\n                              View Details\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={() => handleEditProject(project)}>\n                              <Edit2 className=\"w-4 h-4 mr-2\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleDeleteProject(project.id)}\n                              className=\"text-red-600\"\n                            >\n                              <Trash2 className=\"w-4 h-4 mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <p className=\"text-sm text-slate-600\">{project.description}</p>\n                          <div className=\"flex items-center gap-2\">\n                            <DeadlineBadge project={project} />\n                            <Badge variant={project.status === 'active' ? 'default' : project.status === 'overdue' ? 'destructive' : 'secondary'}>\n                              {project.status}\n                            </Badge>\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <div className=\"flex justify-between text-sm mb-1\">\n                            <span className=\"text-slate-600\">Progress</span>\n                            <span className=\"font-medium text-slate-800\">{project.progress || 0}%</span>\n                          </div>\n                          <Progress value={project.progress || 0} className=\"h-2\" />\n                        </div>\n                        \n                        {project.budget && (\n                          <div>\n                            <div className=\"flex justify-between text-sm mb-1\">\n                              <span className=\"text-slate-600\">Budget Usage</span>\n                              <span className=\"font-medium text-slate-800\">\n                                ${parseFloat(project.budgetUsed || 0).toFixed(0)} / ${parseFloat(project.budget).toFixed(0)}\n                              </span>\n                            </div>\n                            <Progress \n                              value={project.budget ? (parseFloat(project.budgetUsed || 0) / parseFloat(project.budget)) * 100 : 0} \n                              className=\"h-2\"\n                            />\n                          </div>\n                        )}\n\n                        <div className=\"flex items-center text-sm text-slate-600\">\n                          <Calendar className=\"w-4 h-4 mr-1\" />\n                          {project.deadline ? new Date(project.deadline).toLocaleDateString() : 'No deadline'}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"reports\" className=\"p-6 space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-xl font-semibold text-slate-800\">Report Management</h2>\n                <BulkReportOperations reports={reports || []} onRefresh={refetchReports} />\n              </div>\n              <div className=\"flex justify-end\">\n                <Button\n                  onClick={() => setIsPDFPreviewOpen(true)}\n                  variant=\"outline\"\n                  className=\"flex items-center space-x-2\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                  <span>PDF Preview</span>\n                </Button>\n              </div>\n              {/* Reports List - Shows more reports for admin */}\n              <div className=\"overflow-y-auto\" style={{ maxHeight: '500px' }}>\n                <ReportApproval />\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"analytics\" className=\"p-6 space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <div className=\"lg:col-span-2\">\n                  <AnalyticsDashboard userRole=\"admin\" />\n                </div>\n                <div className=\"space-y-6\">\n                  <SmartNotifications userRole=\"admin\" />\n                  <ProjectTimeline />\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"messages\" className=\"p-6\">\n              <AdminChatInterface />\n            </TabsContent>\n\n            <TabsContent value=\"team\" className=\"p-6 space-y-6\">\n              <Card className=\"bg-white border border-gray-200\">\n                <CardHeader>\n                  <CardTitle className=\"text-gray-900\">Add Team Member</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Button \n                    onClick={() => {\n                      const orgData = organization as any;\n                      if (orgData?.code) {\n                        const subject = \"Invitation to Join Organization - ADEL Platform\";\n                        const body = `Hello,\n\nYou are invited to join our organization on the ADEL platform.\n\nOrganization Details:\n- Name: ${orgData.name || 'Our Organization'}\n- Join Code: ${orgData.code}\n\nTo join:\n1. Visit the ADEL platform\n2. Click \"Get Started\" \n3. Select \"Officer\" role\n4. Enter the organization code: ${orgData.code}\n\nThe ADEL platform helps NGOs manage projects, track progress, and collaborate effectively.\n\nBest regards,\n${orgData.name || 'Organization'} Team`;\n                        \n                        window.location.href = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n                      } else {\n                        toast({\n                          title: \"Error\",\n                          description: \"Organization data not loaded yet. Please try again.\",\n                          variant: \"destructive\",\n                        });\n                      }\n                    }}\n                    className=\"w-full\"\n                    disabled={!organization}\n                  >\n                    <Mail className=\"w-4 h-4 mr-2\" />\n                    Send Invitation Email\n                  </Button>\n                  <p className=\"text-sm text-gray-600 mt-2\">\n                    Opens your email client with a pre-written invitation containing the organization code\n                  </p>\n                </CardContent>\n              </Card>\n              <OrganizationInfo />\n            </TabsContent>\n\n            <TabsContent value=\"settings\" className=\"p-6\">\n              <Card className=\"bg-white border border-slate-200 shadow-sm\">\n                <CardHeader>\n                  <CardTitle className=\"text-slate-800\">Organization Settings</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-slate-600\">Organization configuration and settings will be available here.</p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Edit Project Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Project</DialogTitle>\n            <DialogDescription>Update project details and progress.</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"edit-name\">Project Name</Label>\n              <Input\n                id=\"edit-name\"\n                value={editName}\n                onChange={(e) => setEditName(e.target.value)}\n              />\n            </div>\n            <div>\n              <Label>Progress: {editProgress[0]}%</Label>\n              <Slider\n                value={editProgress}\n                onValueChange={setEditProgress}\n                max={100}\n                step={1}\n                className=\"mt-2\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-budget\">Budget</Label>\n                <Input\n                  id=\"edit-budget\"\n                  type=\"number\"\n                  value={editBudget}\n                  onChange={(e) => setEditBudget(e.target.value)}\n                  placeholder=\"0\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-budget-used\">Budget Used</Label>\n                <Input\n                  id=\"edit-budget-used\"\n                  type=\"number\"\n                  value={editBudgetUsed}\n                  onChange={(e) => setEditBudgetUsed(e.target.value)}\n                  placeholder=\"0\"\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-deadline\">New Deadline</Label>\n                <Input\n                  id=\"edit-deadline\"\n                  type=\"date\"\n                  value={editDeadline}\n                  onChange={(e) => setEditDeadline(e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-original-deadline\">Original Deadline</Label>\n                <Input\n                  id=\"edit-original-deadline\"\n                  type=\"date\"\n                  value={editingProject?.deadline ? (() => {\n                    const date = new Date(editingProject.deadline);\n                    // Ensure we get the correct local date without timezone issues\n                    const year = date.getFullYear();\n                    const month = String(date.getMonth() + 1).padStart(2, '0');\n                    const day = String(date.getDate()).padStart(2, '0');\n                    return `${year}-${month}-${day}`;\n                  })() : \"\"}\n                  readOnly\n                  className=\"bg-gray-50 text-gray-600\"\n                />\n              </div>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button onClick={handleUpdateProject} disabled={updateProjectMutation.isPending}>\n                {updateProjectMutation.isPending ? \"Updating...\" : \"Update Project\"}\n              </Button>\n              <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Project Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>{viewingProject?.name}</DialogTitle>\n            <DialogDescription>Project details and information</DialogDescription>\n          </DialogHeader>\n          {viewingProject && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Description</Label>\n                <p className=\"text-sm text-slate-600 mt-1\">\n                  {viewingProject.description || \"No description provided\"}\n                </p>\n              </div>\n              <div>\n                <Label>Progress</Label>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <Progress value={viewingProject.progress || 0} className=\"flex-1\" />\n                  <span className=\"text-sm font-medium\">{viewingProject.progress || 0}%</span>\n                </div>\n              </div>\n              {viewingProject.budget && (\n                <div>\n                  <Label>Budget</Label>\n                  <p className=\"text-sm text-slate-600 mt-1\">\n                    ${parseFloat(viewingProject.budgetUsed || 0).toFixed(2)} / ${parseFloat(viewingProject.budget).toFixed(2)} used\n                  </p>\n                </div>\n              )}\n              <div>\n                <Label>Deadline</Label>\n                <p className=\"text-sm text-slate-600 mt-1\">\n                  {viewingProject.deadline ? new Date(viewingProject.deadline).toLocaleDateString() : 'No deadline set'}\n                </p>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* PDF Report Preview Modal */}\n      <PDFReportPreview \n        isOpen={isPDFPreviewOpen} \n        onClose={() => setIsPDFPreviewOpen(false)}\n        organizationData={organization}\n        projectsData={projects as any[]}\n        reportsData={reports as any[]}\n        statsData={stats}\n      />\n    </div>\n  );\n}","size_bytes":33716},"client/src/components/admin-dashboard-redesigned.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { useState, useEffect } from \"react\";\nimport { \n  Users, \n  Projector, \n  Clock, \n  Calendar, \n  FileText,\n  BarChart3,\n  LogOut,\n  Plus,\n  CheckCircle2,\n  TrendingUp,\n  Target,\n  Brain,\n  Zap,\n  AlertTriangle,\n  MessageSquare,\n  Lightbulb\n} from \"lucide-react\";\nimport { useLogout, useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdelLogo from \"./adel-logo\";\nimport AdminChatInterface from \"./admin-chat-interface\";\n// Simple inline project modal\nimport { apiRequest } from \"@/lib/queryClient\";\nimport OnboardingWalkthrough from \"./onboarding-walkthrough\";\n\ninterface AIInsight {\n  type: 'success' | 'warning' | 'info' | 'error';\n  title: string;\n  description: string;\n  action?: string;\n  priority: 'high' | 'medium' | 'low';\n}\n\ninterface AIProjectSummary {\n  overallHealth: 'excellent' | 'good' | 'warning' | 'critical';\n  executiveSummary: string;\n  keyMetrics: {\n    onTimeDelivery: number;\n    budgetEfficiency: number;\n    teamEngagement: number;\n    riskLevel: 'low' | 'medium' | 'high';\n  };\n  insights: AIInsight[];\n  recommendations: string[];\n}\n\nexport default function AdminDashboardRedesigned() {\n  const { user } = useAuth();\n  const logout = useLogout();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [aiInsights, setAiInsights] = useState<AIProjectSummary | null>(null);\n  const [loadingAI, setLoadingAI] = useState(false);\n  const [showOnboarding, setShowOnboarding] = useState(false);\n\n  const { data: projects, isLoading: projectsLoading, refetch } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: reports, refetch: refetchReports } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  const { data: pendingReports } = useQuery({\n    queryKey: [\"/api/reports/pending\"],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: organization } = useQuery({\n    queryKey: [\"/api/organization\"],\n  });\n\n  const { data: unreadMessages } = useQuery({\n    queryKey: [\"/api/messages/unread\"],\n  });\n\n  // Check for first-time user onboarding\n  useEffect(() => {\n    const hasCompletedOnboarding = localStorage.getItem('onboarding-completed');\n    if (!hasCompletedOnboarding && user) {\n      // Show onboarding after a short delay to let the dashboard load\n      setTimeout(() => {\n        setShowOnboarding(true);\n      }, 1000);\n    }\n  }, [user]);\n\n  // Generate AI insights\n  const generateAIInsights = async () => {\n    if (!projects || !reports) return;\n    \n    setLoadingAI(true);\n    try {\n      const response = await apiRequest('POST', '/api/ai/dashboard-insights', {});\n      setAiInsights(response);\n    } catch (error) {\n      console.error('AI insights error:', error);\n      toast({\n        title: \"AI Analysis Unavailable\",\n        description: \"Using standard dashboard view\",\n        variant: \"default\",\n      });\n    } finally {\n      setLoadingAI(false);\n    }\n  };\n\n  // Calculate key metrics\n  const projectsData = projects as any[] || [];\n  const reportsData = reports as any[] || [];\n  const pendingCount = pendingReports?.length || 0;\n  const activeProjects = projectsData.filter(p => p.status === 'active').length;\n  const completedProjects = projectsData.filter(p => p.status === 'completed').length;\n  const overdueProjects = projectsData.filter(p => p.isOverdue && p.status !== 'completed').length;\n  const avgProgress = projectsData.length > 0 ? \n    Math.round(projectsData.reduce((acc, p) => acc + (p.progress || 0), 0) / projectsData.length) : 0;\n\n  const getHealthColor = (health: string) => {\n    switch (health) {\n      case 'excellent': return 'bg-green-500';\n      case 'good': return 'bg-blue-500';\n      case 'warning': return 'bg-orange-500';\n      case 'critical': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case 'low': return 'text-green-600 bg-green-50';\n      case 'medium': return 'text-orange-600 bg-orange-50';\n      case 'high': return 'text-red-600 bg-red-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      <div className=\"max-w-7xl mx-auto p-4 space-y-6\">\n        \n        {/* Compact Header */}\n        <div className=\"bg-white rounded-2xl shadow-sm border border-gray-100 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center\">\n                <AdelLogo size=\"sm\" className=\"filter brightness-0 invert\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">Admin Dashboard</h1>\n                <p className=\"text-sm text-gray-600\">{organization?.name || \"Organization\"}</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <Button\n                onClick={() => setShowOnboarding(true)}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n              >\n                <Lightbulb className=\"w-4 h-4\" />\n                Tour\n              </Button>\n              \n              <Button\n                onClick={generateAIInsights}\n                disabled={loadingAI}\n                size=\"sm\"\n                className=\"bg-gradient-to-r from-purple-500 to-indigo-600 hover:from-purple-600 hover:to-indigo-700\"\n              >\n                {loadingAI ? (\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                ) : (\n                  <Brain className=\"w-4 h-4\" />\n                )}\n                AI Insights\n              </Button>\n              \n              <AddProjectModal onSuccess={refetch} />\n              \n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Logout\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>Confirm Logout</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      Are you sure you want to sign out?\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction onClick={() => logout.mutate()}>\n                      Sign Out\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </div>\n          </div>\n        </div>\n\n        {/* AI Insights Section */}\n        {aiInsights && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Executive Summary */}\n            <Card className=\"lg:col-span-2 bg-gradient-to-br from-blue-50 to-indigo-100 border-0 shadow-lg\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <div className={`w-3 h-3 rounded-full ${getHealthColor(aiInsights.overallHealth)}`} />\n                  AI Project Intelligence\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-gray-700 leading-relaxed\">{aiInsights.executiveSummary}</p>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>On-Time Delivery</span>\n                      <span className=\"font-medium\">{aiInsights.keyMetrics.onTimeDelivery}%</span>\n                    </div>\n                    <Progress value={aiInsights.keyMetrics.onTimeDelivery} className=\"h-2\" />\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Budget Efficiency</span>\n                      <span className=\"font-medium\">{aiInsights.keyMetrics.budgetEfficiency}%</span>\n                    </div>\n                    <Progress value={aiInsights.keyMetrics.budgetEfficiency} className=\"h-2\" />\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Risk Level</span>\n                  <Badge className={`${getRiskColor(aiInsights.keyMetrics.riskLevel)} border-0`}>\n                    {aiInsights.keyMetrics.riskLevel.toUpperCase()}\n                  </Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions & Alerts */}\n            <Card className=\"bg-white border-0 shadow-lg\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"w-5 h-5 text-orange-500\" />\n                  Priority Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {aiInsights.insights.slice(0, 3).map((insight, index) => (\n                  <div key={index} className=\"flex gap-3 p-3 rounded-lg bg-gray-50\">\n                    <div className=\"flex-shrink-0 mt-0.5\">\n                      {insight.type === 'warning' && <AlertTriangle className=\"w-4 h-4 text-orange-500\" />}\n                      {insight.type === 'success' && <CheckCircle2 className=\"w-4 h-4 text-green-500\" />}\n                      {insight.type === 'error' && <AlertTriangle className=\"w-4 h-4 text-red-500\" />}\n                      {insight.type === 'info' && <Target className=\"w-4 h-4 text-blue-500\" />}\n                    </div>\n                    <div className=\"flex-1 space-y-1\">\n                      <p className=\"text-sm font-medium\">{insight.title}</p>\n                      <p className=\"text-xs text-gray-600\">{insight.description}</p>\n                      {insight.action && (\n                        <p className=\"text-xs text-blue-600 font-medium\">{insight.action}</p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 border-0 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center\">\n                  <Projector className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-gray-900\">{activeProjects}</p>\n                  <p className=\"text-sm text-gray-600\">Active</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-green-50 to-green-100 border-0 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center\">\n                  <CheckCircle2 className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-gray-900\">{completedProjects}</p>\n                  <p className=\"text-sm text-gray-600\">Complete</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 border-0 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-gray-900\">{pendingCount}</p>\n                  <p className=\"text-sm text-gray-600\">Pending</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 border-0 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3 relative\">\n                <div className=\"w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center\">\n                  <MessageSquare className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-gray-900\">{(unreadMessages as any)?.count || 0}</p>\n                  <p className=\"text-sm text-gray-600\">Messages</p>\n                </div>\n                {overdueProjects > 0 && (\n                  <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 h-5 w-5 p-0 text-xs flex items-center justify-center\">\n                    {overdueProjects}\n                  </Badge>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Card className=\"bg-white border-0 shadow-lg\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <div className=\"border-b border-gray-200 px-4\">\n              <TabsList className=\"grid w-full grid-cols-4 bg-transparent h-12\">\n                <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Overview\n                </TabsTrigger>\n                <TabsTrigger value=\"projects\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Projects\n                </TabsTrigger>\n                <TabsTrigger value=\"reports\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Reports\n                </TabsTrigger>\n                <TabsTrigger value=\"team\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Team\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"overview\" className=\"p-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Progress Overview */}\n                <Card className=\"bg-gray-50 border-0\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"w-5 h-5 text-green-600\" />\n                      Progress Overview\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-2\">\n                        <span>Overall Progress</span>\n                        <span className=\"font-medium\">{avgProgress}%</span>\n                      </div>\n                      <Progress value={avgProgress} className=\"h-3\" />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 text-center\">\n                      <div>\n                        <p className=\"text-2xl font-bold text-green-600\">{completedProjects}</p>\n                        <p className=\"text-sm text-gray-600\">Completed</p>\n                      </div>\n                      <div>\n                        <p className=\"text-2xl font-bold text-blue-600\">{activeProjects}</p>\n                        <p className=\"text-sm text-gray-600\">In Progress</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Recent Activity */}\n                <Card className=\"bg-gray-50 border-0\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"w-5 h-5 text-blue-600\" />\n                      Recent Activity\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {reportsData.slice(0, 3).map((report: any, index) => (\n                        <div key={index} className=\"flex items-center gap-3 p-2 rounded-lg bg-white\">\n                          <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <FileText className=\"w-4 h-4 text-blue-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm font-medium\">{report.title}</p>\n                            <p className=\"text-xs text-gray-600\">\n                              {new Date(report.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <Badge variant={report.status === 'approved' ? 'default' : 'secondary'}>\n                            {report.status}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"projects\" className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <h3 className=\"text-lg font-semibold\">Project Management</h3>\n                  <AddProjectModal onSuccess={refetch} />\n                </div>\n                \n                {/* Project List */}\n                <div className=\"grid gap-4\">\n                  {projectsData.slice(0, 5).map((project: any) => (\n                    <Card key={project.id} className=\"border border-gray-200\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <h4 className=\"font-medium\">{project.title}</h4>\n                          <Badge variant={project.status === 'active' ? 'default' : 'secondary'}>\n                            {project.status}\n                          </Badge>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Progress</span>\n                            <span>{project.progress || 0}%</span>\n                          </div>\n                          <Progress value={project.progress || 0} className=\"h-2\" />\n                          {project.deadline && (\n                            <div className=\"flex items-center text-sm text-gray-600\">\n                              <Calendar className=\"w-4 h-4 mr-1\" />\n                              {new Date(project.deadline).toLocaleDateString()}\n                            </div>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"reports\" className=\"p-6\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Report Reviews</h3>\n                <div className=\"grid gap-4\">\n                  {reportsData.filter((r: any) => r.status === 'submitted').slice(0, 5).map((report: any) => (\n                    <Card key={report.id} className=\"border border-gray-200\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-medium\">{report.title}</h4>\n                            <p className=\"text-sm text-gray-600\">\n                              {new Date(report.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button size=\"sm\" variant=\"outline\">Review</Button>\n                            <Button size=\"sm\">Approve</Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"team\" className=\"p-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card className=\"bg-gray-50 border-0\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Users className=\"w-5 h-5 text-purple-600\" />\n                      Team Communication\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <AdminChatInterface />\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"bg-gray-50 border-0\">\n                  <CardHeader>\n                    <CardTitle>Team Overview</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between\">\n                        <span>Organization Code</span>\n                        <Badge variant=\"outline\">{organization?.code}</Badge>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Team Members</span>\n                        <span className=\"font-medium\">{(stats as any)?.teamMembers || 0}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Active Projects</span>\n                        <span className=\"font-medium\">{activeProjects}</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </Card>\n      </div>\n      \n      {/* Onboarding Walkthrough */}\n      <OnboardingWalkthrough\n        isOpen={showOnboarding}\n        onClose={() => {\n          setShowOnboarding(false);\n          localStorage.setItem('onboarding-completed', 'true');\n        }}\n        userRole=\"admin\"\n      />\n    </div>\n  );\n}","size_bytes":23803},"client/src/components/admin-dashboard-simple.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { useState } from \"react\";\nimport { \n  Users, \n  FolderOpen, \n  FileText,\n  BarChart3,\n  LogOut,\n  Plus,\n  CheckCircle2,\n  TrendingUp,\n  Brain,\n  Zap,\n  AlertTriangle,\n  MessageSquare,\n  PieChart,\n  Activity,\n  DollarSign,\n  Calendar\n} from \"lucide-react\";\nimport { PieChart as RechartsPieChart, Pie, Cell, ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, BarChart, Bar, Area, AreaChart } from \"recharts\";\nimport { useLogout, useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdelLogo from \"./adel-logo\";\nimport AdminChatInterface from \"./admin-chat-interface\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AIInsight {\n  type: 'success' | 'warning' | 'info' | 'error';\n  title: string;\n  description: string;\n  action?: string;\n  priority: 'high' | 'medium' | 'low';\n}\n\ninterface AIProjectSummary {\n  overallHealth: 'excellent' | 'good' | 'warning' | 'critical';\n  completionTrend: 'improving' | 'stable' | 'declining';\n  riskProjects: number;\n  upcomingDeadlines: number;\n  budgetUtilization: number;\n  teamProductivity: 'high' | 'medium' | 'low';\n  executiveSummary: string;\n  keyMetrics: {\n    onTimeDelivery: number;\n    budgetEfficiency: number;\n    teamEngagement: number;\n    riskLevel: 'low' | 'medium' | 'high';\n  };\n  insights: AIInsight[];\n  recommendations: string[];\n}\n\nexport default function AdminDashboardSimple() {\n  const { user } = useAuth();\n  const logout = useLogout();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [aiInsights, setAiInsights] = useState<AIProjectSummary | null>(null);\n  const [loadingAI, setLoadingAI] = useState(false);\n  const [editingProject, setEditingProject] = useState<any>(null);\n  const [viewingReport, setViewingReport] = useState<any>(null);\n  const [editForm, setEditForm] = useState({\n    name: '',\n    description: '',\n    status: '',\n    progress: 0,\n    budget: '',\n    budgetUsed: '',\n    deadline: ''\n  });\n\n  const { data: projects } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: reports } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  const { data: organization } = useQuery({\n    queryKey: [\"/api/organization\"],\n  });\n\n  const { data: teamMembers } = useQuery({\n    queryKey: [\"/api/organization/members\"],\n  });\n\n  // Edit project mutation\n  const editProjectMutation = useMutation({\n    mutationFn: async (projectData: any) => {\n      return await apiRequest('PATCH', `/api/projects/${editingProject.id}`, {\n        name: projectData.name,\n        description: projectData.description,\n        status: projectData.status,\n        progress: parseInt(projectData.progress),\n        budget: parseFloat(projectData.budget),\n        budgetUsed: parseFloat(projectData.budgetUsed),\n        deadline: projectData.deadline\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Project updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      setEditingProject(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const openEditModal = (project: any) => {\n    setEditingProject(project);\n    setEditForm({\n      name: project.name || '',\n      description: project.description || '',\n      status: project.status || 'active',\n      progress: project.progress || 0,\n      budget: project.budget?.toString() || '',\n      budgetUsed: project.budgetUsed?.toString() || '',\n      deadline: project.deadline ? new Date(project.deadline).toISOString().split('T')[0] : ''\n    });\n  };\n\n  const handleSaveProject = () => {\n    editProjectMutation.mutate(editForm);\n  };\n\n  // Generate AI insights\n  const generateAIInsights = async () => {\n    if (!projects || !reports) return;\n    \n    setLoadingAI(true);\n    try {\n      const response = await fetch('/api/ai/dashboard-insights', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to generate AI insights');\n      }\n      \n      const data = await response.json() as AIProjectSummary;\n      console.log('AI Response received in frontend:', data);\n      console.log('Key metrics:', data.keyMetrics);\n      console.log('On-time delivery:', data.keyMetrics?.onTimeDelivery);\n      console.log('Budget efficiency:', data.keyMetrics?.budgetEfficiency);\n      console.log('Team engagement:', data.keyMetrics?.teamEngagement);\n      setAiInsights(data);\n    } catch (error) {\n      console.error('AI insights error:', error);\n      toast({\n        title: \"AI Analysis Unavailable\",\n        description: \"Using standard dashboard view\",\n        variant: \"default\",\n      });\n    } finally {\n      setLoadingAI(false);\n    }\n  };\n\n  // Calculate key metrics\n  const projectsData = projects as any[] || [];\n  const reportsData = reports as any[] || [];\n  const teamData = teamMembers as any[] || [];\n  const activeProjects = projectsData.filter(p => p.status === 'active');\n  const completedProjects = projectsData.filter(p => p.status === 'completed');\n  const onHoldProjects = projectsData.filter(p => p.status === 'on-hold');\n  const cancelledProjects = projectsData.filter(p => p.status === 'cancelled');\n  const pendingReports = reportsData.filter(r => r.status === 'submitted').length;\n  const approvedReports = reportsData.filter(r => r.status === 'approved').length;\n  const draftReports = reportsData.filter(r => r.status === 'draft').length;\n  const avgProgress = projectsData.length > 0 ? \n    Math.round(projectsData.reduce((acc, p) => acc + (p.progress || 0), 0) / projectsData.length) : 0;\n\n  // Chart data\n  const projectStatusData = [\n    { name: 'Active', value: activeProjects.length, color: '#3b82f6' },\n    { name: 'Completed', value: completedProjects.length, color: '#10b981' },\n    { name: 'On Hold', value: onHoldProjects.length, color: '#f59e0b' },\n    { name: 'Cancelled', value: cancelledProjects.length, color: '#ef4444' }\n  ];\n\n  const reportStatusData = [\n    { name: 'Approved', value: approvedReports, color: '#10b981' },\n    { name: 'Pending', value: pendingReports, color: '#f59e0b' },\n    { name: 'Draft', value: draftReports, color: '#6b7280' }\n  ];\n\n  const progressData = projectsData.map((project, index) => ({\n    name: `P${index + 1}`,\n    progress: project.progress || 0,\n    budget: project.budget ? parseFloat(project.budget) : 0,\n    spent: project.budgetUsed ? parseFloat(project.budgetUsed) : 0\n  }));\n\n  // Generate real monthly data based on actual project budgets\n  const monthlyData = (() => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n    const currentMonth = new Date().getMonth();\n    \n    return months.map((month, index) => {\n      if (index > currentMonth) {\n        return { month, projects: 0, reports: 0, budget: 0 };\n      }\n      \n      // Calculate total budget for projects created in this month\n      const monthProjects = projectsData.filter((project: any) => {\n        if (!project.createdAt) return index === currentMonth; // Include current projects if no date\n        const projectDate = new Date(project.createdAt);\n        return projectDate.getMonth() === index;\n      });\n      \n      const monthReports = reportsData.filter((report: any) => {\n        if (!report.submittedAt) return false;\n        const reportDate = new Date(report.submittedAt);\n        return reportDate.getMonth() === index;\n      });\n      \n      const monthBudget = monthProjects.reduce((total: number, project: any) => {\n        return total + (parseFloat(project.budget) || 0);\n      }, 0);\n      \n      return {\n        month,\n        projects: monthProjects.length,\n        reports: monthReports.length,\n        budget: monthBudget\n      };\n    });\n  })();\n\n  const getHealthColor = (health: string) => {\n    switch (health) {\n      case 'excellent': return 'bg-green-500';\n      case 'good': return 'bg-blue-500';\n      case 'warning': return 'bg-orange-500';\n      case 'critical': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case 'low': return 'text-green-600 bg-green-50';\n      case 'medium': return 'text-orange-600 bg-orange-50';\n      case 'high': return 'text-red-600 bg-red-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      <div className=\"max-w-7xl mx-auto p-4 space-y-6\">\n        \n        {/* Compact Header */}\n        <div className=\"bg-white rounded-2xl shadow-sm border border-gray-100 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center\">\n                <AdelLogo size=\"sm\" className=\"filter brightness-0 invert\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">Admin Dashboard</h1>\n                <p className=\"text-sm text-gray-600\">Manage projects and team</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <Button\n                onClick={generateAIInsights}\n                disabled={loadingAI}\n                size=\"sm\"\n                className=\"bg-gradient-to-r from-purple-500 to-indigo-600 hover:from-purple-600 hover:to-indigo-700\"\n              >\n                {loadingAI ? (\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                ) : (\n                  <Brain className=\"w-4 h-4\" />\n                )}\n                AI Insights\n              </Button>\n              \n              <Button\n                onClick={() => logout.mutate()}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* AI Insights Section */}\n        {aiInsights && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Executive Summary */}\n            <Card className=\"lg:col-span-2 bg-gradient-to-br from-blue-50 to-indigo-100 border-0 shadow-lg\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <div className={`w-3 h-3 rounded-full ${getHealthColor(aiInsights.overallHealth)}`} />\n                  AI Executive Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div>\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-2\">Executive Summary</h4>\n                    <p className=\"text-gray-700 leading-relaxed text-sm\">{aiInsights.executiveSummary}</p>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-2\">Project Objectives</h4>\n                    <div className=\"text-sm text-gray-700 space-y-1\">\n                      {projectsData.map((project: any, index: number) => (\n                        <div key={index} className=\"bg-gray-50 p-2 rounded border-l-2 border-blue-400\">\n                          <span className=\"font-medium\">{project.name}:</span> {project.goals || project.description || 'Objectives to be defined'}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-2\">Key Inputs & Activities</h4>\n                    <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                      <div className=\"bg-blue-50 p-2 rounded\">\n                        <span className=\"font-medium text-blue-800\">Budget Allocated:</span>\n                        <p className=\"text-blue-700\">${projectsData.reduce((acc: number, p: any) => acc + parseFloat(p.budget || '0'), 0).toLocaleString()}</p>\n                      </div>\n                      <div className=\"bg-green-50 p-2 rounded\">\n                        <span className=\"font-medium text-green-800\">Team Members:</span>\n                        <p className=\"text-green-700\">{teamData.length} active members</p>\n                      </div>\n                      <div className=\"bg-purple-50 p-2 rounded\">\n                        <span className=\"font-medium text-purple-800\">Reports Generated:</span>\n                        <p className=\"text-purple-700\">{reportsData.length} total reports</p>\n                      </div>\n                      <div className=\"bg-orange-50 p-2 rounded\">\n                        <span className=\"font-medium text-orange-800\">Active Projects:</span>\n                        <p className=\"text-orange-700\">{activeProjects.length} in progress</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-2\">Accomplishments & Numbers</h4>\n                    <div className=\"grid grid-cols-3 gap-3 mb-4\">\n                      <div className=\"bg-gradient-to-r from-green-50 to-green-100 p-3 rounded-lg border border-green-200\">\n                        <div className=\"text-lg font-bold text-green-800\">\n                          {completedProjects.length}\n                        </div>\n                        <div className=\"text-xs text-green-700\">Projects Completed</div>\n                      </div>\n                      <div className=\"bg-gradient-to-r from-blue-50 to-blue-100 p-3 rounded-lg border border-blue-200\">\n                        <div className=\"text-lg font-bold text-blue-800\">\n                          {Math.round(projectsData.reduce((acc: number, p: any) => acc + p.progress, 0) / projectsData.length || 0)}%\n                        </div>\n                        <div className=\"text-xs text-blue-700\">Average Progress</div>\n                      </div>\n                      <div className=\"bg-gradient-to-r from-purple-50 to-purple-100 p-3 rounded-lg border border-purple-200\">\n                        <div className=\"text-lg font-bold text-purple-800\">\n                          {reportsData.filter((r: any) => r.status === 'approved').length}\n                        </div>\n                        <div className=\"text-xs text-purple-700\">Reports Approved</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                      <div className=\"bg-gradient-to-r from-orange-50 to-orange-100 p-3 rounded-lg border border-orange-200\">\n                        <div className=\"text-lg font-bold text-orange-800\">\n                          ${projectsData.reduce((acc: number, p: any) => acc + (parseFloat(p.budgetUsed) || 0), 0).toLocaleString()}\n                        </div>\n                        <div className=\"text-xs text-orange-700\">Total Budget Spent</div>\n                      </div>\n                      <div className=\"bg-gradient-to-r from-teal-50 to-teal-100 p-3 rounded-lg border border-teal-200\">\n                        <div className=\"text-lg font-bold text-teal-800\">\n                          {reportsData.length}\n                        </div>\n                        <div className=\"text-xs text-teal-700\">Total Reports Generated</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <h5 className=\"text-xs font-semibold text-gray-700 mb-1\">Project Status Breakdown:</h5>\n                      {projectsData.map((project: any, index: number) => (\n                        <div key={index} className=\"bg-white border rounded-lg p-2 shadow-sm\">\n                          <div className=\"flex justify-between items-center mb-1\">\n                            <span className=\"font-medium text-gray-800 text-sm\">{project.name}</span>\n                            <span className={`text-xs px-2 py-1 rounded-full ${\n                              project.status === 'completed' ? 'bg-green-100 text-green-800' :\n                              project.status === 'active' ? 'bg-blue-100 text-blue-800' :\n                              project.status === 'on-hold' ? 'bg-yellow-100 text-yellow-800' :\n                              'bg-gray-100 text-gray-800'\n                            }`}>\n                              {project.status.charAt(0).toUpperCase() + project.status.slice(1)}\n                            </span>\n                          </div>\n                          <div className=\"grid grid-cols-3 gap-2 text-xs text-gray-600\">\n                            <span><strong>{project.progress}%</strong> Complete</span>\n                            <span><strong>${project.budgetUsed || 0}</strong> Spent</span>\n                            <span><strong>${(parseFloat(project.budget) - parseFloat(project.budgetUsed || '0')).toLocaleString()}</strong> Remaining</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>On-Time Delivery</span>\n                      <span className=\"font-medium\">{aiInsights?.keyMetrics?.onTimeDelivery || 0}%</span>\n                    </div>\n                    <Progress value={aiInsights?.keyMetrics?.onTimeDelivery || 0} className=\"h-2\" />\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Budget Efficiency</span>\n                      <span className=\"font-medium\">{aiInsights?.keyMetrics?.budgetEfficiency || 0}%</span>\n                    </div>\n                    <Progress value={aiInsights?.keyMetrics?.budgetEfficiency || 0} className=\"h-2\" />\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Risk Level</span>\n                  <Badge className={`${getRiskColor(aiInsights?.keyMetrics?.riskLevel || 'low')} border-0`}>\n                    {(aiInsights?.keyMetrics?.riskLevel || 'low').toUpperCase()}\n                  </Badge>\n                </div>\n\n                {/* AI Metrics Pie Chart */}\n                <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                  <h4 className=\"text-sm font-semibold text-gray-700 mb-4\">Performance Metrics</h4>\n                  \n                  <div className=\"bg-white rounded-lg p-4 border\">\n                    <div className=\"h-48\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <RechartsPieChart>\n                          <Pie\n                            data={[\n                              { name: 'On-Time Delivery', value: aiInsights?.keyMetrics?.onTimeDelivery || 0, color: '#3b82f6' },\n                              { name: 'Budget Efficiency', value: aiInsights?.keyMetrics?.budgetEfficiency || 0, color: '#10b981' },\n                              { name: 'Team Engagement', value: aiInsights?.keyMetrics?.teamEngagement || 0, color: '#8b5cf6' }\n                            ]}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            innerRadius={30}\n                            outerRadius={70}\n                            paddingAngle={3}\n                            dataKey=\"value\"\n                          >\n                            {[\n                              { name: 'On-Time Delivery', value: aiInsights?.keyMetrics?.onTimeDelivery || 0, color: '#3b82f6' },\n                              { name: 'Budget Efficiency', value: aiInsights?.keyMetrics?.budgetEfficiency || 0, color: '#10b981' },\n                              { name: 'Team Engagement', value: aiInsights?.keyMetrics?.teamEngagement || 0, color: '#8b5cf6' }\n                            ].map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={entry.color} />\n                            ))}\n                          </Pie>\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1f2937', \n                              border: 'none', \n                              borderRadius: '8px',\n                              color: 'white'\n                            }}\n                            formatter={(value: any) => [`${value}%`, '']}\n                          />\n                        </RechartsPieChart>\n                      </ResponsiveContainer>\n                    </div>\n                    <div className=\"space-y-2 mt-2\">\n                      {[\n                        { name: 'On-Time Delivery', value: aiInsights?.keyMetrics?.onTimeDelivery || 0, color: '#3b82f6' },\n                        { name: 'Budget Efficiency', value: aiInsights?.keyMetrics?.budgetEfficiency || 0, color: '#10b981' },\n                        { name: 'Team Engagement', value: aiInsights?.keyMetrics?.teamEngagement || 0, color: '#8b5cf6' }\n                      ].map((item, index) => (\n                        <div key={index} className=\"flex items-center justify-between text-xs\">\n                          <div className=\"flex items-center gap-2\">\n                            <div \n                              className=\"w-2 h-2 rounded-full\" \n                              style={{ backgroundColor: item.color }}\n                            />\n                            <span className=\"text-gray-600\">{item.name}</span>\n                          </div>\n                          <span className=\"font-medium\">{item.value}%</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Priority Actions */}\n            <Card className=\"bg-white border-0 shadow-lg\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"w-5 h-5 text-orange-500\" />\n                  Priority Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {(aiInsights?.insights || []).slice(0, 3).map((insight, index) => (\n                  <div key={index} className=\"flex gap-3 p-3 rounded-lg bg-gray-50\">\n                    <div className=\"flex-shrink-0 mt-0.5\">\n                      {insight.type === 'warning' && <AlertTriangle className=\"w-4 h-4 text-orange-500\" />}\n                      {insight.type === 'success' && <CheckCircle2 className=\"w-4 h-4 text-green-500\" />}\n                      {insight.type === 'error' && <AlertTriangle className=\"w-4 h-4 text-red-500\" />}\n                      {insight.type === 'info' && <FileText className=\"w-4 h-4 text-blue-500\" />}\n                    </div>\n                    <div className=\"flex-1 space-y-1\">\n                      <p className=\"text-sm font-medium\">{insight.title}</p>\n                      <p className=\"text-xs text-gray-600\">{insight.description}</p>\n                      {insight.action && (\n                        <p className=\"text-xs text-blue-600 font-medium\">{insight.action}</p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Key Metrics with Pending Items Highlighted */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 border-0 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center\">\n                  <FolderOpen className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-gray-900\">{activeProjects.length}</p>\n                  <p className=\"text-sm text-gray-600\">Active Projects</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-green-50 to-green-100 border-0 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center\">\n                  <CheckCircle2 className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-gray-900\">{completedProjects.length}</p>\n                  <p className=\"text-sm text-gray-600\">Completed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`border-0 shadow-sm hover:shadow-md transition-shadow ${pendingReports > 0 ? 'bg-gradient-to-br from-red-50 to-red-100 ring-2 ring-red-200' : 'bg-gradient-to-br from-purple-50 to-purple-100'}`}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${pendingReports > 0 ? 'bg-red-500' : 'bg-purple-500'}`}>\n                  <FileText className=\"w-5 h-5 text-white\" />\n                  {pendingReports > 0 && (\n                    <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-600 rounded-full flex items-center justify-center\">\n                      <span className=\"text-xs text-white font-bold\">{pendingReports}</span>\n                    </div>\n                  )}\n                </div>\n                <div>\n                  <p className={`text-2xl font-bold ${pendingReports > 0 ? 'text-red-700' : 'text-gray-900'}`}>{pendingReports}</p>\n                  <p className={`text-sm ${pendingReports > 0 ? 'text-red-600 font-medium' : 'text-gray-600'}`}>\n                    {pendingReports > 0 ? 'PENDING REVIEW' : 'Pending'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 border-0 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center\">\n                  <Users className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-gray-900\">{teamData.length}</p>\n                  <p className=\"text-sm text-gray-600\">Team Members</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Card className=\"bg-white border-0 shadow-lg\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <div className=\"border-b border-gray-200 px-4\">\n              <TabsList className=\"grid w-full grid-cols-5 bg-transparent h-12\">\n                <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Overview\n                </TabsTrigger>\n                <TabsTrigger value=\"projects\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Projects\n                </TabsTrigger>\n                <TabsTrigger value=\"reports\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Reports\n                </TabsTrigger>\n                <TabsTrigger value=\"analytics\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Analytics\n                </TabsTrigger>\n                <TabsTrigger value=\"team\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Team\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"overview\" className=\"p-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n                \n                {/* Project Status Distribution */}\n                <Card className=\"bg-white border-0 shadow-lg\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <PieChart className=\"w-5 h-5 text-blue-600\" />\n                      Project Status\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <RechartsPieChart>\n                          <Pie\n                            data={projectStatusData}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            innerRadius={40}\n                            outerRadius={80}\n                            paddingAngle={5}\n                            dataKey=\"value\"\n                          >\n                            {projectStatusData.map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={entry.color} />\n                            ))}\n                          </Pie>\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1f2937', \n                              border: 'none', \n                              borderRadius: '8px',\n                              color: 'white'\n                            }}\n                          />\n                        </RechartsPieChart>\n                      </ResponsiveContainer>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-2 mt-4\">\n                      {projectStatusData.map((item, index) => (\n                        <div key={index} className=\"flex items-center gap-2\">\n                          <div \n                            className=\"w-3 h-3 rounded-full\" \n                            style={{ backgroundColor: item.color }}\n                          />\n                          <span className=\"text-xs text-gray-600\">{item.name}: {item.value}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Monthly Trends */}\n                <Card className=\"bg-white border-0 shadow-lg\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Activity className=\"w-5 h-5 text-green-600\" />\n                      Monthly Trends\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <AreaChart data={monthlyData}>\n                          <defs>\n                            <linearGradient id=\"projectGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                              <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.8}/>\n                              <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.1}/>\n                            </linearGradient>\n                            <linearGradient id=\"reportGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                              <stop offset=\"5%\" stopColor=\"#10b981\" stopOpacity={0.8}/>\n                              <stop offset=\"95%\" stopColor=\"#10b981\" stopOpacity={0.1}/>\n                            </linearGradient>\n                          </defs>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f1f5f9\" />\n                          <XAxis \n                            dataKey=\"month\" \n                            axisLine={false}\n                            tickLine={false}\n                            tick={{ fontSize: 12, fill: '#6b7280' }}\n                          />\n                          <YAxis hide />\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1f2937', \n                              border: 'none', \n                              borderRadius: '8px',\n                              color: 'white'\n                            }}\n                          />\n                          <Area \n                            type=\"monotone\" \n                            dataKey=\"projects\" \n                            stroke=\"#3b82f6\" \n                            fillOpacity={1} \n                            fill=\"url(#projectGradient)\" \n                          />\n                          <Area \n                            type=\"monotone\" \n                            dataKey=\"reports\" \n                            stroke=\"#10b981\" \n                            fillOpacity={1} \n                            fill=\"url(#reportGradient)\" \n                          />\n                        </AreaChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Budget Analysis */}\n                <Card className=\"bg-white border-0 shadow-lg\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <DollarSign className=\"w-5 h-5 text-purple-600\" />\n                      Budget Overview\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <BarChart data={monthlyData}>\n                          <defs>\n                            <linearGradient id=\"budgetGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                              <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8}/>\n                              <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0.3}/>\n                            </linearGradient>\n                          </defs>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f1f5f9\" />\n                          <XAxis \n                            dataKey=\"month\" \n                            axisLine={false}\n                            tickLine={false}\n                            tick={{ fontSize: 12, fill: '#6b7280' }}\n                          />\n                          <YAxis hide />\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1f2937', \n                              border: 'none', \n                              borderRadius: '8px',\n                              color: 'white'\n                            }}\n                            formatter={(value) => [`$${value.toLocaleString()}`, 'Budget']}\n                          />\n                          <Bar \n                            dataKey=\"budget\" \n                            fill=\"url(#budgetGradient)\" \n                            radius={[4, 4, 0, 0]}\n                          />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Project Progress */}\n                <Card className=\"bg-white border-0 shadow-lg xl:col-span-2\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"w-5 h-5 text-orange-600\" />\n                      Project Progress Tracking\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <LineChart data={progressData}>\n                          <defs>\n                            <linearGradient id=\"progressGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n                              <stop offset=\"0%\" stopColor=\"#f59e0b\" />\n                              <stop offset=\"50%\" stopColor=\"#3b82f6\" />\n                              <stop offset=\"100%\" stopColor=\"#10b981\" />\n                            </linearGradient>\n                          </defs>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f1f5f9\" />\n                          <XAxis \n                            dataKey=\"name\" \n                            axisLine={false}\n                            tickLine={false}\n                            tick={{ fontSize: 12, fill: '#6b7280' }}\n                          />\n                          <YAxis \n                            axisLine={false}\n                            tickLine={false}\n                            tick={{ fontSize: 12, fill: '#6b7280' }}\n                          />\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1f2937', \n                              border: 'none', \n                              borderRadius: '8px',\n                              color: 'white'\n                            }}\n                            formatter={(value, name) => [\n                              name === 'progress' ? `${value}%` : `$${value.toLocaleString()}`, \n                              name === 'progress' ? 'Progress' : name === 'budget' ? 'Budget' : 'Spent'\n                            ]}\n                          />\n                          <Line \n                            type=\"monotone\" \n                            dataKey=\"progress\" \n                            stroke=\"url(#progressGradient)\" \n                            strokeWidth={3}\n                            dot={{ fill: '#3b82f6', strokeWidth: 2, r: 4 }}\n                            activeDot={{ r: 6 }}\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Report Status */}\n                <Card className=\"bg-white border-0 shadow-lg\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <FileText className=\"w-5 h-5 text-indigo-600\" />\n                      Report Status\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <RechartsPieChart>\n                          <Pie\n                            data={reportStatusData}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            outerRadius={80}\n                            paddingAngle={3}\n                            dataKey=\"value\"\n                          >\n                            {reportStatusData.map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={entry.color} />\n                            ))}\n                          </Pie>\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1f2937', \n                              border: 'none', \n                              borderRadius: '8px',\n                              color: 'white'\n                            }}\n                          />\n                        </RechartsPieChart>\n                      </ResponsiveContainer>\n                    </div>\n                    <div className=\"space-y-2 mt-4\">\n                      {reportStatusData.map((item, index) => (\n                        <div key={index} className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <div \n                              className=\"w-3 h-3 rounded-full\" \n                              style={{ backgroundColor: item.color }}\n                            />\n                            <span className=\"text-sm text-gray-600\">{item.name}</span>\n                          </div>\n                          <span className=\"font-medium\">{item.value}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"projects\" className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <h3 className=\"text-lg font-semibold\">Project Management</h3>\n                  <Button size=\"sm\" className=\"bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    New Project\n                  </Button>\n                </div>\n                \n                {/* Project Status Overview */}\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n                  <Card className=\"bg-blue-50 border-blue-200\">\n                    <CardContent className=\"p-4 text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{activeProjects.length}</div>\n                      <div className=\"text-sm text-blue-700\">Active</div>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"bg-green-50 border-green-200\">\n                    <CardContent className=\"p-4 text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">{completedProjects.length}</div>\n                      <div className=\"text-sm text-green-700\">Completed</div>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"bg-orange-50 border-orange-200\">\n                    <CardContent className=\"p-4 text-center\">\n                      <div className=\"text-2xl font-bold text-orange-600\">{onHoldProjects.length}</div>\n                      <div className=\"text-sm text-orange-700\">On Hold</div>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"bg-gray-50 border-gray-200\">\n                    <CardContent className=\"p-4 text-center\">\n                      <div className=\"text-2xl font-bold text-gray-600\">{projectsData.length}</div>\n                      <div className=\"text-sm text-gray-700\">Total</div>\n                    </CardContent>\n                  </Card>\n                </div>\n                \n                {/* Projects List - Scrollable */}\n                <Card className=\"bg-white border-0 shadow-lg\">\n                  <CardHeader>\n                    <CardTitle>All Projects ({projectsData.length})</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4 max-h-96 overflow-y-auto pr-2\">\n                      {projectsData.map((project: any, index) => (\n                        <Card key={project.id} className=\"border border-gray-200 hover:shadow-md transition-shadow\">\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-start justify-between mb-3\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-3 mb-2\">\n                                  <span className=\"text-sm text-gray-500 bg-gray-100 px-2 py-1 rounded\">#{index + 1}</span>\n                                  <h4 className=\"font-semibold text-gray-900\">{project.name || project.title}</h4>\n                                </div>\n                                <p className=\"text-sm text-gray-600 mb-3\">{project.description || 'No description provided'}</p>\n                              </div>\n                              <div className=\"flex items-center gap-2 ml-4\">\n                                <Badge variant={\n                                  project.status === 'active' ? 'default' : \n                                  project.status === 'completed' ? 'secondary' :\n                                  project.status === 'on-hold' ? 'outline' :\n                                  'destructive'\n                                } className={\n                                  project.status === 'active' ? 'bg-blue-100 text-blue-800' :\n                                  project.status === 'completed' ? 'bg-green-100 text-green-800' :\n                                  project.status === 'on-hold' ? 'bg-orange-100 text-orange-800' :\n                                  'bg-red-100 text-red-800'\n                                }>\n                                  {project.status}\n                                </Badge>\n                                <Button size=\"sm\" variant=\"ghost\"\n                                  onClick={() => openEditModal(project)}>\n                                  Edit\n                                </Button>\n                              </div>\n                            </div>\n                            \n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                              {/* Progress */}\n                              <div>\n                                <div className=\"flex justify-between text-sm mb-1\">\n                                  <span className=\"text-gray-600\">Progress</span>\n                                  <span className=\"font-medium\">{project.progress || 0}%</span>\n                                </div>\n                                <Progress value={project.progress || 0} className=\"h-2\" />\n                              </div>\n                              \n                              {/* Budget */}\n                              {project.budget && (\n                                <div>\n                                  <div className=\"flex justify-between text-sm mb-1\">\n                                    <span className=\"text-gray-600\">Budget</span>\n                                    <span className=\"font-medium\">${parseFloat(project.budget).toLocaleString()}</span>\n                                  </div>\n                                  <div className=\"text-xs text-gray-500\">\n                                    Used: ${parseFloat(project.budgetUsed || 0).toLocaleString()}\n                                  </div>\n                                </div>\n                              )}\n                              \n                              {/* Deadline */}\n                              {project.deadline && (\n                                <div>\n                                  <div className=\"text-sm text-gray-600 mb-1\">Deadline</div>\n                                  <div className=\"flex items-center gap-1\">\n                                    <Calendar className=\"w-3 h-3 text-gray-500\" />\n                                    <span className=\"text-sm font-medium\">\n                                      {new Date(project.deadline).toLocaleDateString()}\n                                    </span>\n                                  </div>\n                                  <div className={`text-xs ${\n                                    new Date(project.deadline) < new Date() ? 'text-red-600' : 'text-gray-500'\n                                  }`}>\n                                    {new Date(project.deadline) < new Date() ? 'Overdue' : `${Math.ceil((new Date(project.deadline).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))} days left`}\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                      \n                      {projectsData.length === 0 && (\n                        <div className=\"text-center py-8\">\n                          <FolderOpen className=\"w-12 h-12 text-gray-400 mx-auto mb-3\" />\n                          <p className=\"text-gray-500\">No projects found</p>\n                          <Button className=\"mt-3\" size=\"sm\">\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Create First Project\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"reports\" className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <h3 className=\"text-lg font-semibold\">Report Management</h3>\n                  {pendingReports > 0 && (\n                    <Badge variant=\"destructive\" className=\"text-sm\">\n                      {pendingReports} Pending Review\n                    </Badge>\n                  )}\n                </div>\n                \n                {/* Pending Reports Section */}\n                {pendingReports > 0 && (\n                  <Card className=\"border-red-200 bg-red-50\">\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-red-700 flex items-center gap-2\">\n                        <AlertTriangle className=\"w-5 h-5\" />\n                        Reports Requiring Immediate Review\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        {reportsData\n                          .filter((report: any) => report.status === 'submitted')\n                          .slice(0, 3)\n                          .map((report: any) => (\n                            <div key={report.id} className=\"flex items-center justify-between p-3 bg-white rounded-lg border border-red-200\">\n                              <div>\n                                <h4 className=\"font-medium text-gray-900\">{report.title}</h4>\n                                <p className=\"text-sm text-gray-600\">\n                                  Submitted: {new Date(report.submittedAt || report.createdAt).toLocaleDateString()}\n                                </p>\n                              </div>\n                              <Button size=\"sm\" variant=\"outline\" className=\"text-red-600 border-red-200\" \n                                onClick={() => window.alert(`Reviewing report: ${report.title}`)}>\n                                Review\n                              </Button>\n                            </div>\n                          ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n                \n                {/* All Reports - Scrollable */}\n                <Card className=\"bg-white border-0 shadow-sm\">\n                  <CardHeader>\n                    <CardTitle>All Reports ({reportsData.length})</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3 max-h-96 overflow-y-auto pr-2\">\n                      {reportsData.slice(0, 20).map((report: any, index) => (\n                        <div key={report.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-3\">\n                              <span className=\"text-sm text-gray-500 w-8\">#{index + 1}</span>\n                              <div>\n                                <h4 className=\"font-medium text-gray-900\">{report.title}</h4>\n                                <p className=\"text-sm text-gray-600\">\n                                  {new Date(report.submittedAt || report.createdAt).toLocaleDateString()}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-3\">\n                            <Badge variant={\n                              report.status === 'approved' ? 'default' : \n                              report.status === 'submitted' ? 'secondary' : \n                              report.status === 'rejected' ? 'destructive' :\n                              'outline'\n                            }>\n                              {report.status}\n                            </Badge>\n                            <Button size=\"sm\" variant=\"ghost\"\n                              onClick={() => setViewingReport(report)}>\n                              View\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {reportsData.length > 20 && (\n                        <div className=\"text-center py-3\">\n                          <p className=\"text-sm text-gray-500\">\n                            Showing 20 of {reportsData.length} reports\n                          </p>\n                          <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">\n                            Load More\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"analytics\" className=\"p-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                \n                {/* Performance Metrics */}\n                <Card className=\"bg-white border-0 shadow-lg lg:col-span-2\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Activity className=\"w-5 h-5 text-blue-600\" />\n                      Performance Dashboard\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n                      <div className=\"text-center p-4 bg-blue-50 rounded-xl\">\n                        <div className=\"text-2xl font-bold text-blue-600\">{avgProgress}%</div>\n                        <div className=\"text-sm text-gray-600\">Avg Progress</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-green-50 rounded-xl\">\n                        <div className=\"text-2xl font-bold text-green-600\">{Math.round((completedProjects.length / Math.max(projectsData.length, 1)) * 100)}%</div>\n                        <div className=\"text-sm text-gray-600\">Success Rate</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-purple-50 rounded-xl\">\n                        <div className=\"text-2xl font-bold text-purple-600\">{teamData.length}</div>\n                        <div className=\"text-sm text-gray-600\">Team Size</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-orange-50 rounded-xl\">\n                        <div className=\"text-2xl font-bold text-orange-600\">{reportsData.length}</div>\n                        <div className=\"text-sm text-gray-600\">Total Reports</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"h-80\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <AreaChart data={monthlyData}>\n                          <defs>\n                            <linearGradient id=\"combinedGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                              <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.8}/>\n                              <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.1}/>\n                            </linearGradient>\n                          </defs>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f1f5f9\" />\n                          <XAxis \n                            dataKey=\"month\" \n                            axisLine={false}\n                            tickLine={false}\n                            tick={{ fontSize: 12, fill: '#6b7280' }}\n                          />\n                          <YAxis \n                            axisLine={false}\n                            tickLine={false}\n                            tick={{ fontSize: 12, fill: '#6b7280' }}\n                          />\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1f2937', \n                              border: 'none', \n                              borderRadius: '8px',\n                              color: 'white'\n                            }}\n                          />\n                          <Area \n                            type=\"monotone\" \n                            dataKey=\"projects\" \n                            stroke=\"#3b82f6\" \n                            fillOpacity={1} \n                            fill=\"url(#combinedGradient)\" \n                            name=\"Projects\"\n                          />\n                          <Area \n                            type=\"monotone\" \n                            dataKey=\"reports\" \n                            stroke=\"#10b981\" \n                            fillOpacity={0.6} \n                            fill=\"#10b981\" \n                            name=\"Reports\"\n                          />\n                        </AreaChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Budget Trends */}\n                <Card className=\"bg-white border-0 shadow-lg\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <DollarSign className=\"w-5 h-5 text-green-600\" />\n                      Budget Trends\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <LineChart data={monthlyData}>\n                          <defs>\n                            <linearGradient id=\"budgetTrendGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n                              <stop offset=\"0%\" stopColor=\"#10b981\" />\n                              <stop offset=\"100%\" stopColor=\"#3b82f6\" />\n                            </linearGradient>\n                          </defs>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f1f5f9\" />\n                          <XAxis \n                            dataKey=\"month\" \n                            axisLine={false}\n                            tickLine={false}\n                            tick={{ fontSize: 12, fill: '#6b7280' }}\n                          />\n                          <YAxis \n                            axisLine={false}\n                            tickLine={false}\n                            tick={{ fontSize: 12, fill: '#6b7280' }}\n                          />\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1f2937', \n                              border: 'none', \n                              borderRadius: '8px',\n                              color: 'white'\n                            }}\n                            formatter={(value) => [`$${value.toLocaleString()}`, 'Budget']}\n                          />\n                          <Line \n                            type=\"monotone\" \n                            dataKey=\"budget\" \n                            stroke=\"url(#budgetTrendGradient)\" \n                            strokeWidth={3}\n                            dot={{ fill: '#10b981', strokeWidth: 2, r: 4 }}\n                            activeDot={{ r: 6 }}\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Activity Timeline */}\n                <Card className=\"bg-white border-0 shadow-lg\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Calendar className=\"w-5 h-5 text-purple-600\" />\n                      Activity Timeline\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <BarChart data={monthlyData}>\n                          <defs>\n                            <linearGradient id=\"activityGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                              <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8}/>\n                              <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0.3}/>\n                            </linearGradient>\n                          </defs>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f1f5f9\" />\n                          <XAxis \n                            dataKey=\"month\" \n                            axisLine={false}\n                            tickLine={false}\n                            tick={{ fontSize: 12, fill: '#6b7280' }}\n                          />\n                          <YAxis \n                            axisLine={false}\n                            tickLine={false}\n                            tick={{ fontSize: 12, fill: '#6b7280' }}\n                          />\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1f2937', \n                              border: 'none', \n                              borderRadius: '8px',\n                              color: 'white'\n                            }}\n                          />\n                          <Bar \n                            dataKey=\"reports\" \n                            fill=\"url(#activityGradient)\" \n                            radius={[4, 4, 0, 0]}\n                            name=\"Reports\"\n                          />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"team\" className=\"p-6\">\n              <AdminChatInterface />\n            </TabsContent>\n          </Tabs>\n        </Card>\n\n        {/* Edit Project Modal */}\n        <Dialog open={!!editingProject} onOpenChange={() => setEditingProject(null)}>\n          <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n              <DialogTitle>Edit Project</DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"name\" className=\"text-right\">\n                  Project Name\n                </Label>\n                <Input\n                  id=\"name\"\n                  value={editForm.name}\n                  onChange={(e) => setEditForm({...editForm, name: e.target.value})}\n                  className=\"col-span-3\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"description\" className=\"text-right\">\n                  Description\n                </Label>\n                <Textarea\n                  id=\"description\"\n                  value={editForm.description}\n                  onChange={(e) => setEditForm({...editForm, description: e.target.value})}\n                  className=\"col-span-3\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"status\" className=\"text-right\">\n                  Status\n                </Label>\n                <Select value={editForm.status} onValueChange={(value) => setEditForm({...editForm, status: value})}>\n                  <SelectTrigger className=\"col-span-3\">\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"on-hold\">On Hold</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"progress\" className=\"text-right\">\n                  Progress (%)\n                </Label>\n                <Input\n                  id=\"progress\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  value={editForm.progress}\n                  onChange={(e) => setEditForm({...editForm, progress: parseInt(e.target.value) || 0})}\n                  className=\"col-span-3\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"budget\" className=\"text-right\">\n                  Budget ($)\n                </Label>\n                <Input\n                  id=\"budget\"\n                  type=\"number\"\n                  value={editForm.budget}\n                  onChange={(e) => setEditForm({...editForm, budget: e.target.value})}\n                  className=\"col-span-3\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"budgetUsed\" className=\"text-right\">\n                  Budget Used ($)\n                </Label>\n                <Input\n                  id=\"budgetUsed\"\n                  type=\"number\"\n                  value={editForm.budgetUsed}\n                  onChange={(e) => setEditForm({...editForm, budgetUsed: e.target.value})}\n                  className=\"col-span-3\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"deadline\" className=\"text-right\">\n                  Deadline\n                </Label>\n                <Input\n                  id=\"deadline\"\n                  type=\"date\"\n                  value={editForm.deadline}\n                  onChange={(e) => setEditForm({...editForm, deadline: e.target.value})}\n                  className=\"col-span-3\"\n                />\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setEditingProject(null)}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handleSaveProject}\n                disabled={editProjectMutation.isPending}\n              >\n                {editProjectMutation.isPending ? 'Saving...' : 'Save Changes'}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* View Report Modal */}\n        <Dialog open={!!viewingReport} onOpenChange={() => setViewingReport(null)}>\n          <DialogContent className=\"sm:max-w-[700px] max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"text-xl font-bold\">{viewingReport?.title}</DialogTitle>\n            </DialogHeader>\n            \n            {viewingReport && (\n              <div className=\"space-y-6 py-4\">\n                {/* Basic Info */}\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div>\n                    <Label className=\"text-sm font-semibold text-gray-700\">Status</Label>\n                    <div className=\"mt-1\">\n                      <Badge variant={\n                        viewingReport.status === 'approved' ? 'default' : \n                        viewingReport.status === 'submitted' ? 'secondary' :\n                        viewingReport.status === 'rejected' ? 'destructive' :\n                        'outline'\n                      } className={\n                        viewingReport.status === 'approved' ? 'bg-green-100 text-green-800' :\n                        viewingReport.status === 'submitted' ? 'bg-blue-100 text-blue-800' :\n                        viewingReport.status === 'rejected' ? 'bg-red-100 text-red-800' :\n                        'bg-gray-100 text-gray-800'\n                      }>\n                        {viewingReport.status}\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-sm font-semibold text-gray-700\">Submitted Date</Label>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      {new Date(viewingReport.submittedAt || viewingReport.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Project Information */}\n                <div>\n                  <Label className=\"text-sm font-semibold text-gray-700\">Project</Label>\n                  <p className=\"text-sm text-gray-600 mt-1 bg-gray-50 p-3 rounded-md\">\n                    {viewingReport.projectName || `Project ID: ${viewingReport.projectId}`}\n                  </p>\n                </div>\n\n                {/* Submitted By */}\n                <div>\n                  <Label className=\"text-sm font-semibold text-gray-700\">Submitted By</Label>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    {viewingReport.submittedByName || `Officer ID: ${viewingReport.submittedBy}`}\n                  </p>\n                </div>\n\n                {/* Report Content */}\n                <div>\n                  <Label className=\"text-sm font-semibold text-gray-700\">Report Content</Label>\n                  <div className=\"mt-2 bg-gray-50 p-4 rounded-md border max-h-60 overflow-y-auto\">\n                    <p className=\"text-sm text-gray-700 whitespace-pre-wrap\">\n                      {viewingReport.content || 'No content provided'}\n                    </p>\n                  </div>\n                </div>\n\n                {/* File Attachments */}\n                {viewingReport.files && viewingReport.files.length > 0 && (\n                  <div>\n                    <Label className=\"text-sm font-semibold text-gray-700\">File Attachments</Label>\n                    <div className=\"mt-2 space-y-2\">\n                      {viewingReport.files.map((file: any, index: number) => (\n                        <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded border\">\n                          <span className=\"text-sm text-gray-700\">{file.originalName || file.filename || `File ${index + 1}`}</span>\n                          <Button size=\"sm\" variant=\"outline\">\n                            Download\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Review Information */}\n                {(viewingReport.reviewedBy || viewingReport.reviewNotes) && (\n                  <div className=\"border-t pt-4\">\n                    <Label className=\"text-sm font-semibold text-gray-700\">Review Information</Label>\n                    {viewingReport.reviewedAt && (\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        Reviewed on: {new Date(viewingReport.reviewedAt).toLocaleDateString()}\n                      </p>\n                    )}\n                    {viewingReport.reviewNotes && (\n                      <div className=\"mt-2 bg-yellow-50 p-3 rounded-md border border-yellow-200\">\n                        <p className=\"text-sm text-gray-700\">\n                          <strong>Review Notes:</strong> {viewingReport.reviewNotes}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n            \n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setViewingReport(null)}>\n                Close\n              </Button>\n              {viewingReport?.status === 'submitted' && (\n                <Button onClick={() => {\n                  setViewingReport(null);\n                  window.alert('Review functionality would open here');\n                }}>\n                  Review Report\n                </Button>\n              )}\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":74969},"client/src/components/admin-dashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useState } from \"react\";\nimport { \n  Users, \n  Projector, \n  Clock, \n  Calendar, \n  DollarSign,\n  Target,\n  TrendingUp,\n  FileText,\n  BarChart3,\n  Edit2,\n  Trash2,\n  MoreHorizontal,\n  CheckCircle2,\n  LogOut\n} from \"lucide-react\";\nimport { t } from \"@/lib/i18n\";\nimport OrganizationInfo from \"./organization-info\";\nimport ProjectForm from \"./project-form\";\nimport ReportApproval from \"./report-approval\";\nimport ProgressChart from \"./progress-chart\";\nimport { BulkProjectOperations, BulkReportOperations } from \"./bulk-operations\";\nimport AdelLogo from \"./adel-logo\";\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const [editingProject, setEditingProject] = useState<any>(null);\n  const [editName, setEditName] = useState(\"\");\n  const [editProgress, setEditProgress] = useState([0]);\n  const [editBudget, setEditBudget] = useState(\"\");\n  const [editBudgetUsed, setEditBudgetUsed] = useState(\"\");\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [viewingProject, setViewingProject] = useState<any>(null);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  \n  const { data: projects, isLoading: projectsLoading, refetch } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: reports, isLoading: reportsLoading, refetch: refetchReports } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  const { data: pendingReports } = useQuery({\n    queryKey: [\"/api/reports/pending\"],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  // Update project mutation\n  const updateProjectMutation = useMutation({\n    mutationFn: async ({ projectId, data }: { projectId: number; data: any }) => {\n      await apiRequest(\"PUT\", `/api/projects/${projectId}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Project updated successfully\",\n      });\n      setIsEditDialogOpen(false);\n      setEditingProject(null);\n      refetch();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete project mutation\n  const deleteProjectMutation = useMutation({\n    mutationFn: async (projectId: number) => {\n      await apiRequest(\"DELETE\", `/api/projects/${projectId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Project deleted successfully\",\n      });\n      refetch();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleViewDetails = (project: any) => {\n    console.log(\"View details clicked:\", project);\n    setViewingProject(project);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleEditProject = (project: any) => {\n    console.log(\"Edit project clicked:\", project);\n    setEditingProject(project);\n    setEditName(project.name);\n    setEditProgress([project.progress || 0]);\n    setEditBudget(project.budget?.toString() || \"\");\n    setEditBudgetUsed(project.budgetUsed?.toString() || \"0\");\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateProject = () => {\n    if (!editingProject) return;\n    \n    updateProjectMutation.mutate({\n      projectId: editingProject.id,\n      data: {\n        name: editName,\n        progress: editProgress[0],\n        description: editingProject.description,\n        deadline: editingProject.deadline,\n        budget: editBudget ? parseFloat(editBudget) : null,\n        budgetUsed: editBudgetUsed ? parseFloat(editBudgetUsed) : 0,\n        status: editingProject.status,\n        goals: editingProject.goals,\n      },\n    });\n  };\n\n  const handleDeleteProject = (projectId: number) => {\n    console.log(\"Delete project clicked:\", projectId);\n    if (confirm(\"Are you sure you want to delete this project?\")) {\n      deleteProjectMutation.mutate(projectId);\n    }\n  };\n\n  if (projectsLoading || reportsLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n      <div className=\"space-y-8\">\n        {/* Elegant Header with Glass Effect */}\n        <div className=\"bg-white/80 backdrop-blur-lg border border-white/20 rounded-2xl shadow-xl p-6 mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-2 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl shadow-lg\">\n                <AdelLogo size=\"lg\" className=\"filter brightness-0 invert\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 bg-clip-text text-transparent\">\n                  ADEL\n                </h1>\n                <p className=\"text-slate-600 text-sm font-medium\">Admin Portal</p>\n              </div>\n            </div>\n            <Button\n              onClick={() => window.location.href = '/api/auth/logout'}\n              className=\"bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n\n        {/* Beautiful Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"bg-gradient-to-br from-blue-500 to-blue-600 border-0 shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300\">\n            <CardContent className=\"p-6 text-white\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-3xl font-bold\">\n                    {(stats as any)?.activeProjects || 0}\n                  </p>\n                  <p className=\"text-blue-100 font-medium\">Active Projects</p>\n                </div>\n                <div className=\"p-3 bg-white/20 rounded-xl backdrop-blur-sm\">\n                  <Projector className=\"w-6 h-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n        <Card className=\"border border-gray-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <CheckCircle2 className=\"w-5 h-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {(stats as any)?.completedProjects || 0}\n                </p>\n                <p className=\"text-sm text-gray-600\">Completed Projects</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border border-gray-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-orange-100 rounded-lg\">\n                <Clock className=\"w-5 h-5 text-orange-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {(stats as any)?.pendingReports || 0}\n                </p>\n                <p className=\"text-sm text-gray-600\">Pending Reports</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border border-gray-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <Users className=\"w-5 h-5 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {(stats as any)?.teamMembers || 1}\n                </p>\n                <p className=\"text-sm text-gray-600\">Team Members</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border border-gray-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <DollarSign className=\"w-5 h-5 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  ${(stats as any)?.totalBudget?.toLocaleString() || 0}\n                </p>\n                <p className=\"text-sm text-gray-600\">Total Budget</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4 h-9\">\n          <TabsTrigger value=\"overview\" className=\"text-sm\">Overview</TabsTrigger>\n          <TabsTrigger value=\"projects\" className=\"text-sm\">Projects</TabsTrigger>\n          <TabsTrigger value=\"reports\" className=\"text-sm\">Reports</TabsTrigger>\n          <TabsTrigger value=\"team\" className=\"text-sm\">Team</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <OrganizationInfo />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n            {/* Quick Actions */}\n            <Card className=\"border border-gray-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-gray-700\">Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-3 pt-0 space-y-2\">\n                <ProjectForm />\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start text-xs h-8\">\n                  <Users className=\"w-3 h-3 mr-2\" />\n                  View Team\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start text-xs h-8\">\n                  <BarChart3 className=\"w-3 h-3 mr-2\" />\n                  Analytics\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Recent Projects */}\n            <Card className=\"border border-gray-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-gray-700\">Recent Projects</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-3 pt-0\">\n                {(projects as any[])?.length === 0 ? (\n                  <div className=\"text-center py-6\">\n                    <Projector className=\"w-8 h-8 text-gray-300 mx-auto mb-2\" />\n                    <p className=\"text-xs text-gray-500\">No projects yet</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {(projects as any[])?.slice(0, 3).map((project: any) => (\n                      <div key={project.id} className=\"p-2 bg-gray-50 rounded text-xs\">\n                        <div className=\"font-medium truncate\">{project.name}</div>\n                        <div className=\"text-gray-500\">\n                          {project.deadline ? new Date(project.deadline).toLocaleDateString() : 'No deadline'}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Pending Reports */}\n            <Card className=\"border border-gray-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-gray-700\">Pending Reports</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-3 pt-0\">\n                {(pendingReports as any[])?.length === 0 ? (\n                  <div className=\"text-center py-6\">\n                    <Clock className=\"w-8 h-8 text-gray-300 mx-auto mb-2\" />\n                    <p className=\"text-xs text-gray-500\">All clear</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {(pendingReports as any[])?.slice(0, 3).map((report: any) => (\n                      <div key={report.id} className=\"p-2 bg-orange-50 rounded text-xs border border-orange-200\">\n                        <div className=\"font-medium truncate\">{report.title}</div>\n                        <div className=\"text-orange-600\">\n                          {new Date(report.submittedAt).toLocaleDateString()}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          <ProgressChart />\n        </TabsContent>\n\n        <TabsContent value=\"projects\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">All Projects</h2>\n            <div className=\"flex space-x-2\">\n              <BulkProjectOperations projects={projects as any[] || []} />\n              <ProjectForm />\n            </div>\n          </div>\n          \n          {(projects as any[])?.length === 0 ? (\n            <Card className=\"border border-gray-200\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                    <Projector className=\"w-8 h-8 text-gray-400\" />\n                  </div>\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No projects yet</h3>\n                  <p className=\"text-sm text-gray-600 mb-4\">Create your first project to get started</p>\n                  <ProjectForm />\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-3\">\n              {(projects as any[])?.map((project: any) => (\n                <Card key={project.id} className=\"border border-gray-200\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-semibold text-gray-900 truncate\">{project.name}</h3>\n                        {project.description && (\n                          <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">{project.description}</p>\n                        )}\n                        <div className=\"flex items-center mt-2 text-xs text-gray-500\">\n                          <Calendar className=\"w-3 h-3 mr-1\" />\n                          {project.deadline ? new Date(project.deadline).toLocaleDateString() : 'No deadline'}\n                        </div>\n                        {project.budget && (\n                          <div className=\"mt-2 space-y-1\">\n                            <div className=\"flex items-center justify-between text-xs\">\n                              <span className=\"text-gray-500\">Budget</span>\n                              <span className=\"text-gray-700\">\n                                ${parseFloat(project.budgetUsed || \"0\").toLocaleString()} / ${parseFloat(project.budget).toLocaleString()}\n                              </span>\n                            </div>\n                            <Progress \n                              value={\n                                parseFloat(project.budget) > 0 \n                                  ? Math.min((parseFloat(project.budgetUsed || \"0\") / parseFloat(project.budget)) * 100, 100)\n                                  : 0\n                              } \n                              className=\"h-1.5\"\n                            />\n                            <div className=\"flex justify-between text-xs text-gray-500\">\n                              <span>\n                                {parseFloat(project.budget) > 0 \n                                  ? Math.round((parseFloat(project.budgetUsed || \"0\") / parseFloat(project.budget)) * 100)\n                                  : 0}% used\n                              </span>\n                              <span>\n                                ${Math.max(0, parseFloat(project.budget) - parseFloat(project.budgetUsed || \"0\")).toFixed(2)} remaining\n                              </span>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge variant={project.status === 'completed' ? 'default' : 'secondary'} className=\"text-xs\">\n                          {project.status || 'Active'}\n                        </Badge>\n                        <div className=\"text-right\">\n                          <div className=\"text-xs text-gray-600 mb-1\">{project.progress || 0}%</div>\n                          <Progress value={project.progress || 0} className=\"w-16 h-1.5\" />\n                        </div>\n                        <div className=\"flex space-x-1\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleViewDetails(project)}\n                            className=\"h-8 px-2 text-xs\"\n                          >\n                            <FileText className=\"w-3 h-3 mr-1\" />\n                            View Details\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEditProject(project)}\n                            className=\"h-8 px-2 text-xs\"\n                          >\n                            <Edit2 className=\"w-3 h-3 mr-1\" />\n                            Edit\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteProject(project.id)}\n                            className=\"h-8 px-2 text-xs text-red-600 hover:text-red-700 hover:border-red-300\"\n                          >\n                            <Trash2 className=\"w-3 h-3 mr-1\" />\n                            Delete\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"reports\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">Report Management</h2>\n            <BulkReportOperations reports={reports as any[] || []} />\n          </div>\n          <ReportApproval />\n        </TabsContent>\n\n        <TabsContent value=\"team\" className=\"space-y-4\">\n          <Card className=\"border border-gray-200\">\n            <CardHeader className=\"bg-gray-50 pb-3\">\n              <CardTitle className=\"flex items-center gap-2 text-gray-800\">\n                <Users className=\"h-4 w-4 text-blue-600\" />\n                Team Members\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center py-8\">\n                <div className=\"w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                  <Users className=\"w-6 h-6 text-gray-400\" />\n                </div>\n                <p className=\"text-sm text-gray-600 mb-2\">No team members yet</p>\n                <p className=\"text-xs text-gray-500\">Share your organization code to invite members</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Edit Project Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Edit Project</DialogTitle>\n            <DialogDescription>\n              Update the project name, budget, and progress percentage.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"edit-name\">Project Name</Label>\n              <Input\n                id=\"edit-name\"\n                value={editName}\n                onChange={(e) => setEditName(e.target.value)}\n                placeholder=\"Enter project name\"\n              />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"edit-budget\">Budget ($)</Label>\n              <Input\n                id=\"edit-budget\"\n                type=\"number\"\n                value={editBudget}\n                onChange={(e) => setEditBudget(e.target.value)}\n                placeholder=\"Enter budget amount\"\n                min=\"0\"\n                step=\"0.01\"\n              />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"edit-budget-used\">Budget Used ($)</Label>\n              <Input\n                id=\"edit-budget-used\"\n                type=\"number\"\n                value={editBudgetUsed}\n                onChange={(e) => setEditBudgetUsed(e.target.value)}\n                placeholder=\"Enter amount spent\"\n                min=\"0\"\n                step=\"0.01\"\n              />\n              {editBudget && parseFloat(editBudget) > 0 && (\n                <div className=\"space-y-2\">\n                  <Progress \n                    value={\n                      editBudgetUsed && parseFloat(editBudgetUsed) > 0\n                        ? Math.min((parseFloat(editBudgetUsed) / parseFloat(editBudget)) * 100, 100)\n                        : 0\n                    } \n                    className=\"h-2\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-500\">\n                    <span>\n                      {editBudget && parseFloat(editBudget) > 0\n                        ? Math.round((parseFloat(editBudgetUsed || \"0\") / parseFloat(editBudget)) * 100)\n                        : 0}% used\n                    </span>\n                    <span>\n                      ${Math.max(0, parseFloat(editBudget || \"0\") - parseFloat(editBudgetUsed || \"0\")).toFixed(2)} remaining\n                    </span>\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"edit-progress\">\n                Progress: {editProgress[0]}%\n              </Label>\n              <Slider\n                id=\"edit-progress\"\n                min={0}\n                max={100}\n                step={1}\n                value={editProgress}\n                onValueChange={setEditProgress}\n                className=\"w-full\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500\">\n                <span>0%</span>\n                <span>50%</span>\n                <span>100%</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-2\">\n            <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleUpdateProject}\n              disabled={updateProjectMutation.isPending}\n            >\n              {updateProjectMutation.isPending ? \"Updating...\" : \"Update Project\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Project Details Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle>Project Details</DialogTitle>\n            <DialogDescription>\n              Complete information about {viewingProject?.name}\n            </DialogDescription>\n          </DialogHeader>\n          {viewingProject && (\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Project Name</Label>\n                  <p className=\"text-sm text-gray-600 mt-1\">{viewingProject.name}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <Badge variant=\"secondary\" className=\"mt-1\">\n                    {viewingProject.status || 'Active'}\n                  </Badge>\n                </div>\n              </div>\n              \n              <div>\n                <Label className=\"text-sm font-medium\">Description</Label>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  {viewingProject.description || 'No description provided'}\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Budget</Label>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    {viewingProject.budget ? `$${parseFloat(viewingProject.budget).toLocaleString()}` : 'Not specified'}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Deadline</Label>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    {viewingProject.deadline ? new Date(viewingProject.deadline).toLocaleDateString() : 'No deadline set'}\n                  </p>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"text-sm font-medium\">Progress</Label>\n                <div className=\"mt-2\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className=\"text-sm text-gray-600\">Overall Progress</span>\n                    <span className=\"text-sm font-medium\">{viewingProject.progress || 0}%</span>\n                  </div>\n                  <Progress value={viewingProject.progress || 0} className=\"h-2\" />\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"text-sm font-medium\">Goals & Objectives</Label>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  {viewingProject.goals || 'No goals specified'}\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 text-xs text-gray-500\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Created</Label>\n                  <p className=\"mt-1\">\n                    {viewingProject.createdAt ? new Date(viewingProject.createdAt).toLocaleDateString() : 'Unknown'}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Last Updated</Label>\n                  <p className=\"mt-1\">\n                    {viewingProject.updatedAt ? new Date(viewingProject.updatedAt).toLocaleDateString() : 'Unknown'}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"flex justify-end\">\n            <Button onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":28927},"client/src/components/ai-dashboard-insights.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  TrendingUp, \n  TrendingDown, \n  AlertTriangle, \n  CheckCircle, \n  Clock,\n  Target,\n  Brain,\n  BarChart3,\n  Users,\n  FileText\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useState, useEffect } from \"react\";\n\ninterface AIInsight {\n  type: 'success' | 'warning' | 'info' | 'error';\n  title: string;\n  description: string;\n  action?: string;\n}\n\ninterface ProjectSummary {\n  overallHealth: 'excellent' | 'good' | 'warning' | 'critical';\n  completionTrend: 'improving' | 'stable' | 'declining';\n  riskProjects: number;\n  upcomingDeadlines: number;\n  budgetUtilization: number;\n  teamProductivity: 'high' | 'medium' | 'low';\n  insights: AIInsight[];\n  executiveSummary: string;\n  keyMetrics: {\n    onTimeDelivery: number;\n    budgetEfficiency: number;\n    teamEngagement: number;\n    riskLevel: 'low' | 'medium' | 'high';\n  };\n  recommendations: string[];\n}\n\nexport default function AIDashboardInsights({ userRole }: { userRole: 'admin' | 'officer' }) {\n  const [aiSummary, setAiSummary] = useState<ProjectSummary | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const { data: projects } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: reports } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  // Generate AI insights based on project data\n  useEffect(() => {\n    const generateAIInsights = async () => {\n      if (!projects || !reports) return;\n\n      try {\n        setLoading(true);\n        \n        // Prepare data for AI analysis\n        const projectsData = projects as any[];\n        const reportsData = reports as any[];\n        \n        const analysisData = {\n          totalProjects: projectsData.length,\n          activeProjects: projectsData.filter(p => p.status === 'active').length,\n          completedProjects: projectsData.filter(p => p.status === 'completed').length,\n          overdueProjects: projectsData.filter(p => p.isOverdue).length,\n          averageProgress: projectsData.reduce((acc, p) => acc + (p.progress || 0), 0) / projectsData.length,\n          totalBudget: projectsData.reduce((acc, p) => acc + parseFloat(p.budget || 0), 0),\n          usedBudget: projectsData.reduce((acc, p) => acc + parseFloat(p.budgetUsed || 0), 0),\n          pendingReports: reportsData.filter(r => r.status === 'submitted').length,\n          approvedReports: reportsData.filter(r => r.status === 'approved').length,\n          recentActivity: reportsData.filter(r => {\n            const reportDate = new Date(r.createdAt);\n            const weekAgo = new Date();\n            weekAgo.setDate(weekAgo.getDate() - 7);\n            return reportDate > weekAgo;\n          }).length\n        };\n\n        // Call AI analysis endpoint\n        const response = await apiRequest('POST', '/api/ai/dashboard-insights', analysisData);\n        setAiSummary(response);\n        \n      } catch (error) {\n        console.error('Error generating AI insights:', error);\n        // Fallback to basic analysis\n        generateFallbackInsights();\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const generateFallbackInsights = () => {\n      if (!projects) return;\n      \n      const projectsData = projects as any[];\n      const overdueCount = projectsData.filter(p => p.isOverdue).length;\n      const avgProgress = projectsData.reduce((acc, p) => acc + (p.progress || 0), 0) / projectsData.length;\n      \n      const insights: AIInsight[] = [];\n      \n      if (overdueCount > 0) {\n        insights.push({\n          type: 'warning',\n          title: 'Overdue Projects Detected',\n          description: `${overdueCount} project${overdueCount > 1 ? 's are' : ' is'} past deadline`,\n          action: 'Review project timelines'\n        });\n      }\n      \n      if (avgProgress > 75) {\n        insights.push({\n          type: 'success',\n          title: 'Strong Progress',\n          description: `Projects are ${Math.round(avgProgress)}% complete on average`,\n          action: 'Maintain current pace'\n        });\n      }\n      \n      setAiSummary({\n        overallHealth: overdueCount === 0 ? (avgProgress > 70 ? 'excellent' : 'good') : 'warning',\n        completionTrend: avgProgress > 60 ? 'improving' : 'stable',\n        riskProjects: overdueCount,\n        upcomingDeadlines: projectsData.filter(p => {\n          if (!p.deadline) return false;\n          const deadline = new Date(p.deadline);\n          const nextWeek = new Date();\n          nextWeek.setDate(nextWeek.getDate() + 7);\n          return deadline <= nextWeek && deadline > new Date();\n        }).length,\n        budgetUtilization: 75,\n        teamProductivity: avgProgress > 70 ? 'high' : avgProgress > 40 ? 'medium' : 'low',\n        insights\n      });\n    };\n\n    generateAIInsights();\n  }, [projects, reports]);\n\n  if (loading) {\n    return (\n      <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-100/60 border-0 shadow-lg\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <Brain className=\"w-5 h-5 text-blue-600\" />\n            AI Insights\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-3\">\n            <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!aiSummary) return null;\n\n  const getHealthColor = (health: string) => {\n    switch (health) {\n      case 'excellent': return 'text-green-600 bg-green-50';\n      case 'good': return 'text-blue-600 bg-blue-50';\n      case 'warning': return 'text-orange-600 bg-orange-50';\n      case 'critical': return 'text-red-600 bg-red-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'improving': return <TrendingUp className=\"w-4 h-4 text-green-600\" />;\n      case 'declining': return <TrendingDown className=\"w-4 h-4 text-red-600\" />;\n      default: return <Target className=\"w-4 h-4 text-blue-600\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* AI Summary Card */}\n      <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-100/60 border-0 shadow-lg\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <Brain className=\"w-5 h-5 text-blue-600\" />\n            AI Project Intelligence\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Overall Health */}\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-gray-700\">Overall Health</span>\n            <Badge className={`${getHealthColor(aiSummary.overallHealth)} border-0 font-medium`}>\n              {aiSummary.overallHealth.charAt(0).toUpperCase() + aiSummary.overallHealth.slice(1)}\n            </Badge>\n          </div>\n\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                {getTrendIcon(aiSummary.completionTrend)}\n                <span className=\"text-sm text-gray-600\">Progress Trend</span>\n              </div>\n              <p className=\"text-xs text-gray-500 capitalize\">{aiSummary.completionTrend}</p>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"w-4 h-4 text-orange-500\" />\n                <span className=\"text-sm text-gray-600\">Risk Projects</span>\n              </div>\n              <p className=\"text-xs text-gray-500\">{aiSummary.riskProjects} need attention</p>\n            </div>\n          </div>\n\n          {/* Budget Utilization */}\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Budget Utilization</span>\n              <span className=\"text-sm font-medium\">{aiSummary.budgetUtilization}%</span>\n            </div>\n            <Progress value={aiSummary.budgetUtilization} className=\"h-2\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* AI Insights */}\n      <Card className=\"bg-white border-0 shadow-lg\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-lg\">Smart Recommendations</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {aiSummary.insights.map((insight, index) => (\n            <div key={index} className=\"flex gap-3 p-3 rounded-lg bg-gray-50\">\n              <div className=\"flex-shrink-0 mt-0.5\">\n                {insight.type === 'success' && <CheckCircle className=\"w-4 h-4 text-green-600\" />}\n                {insight.type === 'warning' && <AlertTriangle className=\"w-4 h-4 text-orange-600\" />}\n                {insight.type === 'error' && <AlertTriangle className=\"w-4 h-4 text-red-600\" />}\n                {insight.type === 'info' && <Target className=\"w-4 h-4 text-blue-600\" />}\n              </div>\n              <div className=\"flex-1 space-y-1\">\n                <p className=\"text-sm font-medium text-gray-900\">{insight.title}</p>\n                <p className=\"text-xs text-gray-600\">{insight.description}</p>\n                {insight.action && (\n                  <p className=\"text-xs text-blue-600 font-medium\">{insight.action}</p>\n                )}\n              </div>\n            </div>\n          ))}\n\n          {aiSummary.insights.length === 0 && (\n            <div className=\"text-center py-4\">\n              <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-600\">All projects are on track!</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10247},"client/src/components/ai-report-reviewer.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { CheckCircle, AlertCircle, Brain, TrendingUp, Target, Lightbulb } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ReportAnalysis {\n  overallScore: number;\n  readinessLevel: 'needs-major-improvements' | 'needs-minor-improvements' | 'good' | 'excellent';\n  overallFeedback: string;\n  sectionAnalysis: {\n    section: string;\n    score: number;\n    issues: string[];\n    suggestions: string[];\n  }[];\n  strengthsIdentified: string[];\n  priorityImprovements: string[];\n}\n\ninterface AIReportReviewerProps {\n  reportData: {\n    title: string;\n    content: string;\n    projectId?: number;\n    challengesFaced?: string;\n    nextSteps?: string;\n    budgetNotes?: string;\n  };\n  onAnalysisComplete?: (analysis: ReportAnalysis) => void;\n}\n\nexport default function AIReportReviewer({ reportData, onAnalysisComplete }: AIReportReviewerProps) {\n  const [analysis, setAnalysis] = useState<ReportAnalysis | null>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const { toast } = useToast();\n\n  const analyzeReport = async () => {\n    if (!reportData.title || !reportData.content) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide both title and content before analyzing.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsAnalyzing(true);\n    try {\n      console.log(\"Analyzing report with data:\", reportData);\n      const result = await apiRequest(\"POST\", \"/api/reports/analyze\", {\n        ...reportData,\n        reportId: reportData.projectId, // Use projectId as reportId for existing reports\n        hasAttachments: true, // Force file parsing for existing reports\n      });\n\n      setAnalysis(result);\n      onAnalysisComplete?.(result);\n      \n      toast({\n        title: \"Analysis Complete\",\n        description: getReadinessMessage(result.readinessLevel),\n      });\n    } catch (error) {\n      console.error(\"Analysis error:\", error);\n      toast({\n        title: \"Analysis Failed\",\n        description: \"Unable to analyze report. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const getReadinessMessage = (level: string): string => {\n    switch (level) {\n      case 'excellent':\n        return 'Report is comprehensive and ready for submission!';\n      case 'good':\n        return 'Report is solid with minor areas for enhancement.';\n      case 'needs-minor-improvements':\n        return 'Report needs some refinements before submission.';\n      case 'needs-major-improvements':\n        return 'Report requires significant improvements before submission.';\n      default:\n        return 'Report analysis completed.';\n    }\n  };\n\n  const getScoreColor = (score: number): string => {\n    if (score >= 85) return 'text-green-600';\n    if (score >= 70) return 'text-blue-600';\n    if (score >= 50) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getReadinessColor = (level: string): string => {\n    switch (level) {\n      case 'excellent':\n        return 'bg-green-100 text-green-800 border-green-200';\n      case 'good':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'needs-minor-improvements':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'needs-major-improvements':\n        return 'bg-red-100 text-red-800 border-red-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getProgressColor = (score: number): string => {\n    if (score >= 85) return 'bg-green-500';\n    if (score >= 70) return 'bg-blue-500';\n    if (score >= 50) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Brain className=\"w-5 h-5 text-blue-600\" />\n            <CardTitle className=\"text-lg\">AI Report Assistant</CardTitle>\n          </div>\n          <Button \n            onClick={analyzeReport} \n            disabled={isAnalyzing || !reportData.title || !reportData.content}\n            size=\"sm\"\n          >\n            {isAnalyzing ? \"Analyzing...\" : \"Analyze Report\"}\n          </Button>\n        </div>\n        <CardDescription>\n          Get intelligent feedback on your report before submission\n        </CardDescription>\n      </CardHeader>\n\n      {analysis && (\n        <CardContent className=\"space-y-6\">\n          {/* Overall Score and Readiness */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium\">Overall Score</span>\n                  <span className={`text-2xl font-bold ${getScoreColor(analysis.overallScore)}`}>\n                    {analysis.overallScore}/100\n                  </span>\n                </div>\n                <Progress value={analysis.overallScore} className=\"h-2\" />\n                <div className={`w-full h-2 rounded-full ${getProgressColor(analysis.overallScore)}`} \n                     style={{width: `${analysis.overallScore}%`}} />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium\">Readiness Level</span>\n                  {analysis.readinessLevel === 'excellent' || analysis.readinessLevel === 'good' ? (\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  ) : (\n                    <AlertCircle className=\"w-5 h-5 text-yellow-600\" />\n                  )}\n                </div>\n                <Badge className={getReadinessColor(analysis.readinessLevel)}>\n                  {analysis.readinessLevel.replace('-', ' ').toUpperCase()}\n                </Badge>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Overall Feedback */}\n          <Alert>\n            <Brain className=\"w-4 h-4\" />\n            <AlertDescription className=\"text-sm\">\n              {analysis.overallFeedback}\n            </AlertDescription>\n          </Alert>\n\n          {/* Strengths */}\n          {analysis.strengthsIdentified.length > 0 && (\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center space-x-2\">\n                  <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                  <span>Strengths Identified</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <ul className=\"space-y-1\">\n                  {analysis.strengthsIdentified.map((strength, index) => (\n                    <li key={index} className=\"flex items-start space-x-2 text-sm\">\n                      <CheckCircle className=\"w-4 h-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                      <span>{strength}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Priority Improvements */}\n          {analysis.priorityImprovements.length > 0 && (\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center space-x-2\">\n                  <Target className=\"w-4 h-4 text-orange-600\" />\n                  <span>Priority Improvements</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <ul className=\"space-y-1\">\n                  {analysis.priorityImprovements.map((improvement, index) => (\n                    <li key={index} className=\"flex items-start space-x-2 text-sm\">\n                      <AlertCircle className=\"w-4 h-4 text-orange-600 mt-0.5 flex-shrink-0\" />\n                      <span>{improvement}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Section Analysis */}\n          {analysis.sectionAnalysis.length > 0 && (\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center space-x-2\">\n                  <Lightbulb className=\"w-4 h-4 text-blue-600\" />\n                  <span>Detailed Section Analysis</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0 space-y-4\">\n                {analysis.sectionAnalysis.map((section, index) => (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium text-sm\">{section.section}</h4>\n                      <span className={`text-sm font-semibold ${getScoreColor(section.score)}`}>\n                        {section.score}/100\n                      </span>\n                    </div>\n                    <Progress value={section.score} className=\"h-1.5\" />\n                    \n                    {section.issues.length > 0 && (\n                      <div>\n                        <p className=\"text-xs text-red-600 font-medium mb-1\">Issues Found:</p>\n                        <ul className=\"space-y-0.5\">\n                          {section.issues.map((issue, issueIndex) => (\n                            <li key={issueIndex} className=\"text-xs text-gray-600 flex items-start space-x-1\">\n                              <span className=\"text-red-500 mt-0.5\">•</span>\n                              <span>{issue}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                    \n                    {section.suggestions.length > 0 && (\n                      <div>\n                        <p className=\"text-xs text-blue-600 font-medium mb-1\">Suggestions:</p>\n                        <ul className=\"space-y-0.5\">\n                          {section.suggestions.map((suggestion, suggestionIndex) => (\n                            <li key={suggestionIndex} className=\"text-xs text-gray-600 flex items-start space-x-1\">\n                              <span className=\"text-blue-500 mt-0.5\">•</span>\n                              <span>{suggestion}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                    \n                    {index < analysis.sectionAnalysis.length - 1 && <Separator className=\"mt-3\" />}\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          )}\n        </CardContent>\n      )}\n    </Card>\n  );\n}","size_bytes":11366},"client/src/components/analytics-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  Area,\n  AreaChart\n} from \"recharts\";\nimport { \n  TrendingUp, \n  TrendingDown, \n  Clock, \n  CheckCircle2, \n  AlertTriangle,\n  Target,\n  BarChart3,\n  Calendar,\n  Activity,\n  DollarSign,\n  Banknote\n} from \"lucide-react\";\n\ninterface AnalyticsDashboardProps {\n  userRole: 'admin' | 'officer';\n}\n\nexport default function AnalyticsDashboard({ userRole }: AnalyticsDashboardProps) {\n  const { data: projects } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: reports } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  // Calculate analytics data\n  const calculateAnalytics = () => {\n    if (!projects || !reports) return null;\n\n    const now = new Date();\n    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n    // Project status distribution\n    const projectStatusData = [\n      { name: 'Active', value: projects.filter((p: any) => p.status === 'active').length, color: '#10b981', darkColor: '#059669' },\n      { name: 'Completed', value: projects.filter((p: any) => p.status === 'completed').length, color: '#3b82f6', darkColor: '#2563eb' },\n      { name: 'On Hold', value: projects.filter((p: any) => p.status === 'on-hold').length, color: '#f59e0b', darkColor: '#d97706' },\n      { name: 'Cancelled', value: projects.filter((p: any) => p.status === 'cancelled').length, color: '#ef4444', darkColor: '#dc2626' },\n    ];\n\n    // Report approval trends (last 7 days with current dates)\n    const recentReports = reports.filter((r: any) => \n      new Date(r.submittedAt || r.createdAt) >= thirtyDaysAgo\n    );\n\n    const reportTrendData = [];\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      \n      const dayReports = recentReports.filter((r: any) => {\n        const reportDate = new Date(r.submittedAt || r.createdAt);\n        return reportDate.toDateString() === date.toDateString();\n      });\n\n      // Use current month abbreviations\n      const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      const currentMonth = monthNames[date.getMonth()];\n\n      reportTrendData.push({\n        date: `${currentMonth} ${date.getDate()}`,\n        submitted: dayReports.filter((r: any) => r.status === 'submitted').length,\n        approved: dayReports.filter((r: any) => r.status === 'approved').length,\n        rejected: dayReports.filter((r: any) => r.status === 'rejected').length,\n      });\n    }\n\n    // Budget utilization\n    const budgetData = projects.map((p: any) => ({\n      name: p.name && p.name.length > 15 ? p.name.substring(0, 15) + '...' : p.name || 'Unnamed Project',\n      budget: Number(p.budget) || 0,\n      spent: Number(p.budgetSpent) || 0,\n      remaining: Math.max(0, (Number(p.budget) || 0) - (Number(p.budgetSpent) || 0)),\n      utilization: p.budget && Number(p.budget) > 0 ? Math.round(((Number(p.budgetSpent) || 0) / Number(p.budget)) * 100) : 0\n    }));\n\n    // Progress distribution\n    const progressRanges = [\n      { range: '0-25%', count: 0, color: '#ef4444', label: 'Starting', bgColor: '#fef2f2' },\n      { range: '26-50%', count: 0, color: '#f59e0b', label: 'In Progress', bgColor: '#fffbeb' },\n      { range: '51-75%', count: 0, color: '#eab308', label: 'Good Progress', bgColor: '#fefce8' },\n      { range: '76-99%', count: 0, color: '#22c55e', label: 'Nearly Done', bgColor: '#f0fdf4' },\n      { range: '100%', count: 0, color: '#3b82f6', label: 'Completed', bgColor: '#eff6ff' },\n    ];\n\n    projects.forEach((p: any) => {\n      const progress = p.progress || 0;\n      if (progress <= 25) progressRanges[0].count++;\n      else if (progress <= 50) progressRanges[1].count++;\n      else if (progress <= 75) progressRanges[2].count++;\n      else if (progress < 100) progressRanges[3].count++;\n      else progressRanges[4].count++;\n    });\n\n    return {\n      projectStatusData,\n      reportTrendData,\n      budgetData,\n      progressRanges,\n      totalProjects: projects.length,\n      totalReports: reports.length,\n      approvalRate: reports.length > 0 ? Math.round((reports.filter((r: any) => r.status === 'approved').length / reports.length) * 100) : 0,\n      avgProgress: projects.length > 0 ? Math.round(projects.reduce((acc: number, p: any) => acc + (p.progress || 0), 0) / projects.length) : 0\n    };\n  };\n\n  const analytics = calculateAnalytics();\n\n  if (!analytics) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader className=\"pb-2\">\n                <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-8 bg-muted rounded w-1/2 mb-2\"></div>\n                <div className=\"h-3 bg-muted rounded w-full\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-100 border border-blue-200 shadow-lg hover:shadow-xl transition-all duration-300\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-semibold text-blue-700 flex items-center gap-2\">\n              <div className=\"p-2 bg-blue-600 rounded-lg\">\n                <Target className=\"h-4 w-4 text-white\" />\n              </div>\n              Total Projects\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-blue-900\">{analytics.totalProjects}</div>\n            <p className=\"text-sm text-blue-600 mt-2 font-medium\">\n              {stats?.activeProjects || 0} currently active\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-emerald-50 to-green-100 border border-emerald-200 shadow-lg hover:shadow-xl transition-all duration-300\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-semibold text-emerald-700 flex items-center gap-2\">\n              <div className=\"p-2 bg-emerald-600 rounded-lg\">\n                <Activity className=\"h-4 w-4 text-white\" />\n              </div>\n              Average Progress\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-emerald-900\">{analytics.avgProgress}%</div>\n            <div className=\"mt-3\">\n              <Progress \n                value={analytics.avgProgress} \n                className=\"h-3 bg-emerald-200\" \n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-purple-50 to-violet-100 border border-purple-200 shadow-lg hover:shadow-xl transition-all duration-300\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-semibold text-purple-700 flex items-center gap-2\">\n              <div className=\"p-2 bg-purple-600 rounded-lg\">\n                <BarChart3 className=\"h-4 w-4 text-white\" />\n              </div>\n              Total Reports\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-purple-900\">{analytics.totalReports}</div>\n            <p className=\"text-sm text-purple-600 mt-2 font-medium\">\n              {analytics.approvalRate}% approval rate\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-amber-50 to-orange-100 border border-amber-200 shadow-lg hover:shadow-xl transition-all duration-300\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-semibold text-amber-700 flex items-center gap-2\">\n              <div className=\"p-2 bg-amber-600 rounded-lg\">\n                <CheckCircle2 className=\"h-4 w-4 text-white\" />\n              </div>\n              Completion Rate\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-amber-900\">\n              {analytics.totalProjects > 0 \n                ? Math.round((stats?.completedProjects || 0) / analytics.totalProjects * 100)\n                : 0}%\n            </div>\n            <p className=\"text-sm text-amber-600 mt-2 font-medium\">\n              {stats?.completedProjects || 0} projects completed\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Project Status Distribution */}\n        <Card className=\"bg-white shadow-lg border border-gray-200 hover:shadow-xl transition-all duration-300\">\n          <CardHeader className=\"bg-gradient-to-r from-slate-50 to-gray-100 border-b border-gray-200\">\n            <CardTitle className=\"flex items-center gap-3 text-gray-800 font-semibold\">\n              <div className=\"p-2 bg-indigo-600 rounded-lg\">\n                <Target className=\"h-5 w-5 text-white\" />\n              </div>\n              Project Status Distribution\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"h-72\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={analytics.projectStatusData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={85}\n                    innerRadius={40}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                    label={({ name, value, percent }) => value > 0 ? `${name}: ${value} (${(percent * 100).toFixed(0)}%)` : ''}\n                    labelLine={false}\n                    fontSize={12}\n                    fontWeight=\"600\"\n                  >\n                    {analytics.projectStatusData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} stroke=\"#fff\" strokeWidth={2} />\n                    ))}\n                  </Pie>\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: '#1f2937',\n                      border: 'none',\n                      borderRadius: '8px',\n                      color: '#ffffff',\n                      fontWeight: '500'\n                    }}\n                    labelStyle={{ color: '#ffffff' }}\n                    itemStyle={{ color: '#ffffff' }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Progress Distribution */}\n        <Card className=\"bg-white shadow-lg border border-gray-200 hover:shadow-xl transition-all duration-300\">\n          <CardHeader className=\"bg-gradient-to-r from-slate-50 to-gray-100 border-b border-gray-200\">\n            <CardTitle className=\"flex items-center gap-3 text-gray-800 font-semibold\">\n              <div className=\"p-2 bg-emerald-600 rounded-lg\">\n                <Activity className=\"h-5 w-5 text-white\" />\n              </div>\n              Progress Distribution\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"h-72\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={analytics.progressRanges} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                  <XAxis \n                    dataKey=\"range\" \n                    tick={{ fontSize: 12, fill: '#6b7280', fontWeight: '500' }}\n                    axisLine={{ stroke: '#d1d5db' }}\n                  />\n                  <YAxis \n                    tick={{ fontSize: 12, fill: '#6b7280', fontWeight: '500' }}\n                    axisLine={{ stroke: '#d1d5db' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: '#1f2937',\n                      border: 'none',\n                      borderRadius: '8px',\n                      color: '#ffffff',\n                      fontWeight: '500'\n                    }}\n                    labelStyle={{ color: '#ffffff' }}\n                    itemStyle={{ color: '#ffffff' }}\n                  />\n                  <Bar \n                    dataKey=\"count\" \n                    fill=\"url(#progressGradient)\"\n                    radius={[4, 4, 0, 0]}\n                    stroke=\"#059669\"\n                    strokeWidth={1}\n                  />\n                  <defs>\n                    <linearGradient id=\"progressGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor=\"#10b981\" stopOpacity={0.8}/>\n                      <stop offset=\"100%\" stopColor=\"#059669\" stopOpacity={0.6}/>\n                    </linearGradient>\n                  </defs>\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Report Trends */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Report Trends (7 Days)\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={analytics.reportTrendData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"date\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Area type=\"monotone\" dataKey=\"submitted\" stackId=\"1\" stroke=\"#f59e0b\" fill=\"#f59e0b\" />\n                  <Area type=\"monotone\" dataKey=\"approved\" stackId=\"1\" stroke=\"#22c55e\" fill=\"#22c55e\" />\n                  <Area type=\"monotone\" dataKey=\"rejected\" stackId=\"1\" stroke=\"#ef4444\" fill=\"#ef4444\" />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Budget Utilization */}\n        <Card className=\"bg-white shadow-lg border border-gray-200 hover:shadow-xl transition-all duration-300\">\n          <CardHeader className=\"bg-gradient-to-r from-slate-50 to-gray-100 border-b border-gray-200\">\n            <CardTitle className=\"flex items-center gap-3 text-gray-800 font-semibold\">\n              <div className=\"p-2 bg-green-600 rounded-lg\">\n                <DollarSign className=\"h-5 w-5 text-white\" />\n              </div>\n              Budget Utilization Analysis\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-6\">\n              {/* Budget Chart */}\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={analytics.budgetData} margin={{ top: 15, right: 20, left: 15, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                    <XAxis \n                      dataKey=\"name\" \n                      tick={{ fontSize: 11, fill: '#6b7280', fontWeight: '500' }}\n                      axisLine={{ stroke: '#d1d5db' }}\n                    />\n                    <YAxis \n                      tick={{ fontSize: 11, fill: '#6b7280', fontWeight: '500' }}\n                      axisLine={{ stroke: '#d1d5db' }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      formatter={(value, name) => [`$${Number(value).toLocaleString()}`, name]}\n                      contentStyle={{\n                        backgroundColor: '#1f2937',\n                        border: 'none',\n                        borderRadius: '8px',\n                        color: '#ffffff',\n                        fontWeight: '500',\n                        fontSize: '12px'\n                      }}\n                      labelStyle={{ color: '#ffffff' }}\n                      itemStyle={{ color: '#ffffff' }}\n                    />\n                    <Bar \n                      dataKey=\"budget\" \n                      fill=\"url(#budgetGradient)\" \n                      name=\"Total Budget\"\n                      radius={[3, 3, 0, 0]}\n                      stroke=\"#3b82f6\"\n                      strokeWidth={1}\n                    />\n                    <Bar \n                      dataKey=\"spent\" \n                      fill=\"url(#spentGradient)\" \n                      name=\"Amount Spent\"\n                      radius={[3, 3, 0, 0]}\n                      stroke=\"#10b981\"\n                      strokeWidth={1}\n                    />\n                    <Bar \n                      dataKey=\"remaining\" \n                      fill=\"url(#remainingGradient)\" \n                      name=\"Remaining Budget\"\n                      radius={[3, 3, 0, 0]}\n                      stroke=\"#f59e0b\"\n                      strokeWidth={1}\n                    />\n                    <defs>\n                      <linearGradient id=\"budgetGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity={0.8}/>\n                        <stop offset=\"100%\" stopColor=\"#1e40af\" stopOpacity={0.6}/>\n                      </linearGradient>\n                      <linearGradient id=\"spentGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"#10b981\" stopOpacity={0.8}/>\n                        <stop offset=\"100%\" stopColor=\"#059669\" stopOpacity={0.6}/>\n                      </linearGradient>\n                      <linearGradient id=\"remainingGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"#f59e0b\" stopOpacity={0.8}/>\n                        <stop offset=\"100%\" stopColor=\"#d97706\" stopOpacity={0.6}/>\n                      </linearGradient>\n                    </defs>\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n\n              {/* Budget Utilization Breakdown */}\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-gray-800 text-sm mb-2\">Project Budget Breakdown</h4>\n                {analytics.budgetData.map((project, index) => (\n                  <div key={index} className=\"bg-gray-50 p-3 rounded-lg border border-gray-200 hover:bg-gray-100 transition-colors duration-200\">\n                    <div className=\"flex justify-between items-center mb-1.5\">\n                      <h5 className=\"font-medium text-gray-800 text-sm\">{project.name}</h5>\n                      <span className=\"text-xs font-medium text-gray-600\">\n                        {project.utilization}% utilized\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n                      <div \n                        className=\"bg-gradient-to-r from-emerald-500 to-green-600 h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${Math.min(project.utilization, 100)}%` }}\n                      ></div>\n                    </div>\n                    <div className=\"flex justify-between text-xs text-gray-600\">\n                      <span>Spent: ${project.spent.toLocaleString()}</span>\n                      <span>Budget: ${project.budget.toLocaleString()}</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Insights */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Performance Insights</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">Projects on track</span>\n              <Badge variant=\"outline\" className=\"text-green-600\">\n                {analytics.progressRanges[3].count + analytics.progressRanges[4].count}\n              </Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">Need attention</span>\n              <Badge variant=\"outline\" className=\"text-yellow-600\">\n                {analytics.progressRanges[0].count + analytics.progressRanges[1].count}\n              </Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">Report approval rate</span>\n              <Badge variant=\"outline\" className={analytics.approvalRate > 80 ? \"text-green-600\" : \"text-yellow-600\"}>\n                {analytics.approvalRate}%\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            {analytics.progressRanges[0].count > 0 && (\n              <div className=\"flex items-center gap-2 text-sm text-red-600\">\n                <AlertTriangle className=\"h-4 w-4\" />\n                {analytics.progressRanges[0].count} project(s) need immediate attention\n              </div>\n            )}\n            {stats?.overdueProjects > 0 && (\n              <div className=\"flex items-center gap-2 text-sm text-orange-600\">\n                <Clock className=\"h-4 w-4\" />\n                {stats.overdueProjects} project(s) overdue\n              </div>\n            )}\n            {analytics.approvalRate < 70 && (\n              <div className=\"flex items-center gap-2 text-sm text-yellow-600\">\n                <TrendingDown className=\"h-4 w-4\" />\n                Low report approval rate needs review\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Team Productivity</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">Reports this month</span>\n              <span className=\"font-medium\">\n                {reports?.filter((r: any) => {\n                  const reportDate = new Date(r.createdAt);\n                  const now = new Date();\n                  return reportDate.getMonth() === now.getMonth() && \n                         reportDate.getFullYear() === now.getFullYear();\n                }).length || 0}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">Avg project progress</span>\n              <span className=\"font-medium\">{analytics.avgProgress}%</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm\">Active projects</span>\n              <span className=\"font-medium\">{stats?.activeProjects || 0}</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":23955},"client/src/components/auth-modals.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLogin, useRegister } from \"@/hooks/use-auth\";\nimport { t } from \"@/lib/i18n\";\nimport { Crown, User, X, Rocket, Users } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst adminRegisterSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  organizationName: z.string().min(3, \"Organization name must be at least 3 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst officerRegisterSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  organizationCode: z.string().min(5, \"Organization code is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ninterface AuthModalsProps {\n  showModal: \"login\" | \"register\" | null;\n  onClose: () => void;\n}\n\nexport default function AuthModals({ showModal, onClose }: AuthModalsProps) {\n  const [registrationType, setRegistrationType] = useState<\"admin\" | \"officer\">(\"admin\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const loginMutation = useLogin();\n  const registerMutation = useRegister();\n\n  const loginForm = useForm({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const adminRegisterForm = useForm({\n    resolver: zodResolver(adminRegisterSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      organizationName: \"\",\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const officerRegisterForm = useForm({\n    resolver: zodResolver(officerRegisterSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      organizationCode: \"\",\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const handleLogin = (data: z.infer<typeof loginSchema>) => {\n    loginMutation.mutate(data, {\n      onSuccess: () => {\n        toast({\n          title: \"Success\",\n          description: \"Logged in successfully!\",\n        });\n        onClose();\n      },\n      onError: (error) => {\n        toast({\n          title: \"Error\",\n          description: error.message || \"Login failed\",\n          variant: \"destructive\",\n        });\n      },\n    });\n  };\n\n  const handleAdminRegister = (data: z.infer<typeof adminRegisterSchema>) => {\n    console.log(\"Admin registration data:\", { type: \"admin\", ...data });\n    registerMutation.mutate(\n      { type: \"admin\", ...data },\n      {\n        onSuccess: (response) => {\n          console.log(\"Admin registration response:\", response);\n          toast({\n            title: \"Admin Account Created Successfully!\",\n            description: `Welcome Administrator! Your organization \"${response.organization?.name}\" has been created with code: ${response.organization?.code}`,\n            duration: 10000,\n          });\n          \n          // Show detailed success message immediately\n          alert(`Admin Account Created Successfully!\\n\\nWelcome to ADEL Administrator Panel!\\n\\nOrganization: ${response.organization?.name}\\nOrganization Code: ${response.organization?.code}\\nYour Role: Administrator\\n\\nShare the organization code with team members so they can join as officers.`);\n          \n          onClose();\n          \n          // Force page refresh to ensure admin interface loads\n          setTimeout(() => {\n            window.location.reload();\n          }, 500);\n        },\n        onError: (error) => {\n          console.error(\"Admin registration error:\", error);\n          toast({\n            title: \"Admin Registration Failed\",\n            description: error.message || \"Failed to create admin account\",\n            variant: \"destructive\",\n          });\n        },\n      }\n    );\n  };\n\n  const handleOfficerRegister = (data: z.infer<typeof officerRegisterSchema>) => {\n    registerMutation.mutate(\n      { type: \"officer\", ...data },\n      {\n        onSuccess: () => {\n          toast({\n            title: \"Success\",\n            description: \"Successfully joined organization!\",\n          });\n          onClose();\n        },\n        onError: (error) => {\n          toast({\n            title: \"Error\",\n            description: error.message || \"Registration failed\",\n            variant: \"destructive\",\n          });\n        },\n      }\n    );\n  };\n\n  return (\n    <>\n      {/* Login Modal */}\n      <Dialog open={showModal === \"login\"} onOpenChange={(open) => !open && onClose()}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center\">\n              <div className=\"mb-2\">{t('auth.welcomeBack')}</div>\n              <p className=\"text-sm font-normal text-gray-600\">{t('auth.signInSubtitle')}</p>\n            </DialogTitle>\n          </DialogHeader>\n          \n          <form onSubmit={loginForm.handleSubmit(handleLogin)} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"email\">{t('auth.email')}</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...loginForm.register(\"email\")}\n                className=\"mt-1\"\n                placeholder=\"Enter your email\"\n              />\n              {loginForm.formState.errors.email && (\n                <p className=\"text-sm text-red-500 mt-1\">\n                  {loginForm.formState.errors.email.message}\n                </p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\">{t('auth.password')}</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                {...loginForm.register(\"password\")}\n                className=\"mt-1\"\n                placeholder=\"Enter your password\"\n              />\n              {loginForm.formState.errors.password && (\n                <p className=\"text-sm text-red-500 mt-1\">\n                  {loginForm.formState.errors.password.message}\n                </p>\n              )}\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <label className=\"flex items-center\">\n                <input type=\"checkbox\" className=\"rounded border-gray-300\" />\n                <span className=\"ml-2 text-sm text-gray-600\">{t('auth.rememberMe')}</span>\n              </label>\n              <a href=\"#\" className=\"text-sm text-blue-500 hover:text-blue-600\">\n                {t('auth.forgotPassword')}\n              </a>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-blue-500 hover:bg-blue-600\"\n              disabled={loginMutation.isPending}\n            >\n              {loginMutation.isPending ? \"Signing in...\" : t('auth.signIn')}\n            </Button>\n          </form>\n          \n          <div className=\"text-center\">\n            <p className=\"text-gray-600\">\n              {t('auth.dontHaveAccount')}\n              <button \n                className=\"text-blue-500 hover:text-blue-600 font-medium ml-1\"\n                onClick={() => {\n                  onClose();\n                  setTimeout(() => window.dispatchEvent(new CustomEvent('showRegisterModal')), 100);\n                }}\n              >\n                {t('auth.signUpHere')}\n              </button>\n            </p>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Registration Modal */}\n      <Dialog open={showModal === \"register\"} onOpenChange={(open) => !open && onClose()}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center\">\n              <div className=\"mb-2\">{t('auth.getStarted')}</div>\n              <p className=\"text-sm font-normal text-gray-600\">{t('auth.chooseType')}</p>\n            </DialogTitle>\n          </DialogHeader>\n          \n          {/* Registration Type Selection */}\n          <div className=\"grid grid-cols-2 gap-4 mb-6\">\n            <Card \n              className={`cursor-pointer transition-all duration-200 ${\n                registrationType === \"admin\" \n                  ? \"border-red-500 bg-red-50 shadow-lg ring-2 ring-red-200\" \n                  : \"border-gray-300 hover:border-red-400 hover:shadow-md\"\n              }`}\n              onClick={() => setRegistrationType(\"admin\")}\n            >\n              <CardContent className=\"p-6 text-center\">\n                <Crown className={`w-10 h-10 mx-auto mb-3 ${registrationType === \"admin\" ? \"text-red-600\" : \"text-red-500\"}`} />\n                <div className=\"font-bold text-lg text-gray-900\">{t('auth.admin')}</div>\n                <div className=\"text-sm text-gray-600 mt-1\">{t('auth.adminDesc')}</div>\n                <div className=\"text-xs font-medium text-red-600 mt-2\">Create Organization</div>\n              </CardContent>\n            </Card>\n            \n            <Card \n              className={`cursor-pointer transition-all duration-200 ${\n                registrationType === \"officer\" \n                  ? \"border-blue-500 bg-blue-50 shadow-lg ring-2 ring-blue-200\" \n                  : \"border-gray-300 hover:border-blue-400 hover:shadow-md\"\n              }`}\n              onClick={() => setRegistrationType(\"officer\")}\n            >\n              <CardContent className=\"p-6 text-center\">\n                <User className={`w-10 h-10 mx-auto mb-3 ${registrationType === \"officer\" ? \"text-blue-600\" : \"text-blue-500\"}`} />\n                <div className=\"font-bold text-lg text-gray-900\">{t('auth.officer')}</div>\n                <div className=\"text-sm text-gray-600 mt-1\">{t('auth.officerDesc')}</div>\n                <div className=\"text-xs font-medium text-blue-600 mt-2\">Join Organization</div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Admin Registration Form */}\n          {registrationType === \"admin\" && (\n            <form onSubmit={adminRegisterForm.handleSubmit(handleAdminRegister)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"adminFirstName\">{t('auth.firstName')}</Label>\n                  <Input\n                    id=\"adminFirstName\"\n                    {...adminRegisterForm.register(\"firstName\")}\n                    className=\"mt-1\"\n                    placeholder=\"John\"\n                  />\n                  {adminRegisterForm.formState.errors.firstName && (\n                    <p className=\"text-sm text-red-500 mt-1\">\n                      {adminRegisterForm.formState.errors.firstName.message}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"adminLastName\">{t('auth.lastName')}</Label>\n                  <Input\n                    id=\"adminLastName\"\n                    {...adminRegisterForm.register(\"lastName\")}\n                    className=\"mt-1\"\n                    placeholder=\"Doe\"\n                  />\n                  {adminRegisterForm.formState.errors.lastName && (\n                    <p className=\"text-sm text-red-500 mt-1\">\n                      {adminRegisterForm.formState.errors.lastName.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"organizationName\">{t('auth.organizationName')}</Label>\n                <Input\n                  id=\"organizationName\"\n                  {...adminRegisterForm.register(\"organizationName\")}\n                  className=\"mt-1\"\n                  placeholder=\"Your NGO Name\"\n                />\n                {adminRegisterForm.formState.errors.organizationName && (\n                  <p className=\"text-sm text-red-500 mt-1\">\n                    {adminRegisterForm.formState.errors.organizationName.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"adminEmail\">{t('auth.email')}</Label>\n                <Input\n                  id=\"adminEmail\"\n                  type=\"email\"\n                  {...adminRegisterForm.register(\"email\")}\n                  className=\"mt-1\"\n                  placeholder=\"admin@ngo.org\"\n                />\n                {adminRegisterForm.formState.errors.email && (\n                  <p className=\"text-sm text-red-500 mt-1\">\n                    {adminRegisterForm.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"adminPassword\">{t('auth.password')}</Label>\n                <Input\n                  id=\"adminPassword\"\n                  type=\"password\"\n                  {...adminRegisterForm.register(\"password\")}\n                  className=\"mt-1\"\n                  placeholder=\"Create secure password\"\n                />\n                {adminRegisterForm.formState.errors.password && (\n                  <p className=\"text-sm text-red-500 mt-1\">\n                    {adminRegisterForm.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full bg-red-600 hover:bg-red-700 text-white font-semibold\"\n                disabled={registerMutation.isPending}\n              >\n                <Crown className=\"w-4 h-4 mr-2\" />\n                {registerMutation.isPending ? \"Creating Admin Account...\" : \"Create Admin Account & Organization\"}\n              </Button>\n            </form>\n          )}\n          \n          {/* Officer Registration Form */}\n          {registrationType === \"officer\" && (\n            <form onSubmit={officerRegisterForm.handleSubmit(handleOfficerRegister)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"officerFirstName\">{t('auth.firstName')}</Label>\n                  <Input\n                    id=\"officerFirstName\"\n                    {...officerRegisterForm.register(\"firstName\")}\n                    className=\"mt-1\"\n                    placeholder=\"Jane\"\n                  />\n                  {officerRegisterForm.formState.errors.firstName && (\n                    <p className=\"text-sm text-red-500 mt-1\">\n                      {officerRegisterForm.formState.errors.firstName.message}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"officerLastName\">{t('auth.lastName')}</Label>\n                  <Input\n                    id=\"officerLastName\"\n                    {...officerRegisterForm.register(\"lastName\")}\n                    className=\"mt-1\"\n                    placeholder=\"Smith\"\n                  />\n                  {officerRegisterForm.formState.errors.lastName && (\n                    <p className=\"text-sm text-red-500 mt-1\">\n                      {officerRegisterForm.formState.errors.lastName.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"organizationCode\">{t('auth.organizationCode')}</Label>\n                <Input\n                  id=\"organizationCode\"\n                  {...officerRegisterForm.register(\"organizationCode\")}\n                  className=\"mt-1 font-mono\"\n                  placeholder=\"NGO-1234\"\n                />\n                {officerRegisterForm.formState.errors.organizationCode && (\n                  <p className=\"text-sm text-red-500 mt-1\">\n                    {officerRegisterForm.formState.errors.organizationCode.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"officerEmail\">{t('auth.email')}</Label>\n                <Input\n                  id=\"officerEmail\"\n                  type=\"email\"\n                  {...officerRegisterForm.register(\"email\")}\n                  className=\"mt-1\"\n                  placeholder=\"officer@email.com\"\n                />\n                {officerRegisterForm.formState.errors.email && (\n                  <p className=\"text-sm text-red-500 mt-1\">\n                    {officerRegisterForm.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"officerPassword\">{t('auth.password')}</Label>\n                <Input\n                  id=\"officerPassword\"\n                  type=\"password\"\n                  {...officerRegisterForm.register(\"password\")}\n                  className=\"mt-1\"\n                  placeholder=\"Create secure password\"\n                />\n                {officerRegisterForm.formState.errors.password && (\n                  <p className=\"text-sm text-red-500 mt-1\">\n                    {officerRegisterForm.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold\"\n                disabled={registerMutation.isPending}\n              >\n                <Users className=\"w-4 h-4 mr-2\" />\n                {registerMutation.isPending ? \"Creating Officer Account...\" : \"Create Officer Account & Join Organization\"}\n              </Button>\n            </form>\n          )}\n          \n          <div className=\"text-center\">\n            <p className=\"text-gray-600\">\n              {t('auth.alreadyHaveAccount')}\n              <button \n                className=\"text-blue-500 hover:text-blue-600 font-medium ml-1\"\n                onClick={() => {\n                  onClose();\n                  setTimeout(() => window.dispatchEvent(new CustomEvent('showLoginModal')), 100);\n                }}\n              >\n                {t('auth.signInHere')}\n              </button>\n            </p>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":18900},"client/src/components/bulk-operations.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Trash2, CheckCircle, XCircle, Download, Upload, FileText } from \"lucide-react\";\n\ninterface BulkProjectOperationsProps {\n  projects: any[];\n  onRefresh?: () => void;\n}\n\nexport function BulkProjectOperations({ projects, onRefresh }: BulkProjectOperationsProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedProjects, setSelectedProjects] = useState<number[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const bulkDeleteMutation = useMutation({\n    mutationFn: async (projectIds: number[]) => {\n      const response = await apiRequest(\"DELETE\", \"/api/projects/bulk\", { projectIds });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: `${selectedProjects.length} projects deleted successfully`,\n      });\n      setSelectedProjects([]);\n      setIsOpen(false);\n      onRefresh?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete projects\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkStatusUpdateMutation = useMutation({\n    mutationFn: async ({ projectIds, status }: { projectIds: number[]; status: string }) => {\n      const response = await apiRequest(\"PATCH\", \"/api/projects/bulk-status\", { projectIds, status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: `${selectedProjects.length} projects updated successfully`,\n      });\n      setSelectedProjects([]);\n      onRefresh?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update projects\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const exportProjectsMutation = useMutation({\n    mutationFn: async (projectIds: number[]) => {\n      const response = await fetch(\"/api/projects/export\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ projectIds }),\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to export projects\");\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `projects-export-${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Projects exported successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to export projects\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedProjects(projects.map(p => p.id));\n    } else {\n      setSelectedProjects([]);\n    }\n  };\n\n  const handleSelectProject = (projectId: number, checked: boolean) => {\n    if (checked) {\n      setSelectedProjects([...selectedProjects, projectId]);\n    } else {\n      setSelectedProjects(selectedProjects.filter(id => id !== projectId));\n    }\n  };\n\n  const handleBulkDelete = () => {\n    if (selectedProjects.length === 0) return;\n    bulkDeleteMutation.mutate(selectedProjects);\n  };\n\n  const handleBulkStatusUpdate = (status: string) => {\n    if (selectedProjects.length === 0) return;\n    bulkStatusUpdateMutation.mutate({ projectIds: selectedProjects, status });\n  };\n\n  const handleExport = () => {\n    const projectIds = selectedProjects.length > 0 ? selectedProjects : projects.map(p => p.id);\n    exportProjectsMutation.mutate(projectIds);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" className=\"mb-4\">\n          <FileText className=\"w-4 h-4 mr-2\" />\n          Bulk Operations\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Bulk Project Operations</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {/* Selection Controls */}\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center space-x-4\">\n              <Checkbox\n                checked={selectedProjects.length === projects.length && projects.length > 0}\n                onCheckedChange={handleSelectAll}\n              />\n              <span className=\"text-sm font-medium\">\n                Select All ({selectedProjects.length} of {projects.length} selected)\n              </span>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleExport}\n                disabled={exportProjectsMutation.isPending}\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n              \n              <Select onValueChange={handleBulkStatusUpdate}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Update Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"on-hold\">On Hold</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={handleBulkDelete}\n                disabled={selectedProjects.length === 0 || bulkDeleteMutation.isPending}\n              >\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Delete Selected\n              </Button>\n            </div>\n          </div>\n\n          {/* Project List */}\n          <div className=\"space-y-2\">\n            {projects.map((project) => (\n              <Card key={project.id} className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <Checkbox\n                    checked={selectedProjects.includes(project.id)}\n                    onCheckedChange={(checked) => handleSelectProject(project.id, checked as boolean)}\n                  />\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium\">{project.name}</h4>\n                      <Badge variant={project.status === \"active\" ? \"default\" : \"secondary\"}>\n                        {project.status || \"active\"}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">{project.description}</p>\n                    <div className=\"flex items-center space-x-4 mt-2 text-xs text-gray-500\">\n                      {project.budget && <span>Budget: ${project.budget}</span>}\n                      {project.deadline && (\n                        <span>Deadline: {new Date(project.deadline).toLocaleDateString()}</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ninterface BulkReportOperationsProps {\n  reports: any[];\n  onRefresh?: () => void;\n}\n\nexport function BulkReportOperations({ reports, onRefresh }: BulkReportOperationsProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedReports, setSelectedReports] = useState<number[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const bulkApproveMutation = useMutation({\n    mutationFn: async (reportIds: number[]) => {\n      const response = await apiRequest(\"PATCH\", \"/api/reports/bulk-approve\", { reportIds });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: `${selectedReports.length} reports approved successfully`,\n      });\n      setSelectedReports([]);\n      onRefresh?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve reports\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkRejectMutation = useMutation({\n    mutationFn: async (reportIds: number[]) => {\n      const response = await apiRequest(\"PATCH\", \"/api/reports/bulk-reject\", { reportIds });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: `${selectedReports.length} reports rejected successfully`,\n      });\n      setSelectedReports([]);\n      onRefresh?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject reports\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const exportReportsMutation = useMutation({\n    mutationFn: async (reportIds: number[]) => {\n      const response = await fetch(\"/api/reports/export\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ reportIds }),\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to export reports\");\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `reports-export-${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Reports exported successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to export reports\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const pendingReports = reports.filter(r => r.status === \"pending\");\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedReports(pendingReports.map(r => r.id));\n    } else {\n      setSelectedReports([]);\n    }\n  };\n\n  const handleSelectReport = (reportId: number, checked: boolean) => {\n    if (checked) {\n      setSelectedReports([...selectedReports, reportId]);\n    } else {\n      setSelectedReports(selectedReports.filter(id => id !== reportId));\n    }\n  };\n\n  const handleBulkApprove = () => {\n    if (selectedReports.length === 0) return;\n    bulkApproveMutation.mutate(selectedReports);\n  };\n\n  const handleBulkReject = () => {\n    if (selectedReports.length === 0) return;\n    bulkRejectMutation.mutate(selectedReports);\n  };\n\n  const handleExport = () => {\n    const reportIds = selectedReports.length > 0 ? selectedReports : reports.map(r => r.id);\n    exportReportsMutation.mutate(reportIds);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" className=\"mb-4\">\n          <FileText className=\"w-4 h-4 mr-2\" />\n          Bulk Report Operations\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Bulk Report Operations</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {/* Selection Controls */}\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center space-x-4\">\n              <Checkbox\n                checked={selectedReports.length === pendingReports.length && pendingReports.length > 0}\n                onCheckedChange={handleSelectAll}\n              />\n              <span className=\"text-sm font-medium\">\n                Select All Pending ({selectedReports.length} of {pendingReports.length} selected)\n              </span>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleExport}\n                disabled={exportReportsMutation.isPending}\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n              \n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                onClick={handleBulkApprove}\n                disabled={selectedReports.length === 0 || bulkApproveMutation.isPending}\n              >\n                <CheckCircle className=\"w-4 h-4 mr-2\" />\n                Approve Selected\n              </Button>\n              \n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={handleBulkReject}\n                disabled={selectedReports.length === 0 || bulkRejectMutation.isPending}\n              >\n                <XCircle className=\"w-4 h-4 mr-2\" />\n                Reject Selected\n              </Button>\n            </div>\n          </div>\n\n          {/* Report List */}\n          <div className=\"space-y-2\">\n            {pendingReports.map((report) => (\n              <Card key={report.id} className=\"p-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <Checkbox\n                    checked={selectedReports.includes(report.id)}\n                    onCheckedChange={(checked) => handleSelectReport(report.id, checked as boolean)}\n                  />\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"font-medium\">{report.title}</h4>\n                      <Badge variant=\"secondary\">Pending</Badge>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">{report.content?.substring(0, 100)}...</p>\n                    <div className=\"flex items-center space-x-4 mt-2 text-xs text-gray-500\">\n                      <span>Submitted: {new Date(report.submittedAt || report.createdAt).toLocaleDateString()}</span>\n                      {report.projectName && <span>Project: {report.projectName}</span>}\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n          \n          {pendingReports.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No pending reports available for bulk operations\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":16372},"client/src/components/chat-interface.tsx":{"content":"import React, { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Send, MessageCircle, AlertCircle, AlertTriangle, Paperclip, File, Image, X, Upload, CheckCircle, FileText, Download } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Message {\n  id: number;\n  content: string;\n  senderId: number;\n  recipientId: number;\n  organizationId: number;\n  urgency: string;\n  isRead: boolean;\n  createdAt: string;\n  fileUrl?: string;\n  fileName?: string;\n  fileSize?: number;\n  fileType?: string;\n  senderName?: string;\n  senderRole?: string;\n}\n\ninterface ChatInterfaceProps {\n  recipientId?: number;\n  recipientName?: string;\n}\n\nexport default function ChatInterface({ recipientId, recipientName }: ChatInterfaceProps) {\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadSuccess, setUploadSuccess] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const getUrgencyConfig = (urgency: string) => {\n    switch (urgency) {\n      case \"low\":\n        return {\n          color: \"text-green-600\",\n          bgColor: \"bg-green-50\",\n          borderColor: \"border-green-200\",\n          icon: MessageCircle,\n          label: \"Low Priority\"\n        };\n      case \"high\":\n        return {\n          color: \"text-orange-600\",\n          bgColor: \"bg-orange-50\",\n          borderColor: \"border-orange-200\",\n          icon: AlertCircle,\n          label: \"High Priority\"\n        };\n      case \"urgent\":\n        return {\n          color: \"text-red-600\",\n          bgColor: \"bg-red-50\",\n          borderColor: \"border-red-200\",\n          icon: AlertTriangle,\n          label: \"Urgent\"\n        };\n      default:\n        return {\n          color: \"text-blue-600\",\n          bgColor: \"bg-blue-50\",\n          borderColor: \"border-blue-200\",\n          icon: MessageCircle,\n          label: \"Normal\"\n        };\n    }\n  };\n\n  const { data: messages = [], isLoading } = useQuery<Message[]>({\n    queryKey: [\"/api/messages\"],\n    refetchInterval: 3000, // Auto-refresh every 3 seconds\n  });\n\n  const { data: organizationMembers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/organization/members\"],\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: { content: string; recipientId: number }) => {\n      console.log(\"Sending message data:\", messageData);\n      const response = await apiRequest(\"POST\", \"/api/messages\", messageData);\n      const result = await response.json();\n      console.log(\"Message response:\", result);\n      return result;\n    },\n    onSuccess: () => {\n      setNewMessage(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n      scrollToBottom();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      console.log('File selected:', file.name, file.size, file.type);\n      setSelectedFile(file);\n      toast({\n        title: \"File selected\",\n        description: `${file.name} ready to send`,\n      });\n    }\n  };\n\n  const handleRemoveFile = () => {\n    setSelectedFile(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const clearSelectedFile = () => {\n    setSelectedFile(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('=== SEND MESSAGE DEBUG ===');\n    console.log('selectedFile:', selectedFile);\n    console.log('newMessage:', newMessage.trim());\n    console.log('user:', user);\n    console.log('organizationMembers:', organizationMembers);\n    \n    let targetRecipientId = recipientId;\n    console.log('initial targetRecipientId:', targetRecipientId);\n    \n    if (!newMessage.trim() && !selectedFile) {\n      console.log('Nothing to send - no message and no file');\n      return;\n    }\n\n    // If no specific recipient, determine based on user role\n    if (!targetRecipientId) {\n      if (user?.role === \"officer\") {\n        // Officer sends to admin\n        const admin = organizationMembers.find((member: any) => member.role === \"admin\");\n        if (!admin) {\n          toast({\n            title: \"Error\",\n            description: \"Admin not found\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n        targetRecipientId = admin.id;\n      } else if (user?.role === \"admin\") {\n        // Admin sends to the first officer they find in filtered messages, or first officer in org\n        const recentOfficer = filteredMessages.find(msg => msg.senderId !== user.id);\n        if (recentOfficer) {\n          targetRecipientId = recentOfficer.senderId;\n        } else {\n          // Find first officer in organization\n          const officer = organizationMembers.find((member: any) => member.role === \"officer\");\n          if (officer) {\n            targetRecipientId = officer.id;\n          } else {\n            toast({\n              title: \"Error\",\n              description: \"No officers found to message\",\n              variant: \"destructive\",\n            });\n            return;\n          }\n        }\n      }\n    }\n\n    if (selectedFile) {\n      // Handle file upload\n      console.log('=== FILE UPLOAD PATH ===');\n      console.log('File details:', {\n        name: selectedFile.name,\n        size: selectedFile.size,\n        type: selectedFile.type\n      });\n      setIsUploading(true);\n      try {\n        if (!targetRecipientId) {\n          toast({\n            title: \"Error\",\n            description: \"No recipient selected\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n\n        // Simulate upload progress\n        setUploadProgress(0);\n        const progressInterval = setInterval(() => {\n          setUploadProgress(prev => {\n            if (prev >= 90) {\n              clearInterval(progressInterval);\n              return 90;\n            }\n            return prev + 10;\n          });\n        }, 100);\n\n        const formData = new FormData();\n        formData.append('file', selectedFile);\n        formData.append('recipientId', targetRecipientId.toString());\n        formData.append('content', newMessage.trim() || `📎 Document: ${selectedFile.name}`);\n\n        console.log('Sending to /api/messages/upload...');\n        const response = await apiRequest('POST', '/api/messages/upload', formData);\n        console.log('✅ File upload successful:', response);\n        \n        // Complete progress and show success\n        clearInterval(progressInterval);\n        setUploadProgress(100);\n        setUploadSuccess(true);\n\n        // Wait briefly to show success animation\n        setTimeout(() => {\n          setNewMessage(\"\");\n          setSelectedFile(null);\n          setUploadSuccess(false);\n          setUploadProgress(0);\n          if (fileInputRef.current) {\n            fileInputRef.current.value = '';\n          }\n        }, 1500);\n\n        queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n        \n        toast({\n          title: \"Success\",\n          description: \"File sent successfully\",\n        });\n      } catch (error) {\n        console.error('File upload error:', error);\n        setUploadSuccess(false);\n        setUploadProgress(0);\n        toast({\n          title: \"Error\", \n          description: \"Failed to send file\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsUploading(false);\n      }\n    } else {\n      // Handle text message\n      if (!targetRecipientId) {\n        toast({\n          title: \"Error\",\n          description: \"No recipient selected\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      console.log(\"About to send message:\", {\n        content: newMessage,\n        recipientId: targetRecipientId,\n      });\n      \n      sendMessageMutation.mutate({\n        content: newMessage,\n        recipientId: targetRecipientId,\n      });\n    }\n  };\n\n  // Get user name by ID\n  const getUserName = (userId: number) => {\n    const member = organizationMembers.find((m: any) => m.id === userId);\n    return member ? `${member.firstName || \"\"} ${member.lastName || \"\"}`.trim() || member.email : `User #${userId}`;\n  };\n\n  // Get user role by ID\n  const getUserRole = (userId: number) => {\n    const member = organizationMembers.find((m: any) => m.id === userId);\n    return member?.role || \"user\";\n  };\n\n  // Filter messages based on current context\n  const filteredMessages = messages.filter((message: Message) => {\n    if (!user) return false;\n    \n    if (recipientId) {\n      // Show messages between current user and specific recipient\n      return (\n        (message.senderId === user.id && message.recipientId === recipientId) ||\n        (message.senderId === recipientId && message.recipientId === user.id)\n      );\n    } else {\n      // Show all messages involving current user\n      return message.senderId === user.id || message.recipientId === user.id;\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">Loading messages...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"h-[500px] flex flex-col\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <MessageCircle className=\"h-5 w-5\" />\n          {recipientName ? `Chat with ${recipientName}` : \"Messages\"}\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"flex-1 flex flex-col p-0\">\n        {/* Messages Container - Limited to 4 messages with scroll */}\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-3 max-h-[320px]\">\n          {filteredMessages.length === 0 ? (\n            <div className=\"text-center text-gray-500 py-8\">\n              No messages yet. Start a conversation!\n            </div>\n          ) : (\n            filteredMessages\n              .sort((a: Message, b: Message) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())\n              .slice(-20) // Show last 20 messages for performance\n              .map((message: Message) => {\n                const isCurrentUser = message.senderId === user?.id;\n                const senderName = getUserName(message.senderId);\n                const senderRole = getUserRole(message.senderId);\n                const urgencyConfig = getUrgencyConfig(message.urgency || \"normal\");\n                const UrgencyIcon = urgencyConfig.icon;\n                \n                return (\n                  <MessageComponent \n                    key={message.id}\n                    message={message}\n                    isCurrentUser={isCurrentUser}\n                    senderName={senderName}\n                    senderRole={senderRole}\n                    urgencyConfig={urgencyConfig}\n                    UrgencyIcon={urgencyConfig.icon}\n                    user={user}\n                    onMarkAsRead={() => {\n                      if (!message.isRead && message.recipientId === user?.id) {\n                        apiRequest('PATCH', `/api/messages/${message.id}/read`, {})\n                          .then(() => {\n                            queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n                            queryClient.invalidateQueries({ queryKey: [\"/api/messages/unread\"] });\n                          })\n                          .catch(console.error);\n                      }\n                    }}\n                  />\n                );\n              })\n          )}\n        </div>\n\n        {/* Message Form */}\n        <div className=\"border-t p-4\">\n          <form onSubmit={handleSendMessage} className=\"space-y-3\">\n            <div className=\"flex gap-2 items-end\">\n              <div className=\"flex-1\">\n                <Input\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  placeholder=\"Type your message...\"\n                  className=\"resize-none\"\n                />\n              </div>\n              \n              {/* File Upload Button */}\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => fileInputRef.current?.click()}\n                className=\"shrink-0 px-3\"\n                disabled={isUploading}\n              >\n                <Paperclip className=\"h-4 w-4\" />\n              </Button>\n              \n              <Button type=\"submit\" size=\"sm\" disabled={isUploading || (!newMessage.trim() && !selectedFile)}>\n                <Send className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            {/* Hidden file input */}\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n              accept=\"*\"\n            />\n\n            {/* Selected file preview */}\n            {selectedFile && (\n              <div className=\"flex items-center justify-between bg-gray-50 p-2 rounded border\">\n                <div className=\"flex items-center gap-2\">\n                  <File className=\"h-4 w-4 text-gray-500\" />\n                  <span className=\"text-sm text-gray-700\">{selectedFile.name}</span>\n                  <span className=\"text-xs text-gray-500\">\n                    ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)\n                  </span>\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={clearSelectedFile}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            )}\n          </form>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Separate component for individual messages to handle useEffect properly\nfunction MessageComponent({ \n  message, \n  isCurrentUser, \n  senderName, \n  senderRole, \n  urgencyConfig, \n  UrgencyIcon,\n  user,\n  onMarkAsRead \n}: {\n  message: Message;\n  isCurrentUser: boolean;\n  senderName: string;\n  senderRole: string;\n  urgencyConfig: any;\n  UrgencyIcon: any;\n  user: any;\n  onMarkAsRead: () => void;\n}) {\n  // Mark message as read when it appears in view for the recipient\n  useEffect(() => {\n    if (!message.isRead && message.recipientId === user?.id) {\n      const timer = setTimeout(() => {\n        onMarkAsRead();\n      }, 1500); // Mark as read after 1.5 seconds of being visible\n      \n      return () => clearTimeout(timer);\n    }\n  }, [message.id, message.isRead, message.recipientId, user?.id, onMarkAsRead]);\n\n  return (\n    <div\n      className={`flex ${isCurrentUser ? \"justify-end\" : \"justify-start\"} mb-3 ${\n        !message.isRead && message.recipientId === user?.id ? 'relative' : ''\n      }`}\n    >\n      {/* Unread indicator for received messages */}\n      {!message.isRead && message.recipientId === user?.id && (\n        <div className=\"absolute -left-2 top-1/2 transform -translate-y-1/2 w-3 h-3 bg-red-500 rounded-full animate-pulse z-10\"></div>\n      )}\n      \n      <div\n        className={`max-w-[75%] rounded-xl shadow-sm ${\n          isCurrentUser\n            ? \"bg-blue-500 text-white rounded-br-sm\"\n            : `bg-white border-2 ${urgencyConfig.borderColor} text-gray-900 rounded-bl-sm ${\n                !message.isRead && message.recipientId === user?.id ? 'ring-2 ring-red-200' : ''\n              }`\n        }`}\n      >\n        {/* Urgency Indicator for received messages */}\n        {!isCurrentUser && message.urgency !== \"normal\" && (\n          <div className={`px-3 pt-2 pb-1 flex items-center gap-2 ${urgencyConfig.bgColor} rounded-t-xl rounded-bl-sm`}>\n            <UrgencyIcon className=\"h-3 w-3\" />\n            <span className=\"text-xs font-medium uppercase tracking-wide\">{message.urgency}</span>\n          </div>\n        )}\n        \n        {/* Message Content */}\n        <div className=\"px-4 py-3\">\n          {/* Sender Info */}\n          <div className=\"flex items-center gap-2 mb-2\">\n            <span className={`text-xs font-medium ${isCurrentUser ? \"text-blue-100\" : \"text-gray-600\"}`}>\n              {senderName}\n            </span>\n            <span className={`text-xs px-2 py-1 rounded-full ${\n              isCurrentUser \n                ? \"bg-blue-400 text-blue-100\" \n                : senderRole === \"admin\" \n                  ? \"bg-purple-100 text-purple-800\" \n                  : \"bg-blue-100 text-blue-800\"\n            }`}>\n              {senderRole}\n            </span>\n          </div>\n          \n          {/* File attachment or regular message */}\n          {message.fileUrl ? (\n            <div className=\"space-y-2\">\n              <div className={`text-sm ${isCurrentUser ? \"text-white\" : \"text-gray-900\"}`}>\n                {message.content}\n              </div>\n              <div className={`flex items-center gap-2 p-2 rounded border ${\n                isCurrentUser ? \"bg-blue-400 border-blue-300\" : \"bg-gray-50 border-gray-200\"\n              }`}>\n                <File className={`h-4 w-4 ${isCurrentUser ? \"text-blue-100\" : \"text-gray-500\"}`} />\n                <a \n                  href={message.fileUrl} \n                  download={message.fileName}\n                  className={`text-sm hover:underline ${\n                    isCurrentUser ? \"text-blue-100\" : \"text-blue-600\"\n                  }`}\n                  onClick={(e) => {\n                    console.log('File download clicked:', message.fileUrl);\n                    console.log('File name:', message.fileName);\n                  }}\n                >\n                  {message.fileName}\n                </a>\n                {message.fileSize && (\n                  <span className={`text-xs ${isCurrentUser ? \"text-blue-200\" : \"text-gray-500\"}`}>\n                    ({(message.fileSize / 1024 / 1024).toFixed(2)} MB)\n                  </span>\n                )}\n              </div>\n            </div>\n          ) : (\n            <div className={`text-sm ${isCurrentUser ? \"text-white\" : \"text-gray-900\"}`}>\n              {message.content}\n            </div>\n          )}\n          \n          {/* Timestamp */}\n          <div className={`text-xs mt-2 ${isCurrentUser ? \"text-blue-200\" : \"text-gray-500\"}`}>\n            {new Date(message.createdAt).toLocaleString()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19343},"client/src/components/customizable-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Settings,\n  BarChart3,\n  Users,\n  Target,\n  DollarSign,\n  Calendar,\n  FileText,\n  TrendingUp,\n  AlertTriangle,\n  CheckCircle2,\n  Clock,\n  Plus,\n  GripVertical,\n  X\n} from \"lucide-react\";\nimport { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from \"recharts\";\n\ninterface Widget {\n  id: string;\n  title: string;\n  type: 'metric' | 'chart' | 'list' | 'progress';\n  icon: any;\n  enabled: boolean;\n  size: 'small' | 'medium' | 'large';\n  data?: any;\n}\n\ninterface CustomizableDashboardProps {\n  organizationData?: any;\n  projectsData?: any[];\n  reportsData?: any[];\n  statsData?: any;\n}\n\nexport default function CustomizableDashboard({\n  organizationData,\n  projectsData = [],\n  reportsData = [],\n  statsData\n}: CustomizableDashboardProps) {\n  const [widgets, setWidgets] = useState<Widget[]>([]);\n  const [isCustomizing, setIsCustomizing] = useState(false);\n\n  // Available widget configurations\n  const availableWidgets: Widget[] = [\n    {\n      id: 'active-projects',\n      title: 'Active Projects',\n      type: 'metric',\n      icon: Target,\n      enabled: true,\n      size: 'small',\n      data: { value: statsData?.activeProjects || 0, change: '+12%' }\n    },\n    {\n      id: 'completed-projects',\n      title: 'Completed Projects',\n      type: 'metric',\n      icon: CheckCircle2,\n      enabled: true,\n      size: 'small',\n      data: { value: statsData?.completedProjects || 0, change: '+8%' }\n    },\n    {\n      id: 'total-budget',\n      title: 'Total Budget',\n      type: 'metric',\n      icon: DollarSign,\n      enabled: true,\n      size: 'small',\n      data: { \n        value: `$${(projectsData.reduce((sum, p) => sum + (p.budget || 0), 0)).toLocaleString()}`,\n        change: '+15%'\n      }\n    },\n    {\n      id: 'team-members',\n      title: 'Team Members',\n      type: 'metric',\n      icon: Users,\n      enabled: true,\n      size: 'small',\n      data: { value: 8, change: '+2' }\n    },\n    {\n      id: 'project-status',\n      title: 'Project Status Distribution',\n      type: 'chart',\n      icon: BarChart3,\n      enabled: true,\n      size: 'medium',\n      data: [\n        { name: 'Active', value: statsData?.activeProjects || 0, color: '#3b82f6' },\n        { name: 'Completed', value: statsData?.completedProjects || 0, color: '#10b981' },\n        { name: 'On Hold', value: 2, color: '#f59e0b' },\n        { name: 'Cancelled', value: 1, color: '#ef4444' }\n      ]\n    },\n    {\n      id: 'budget-utilization',\n      title: 'Budget Utilization',\n      type: 'chart',\n      icon: DollarSign,\n      enabled: false,\n      size: 'medium',\n      data: projectsData.map(p => ({\n        name: p.name || 'Project',\n        budget: p.budget || 0,\n        spent: p.budgetUsed || 0,\n        remaining: (p.budget || 0) - (p.budgetUsed || 0)\n      }))\n    },\n    {\n      id: 'recent-reports',\n      title: 'Recent Reports',\n      type: 'list',\n      icon: FileText,\n      enabled: true,\n      size: 'medium',\n      data: reportsData.slice(0, 5)\n    },\n    {\n      id: 'project-timeline',\n      title: 'Project Timeline',\n      type: 'progress',\n      icon: Calendar,\n      enabled: false,\n      size: 'large',\n      data: projectsData.map(p => ({\n        name: p.name,\n        progress: p.progress || 0,\n        deadline: p.deadline,\n        status: p.status\n      }))\n    },\n    {\n      id: 'performance-trends',\n      title: 'Performance Trends',\n      type: 'chart',\n      icon: TrendingUp,\n      enabled: false,\n      size: 'large',\n      data: [\n        { month: 'Jan', projects: 5, reports: 12 },\n        { month: 'Feb', projects: 7, reports: 18 },\n        { month: 'Mar', projects: 6, reports: 15 },\n        { month: 'Apr', projects: 9, reports: 22 },\n        { month: 'May', projects: 8, reports: 19 },\n        { month: 'Jun', projects: 10, reports: 25 }\n      ]\n    },\n    {\n      id: 'urgent-tasks',\n      title: 'Urgent Tasks',\n      type: 'list',\n      icon: AlertTriangle,\n      enabled: false,\n      size: 'medium',\n      data: [\n        { title: 'Review Q4 Budget Report', due: '2 days', priority: 'high' },\n        { title: 'Submit Environmental Impact Study', due: '5 days', priority: 'medium' },\n        { title: 'Team Meeting Preparation', due: '1 week', priority: 'low' }\n      ]\n    }\n  ];\n\n  useEffect(() => {\n    // Load saved widget configuration from localStorage\n    const savedWidgets = localStorage.getItem('dashboard-widgets');\n    if (savedWidgets) {\n      try {\n        const parsed = JSON.parse(savedWidgets);\n        setWidgets(parsed.map((saved: any) => {\n          const template = availableWidgets.find(w => w.id === saved.id);\n          return template ? { ...template, enabled: saved.enabled, size: saved.size } : null;\n        }).filter(Boolean));\n      } catch (error) {\n        // If parsing fails, use default configuration\n        setWidgets(availableWidgets.filter(w => w.enabled));\n      }\n    } else {\n      // Use default configuration\n      setWidgets(availableWidgets.filter(w => w.enabled));\n    }\n  }, []);\n\n  const saveWidgetConfiguration = (newWidgets: Widget[]) => {\n    const configToSave = newWidgets.map(w => ({\n      id: w.id,\n      enabled: w.enabled,\n      size: w.size\n    }));\n    localStorage.setItem('dashboard-widgets', JSON.stringify(configToSave));\n    setWidgets(newWidgets);\n  };\n\n  const toggleWidget = (widgetId: string) => {\n    const updatedWidgets = availableWidgets.map(widget => {\n      if (widget.id === widgetId) {\n        const currentWidget = widgets.find(w => w.id === widgetId);\n        return { ...widget, enabled: !currentWidget?.enabled };\n      }\n      const existingWidget = widgets.find(w => w.id === widget.id);\n      return existingWidget || { ...widget, enabled: false };\n    });\n    saveWidgetConfiguration(updatedWidgets);\n  };\n\n  const changeWidgetSize = (widgetId: string, size: 'small' | 'medium' | 'large') => {\n    const updatedWidgets = widgets.map(widget =>\n      widget.id === widgetId ? { ...widget, size } : widget\n    );\n    saveWidgetConfiguration(updatedWidgets);\n  };\n\n  const renderMetricWidget = (widget: Widget) => (\n    <Card className={`border-0 bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/20 ${\n      widget.size === 'small' ? 'col-span-1' : widget.size === 'medium' ? 'col-span-2' : 'col-span-3'\n    }`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-blue-600 dark:text-blue-400 text-sm font-medium mb-1\">\n              {widget.title}\n            </p>\n            <p className=\"text-3xl font-bold text-blue-800 dark:text-blue-200\">\n              {widget.data?.value}\n            </p>\n            {widget.data?.change && (\n              <Badge variant=\"secondary\" className=\"mt-2 bg-green-100 text-green-700\">\n                {widget.data.change}\n              </Badge>\n            )}\n          </div>\n          <div className=\"bg-blue-500 rounded-lg p-3\">\n            <widget.icon className=\"h-6 w-6 text-white\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderChartWidget = (widget: Widget) => (\n    <Card className={`border-0 bg-white dark:bg-gray-800 ${\n      widget.size === 'small' ? 'col-span-1' : widget.size === 'medium' ? 'col-span-2' : 'col-span-3'\n    }`}>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg font-semibold flex items-center\">\n          <widget.icon className=\"h-5 w-5 mr-2 text-purple-500\" />\n          {widget.title}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            {widget.id === 'project-status' ? (\n              <PieChart>\n                <Pie\n                  data={widget.data}\n                  dataKey=\"value\"\n                  nameKey=\"name\"\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  label={({ name, value }) => `${name}: ${value}`}\n                >\n                  {widget.data?.map((entry: any, index: number) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            ) : widget.id === 'budget-utilization' ? (\n              <BarChart data={widget.data}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip formatter={(value) => `$${value?.toLocaleString()}`} />\n                <Bar dataKey=\"budget\" fill=\"#3b82f6\" name=\"Budget\" />\n                <Bar dataKey=\"spent\" fill=\"#10b981\" name=\"Spent\" />\n              </BarChart>\n            ) : (\n              <LineChart data={widget.data}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"month\" />\n                <YAxis />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"projects\" stroke=\"#3b82f6\" name=\"Projects\" />\n                <Line type=\"monotone\" dataKey=\"reports\" stroke=\"#10b981\" name=\"Reports\" />\n              </LineChart>\n            )}\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderListWidget = (widget: Widget) => (\n    <Card className={`border-0 bg-white dark:bg-gray-800 ${\n      widget.size === 'small' ? 'col-span-1' : widget.size === 'medium' ? 'col-span-2' : 'col-span-3'\n    }`}>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg font-semibold flex items-center\">\n          <widget.icon className=\"h-5 w-5 mr-2 text-green-500\" />\n          {widget.title}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n          {widget.id === 'recent-reports' ? (\n            widget.data?.map((report: any, index: number) => (\n              <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                <div>\n                  <p className=\"font-medium text-gray-900 dark:text-white\">{report.title}</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    {new Date(report.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n                <Badge variant={report.status === 'approved' ? 'default' : 'secondary'}>\n                  {report.status}\n                </Badge>\n              </div>\n            ))\n          ) : (\n            widget.data?.map((task: any, index: number) => (\n              <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                <div>\n                  <p className=\"font-medium text-gray-900 dark:text-white\">{task.title}</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">Due in {task.due}</p>\n                </div>\n                <Badge variant={task.priority === 'high' ? 'destructive' : task.priority === 'medium' ? 'default' : 'secondary'}>\n                  {task.priority}\n                </Badge>\n              </div>\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderProgressWidget = (widget: Widget) => (\n    <Card className={`border-0 bg-white dark:bg-gray-800 ${\n      widget.size === 'small' ? 'col-span-1' : widget.size === 'medium' ? 'col-span-2' : 'col-span-3'\n    }`}>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg font-semibold flex items-center\">\n          <widget.icon className=\"h-5 w-5 mr-2 text-orange-500\" />\n          {widget.title}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4 max-h-64 overflow-y-auto\">\n          {widget.data?.map((project: any, index: number) => (\n            <div key={index} className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"font-medium text-gray-900 dark:text-white\">{project.name}</span>\n                <Badge variant=\"outline\">{project.progress}%</Badge>\n              </div>\n              <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\n                <div\n                  className=\"bg-orange-500 h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${project.progress}%` }}\n                ></div>\n              </div>\n              {project.deadline && (\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  <Clock className=\"h-3 w-3 inline mr-1\" />\n                  Due: {new Date(project.deadline).toLocaleDateString()}\n                </p>\n              )}\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderWidget = (widget: Widget) => {\n    switch (widget.type) {\n      case 'metric':\n        return renderMetricWidget(widget);\n      case 'chart':\n        return renderChartWidget(widget);\n      case 'list':\n        return renderListWidget(widget);\n      case 'progress':\n        return renderProgressWidget(widget);\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Customization Button */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Dashboard Insights</h2>\n          <p className=\"text-gray-600 dark:text-gray-300\">Customize your dashboard with personalized widgets</p>\n        </div>\n        <Dialog open={isCustomizing} onOpenChange={setIsCustomizing}>\n          <DialogTrigger asChild>\n            <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n              <Settings className=\"h-4 w-4\" />\n              <span>Customize Widgets</span>\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center\">\n                <Settings className=\"h-5 w-5 mr-2\" />\n                Customize Dashboard Widgets\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-6 pt-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {availableWidgets.map((widget) => {\n                  const isEnabled = widgets.find(w => w.id === widget.id)?.enabled || false;\n                  const currentSize = widgets.find(w => w.id === widget.id)?.size || widget.size;\n                  \n                  return (\n                    <Card key={widget.id} className={`p-4 ${isEnabled ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' : ''}`}>\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Checkbox\n                            checked={isEnabled}\n                            onCheckedChange={() => toggleWidget(widget.id)}\n                          />\n                          <widget.icon className=\"h-5 w-5 text-gray-600 dark:text-gray-300\" />\n                          <span className=\"font-medium\">{widget.title}</span>\n                        </div>\n                        <Badge variant=\"outline\">{widget.type}</Badge>\n                      </div>\n                      {isEnabled && (\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm text-gray-600 dark:text-gray-300\">Widget Size:</p>\n                          <div className=\"flex space-x-2\">\n                            {['small', 'medium', 'large'].map((size) => (\n                              <Button\n                                key={size}\n                                variant={currentSize === size ? 'default' : 'outline'}\n                                size=\"sm\"\n                                onClick={() => changeWidgetSize(widget.id, size as any)}\n                              >\n                                {size}\n                              </Button>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Customizable Widget Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {widgets.filter(w => w.enabled).map((widget) => (\n          <div key={widget.id} className=\"widget-container\">\n            {renderWidget(widget)}\n          </div>\n        ))}\n      </div>\n\n      {/* Add New Widget Prompt */}\n      {widgets.filter(w => w.enabled).length === 0 && (\n        <Card className=\"border-2 border-dashed border-gray-300 dark:border-gray-600\">\n          <CardContent className=\"p-12 text-center\">\n            <Plus className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n              No Widgets Enabled\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n              Customize your dashboard by enabling widgets to display project insights\n            </p>\n            <Button onClick={() => setIsCustomizing(true)}>\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Enable Widgets\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":17984},"client/src/components/dashboard-widgets.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line\n} from 'recharts';\nimport { \n  Settings, \n  TrendingUp, \n  AlertCircle, \n  CheckCircle, \n  Clock, \n  DollarSign,\n  Target,\n  Calendar,\n  Users,\n  FileText,\n  Activity,\n  Eye,\n  EyeOff,\n  BarChart3,\n  PieChart as PieChartIcon,\n  LineChart as LineChartIcon\n} from \"lucide-react\";\nimport WidgetAnalytics from \"./widget-analytics\";\n\ninterface WidgetConfig {\n  id: string;\n  title: string;\n  type: 'chart' | 'metric' | 'list' | 'progress';\n  visible: boolean;\n  position: number;\n  size: 'small' | 'medium' | 'large';\n  chartType?: 'bar' | 'pie' | 'line';\n}\n\ninterface DashboardWidgetsProps {\n  userRole: 'admin' | 'officer';\n}\n\nconst defaultWidgets: WidgetConfig[] = [\n  { id: 'project-overview', title: 'Project Overview', type: 'metric', visible: true, position: 1, size: 'medium' },\n  { id: 'budget-summary', title: 'Budget Summary', type: 'chart', visible: true, position: 2, size: 'medium', chartType: 'pie' },\n  { id: 'progress-tracking', title: 'Progress Tracking', type: 'chart', visible: true, position: 3, size: 'large', chartType: 'bar' },\n  { id: 'recent-reports', title: 'Recent Reports', type: 'list', visible: true, position: 4, size: 'medium' },\n  { id: 'deadlines', title: 'Upcoming Deadlines', type: 'list', visible: true, position: 5, size: 'medium' },\n  { id: 'team-activity', title: 'Team Activity', type: 'chart', visible: false, position: 6, size: 'large', chartType: 'line' },\n  { id: 'project-timeline', title: 'Project Timeline', type: 'chart', visible: false, position: 7, size: 'large', chartType: 'line' },\n  { id: 'budget-analytics', title: 'Budget Analytics', type: 'chart', visible: false, position: 8, size: 'large', chartType: 'bar' },\n  { id: 'report-analytics', title: 'Report Analytics', type: 'chart', visible: false, position: 9, size: 'medium', chartType: 'pie' }\n];\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D'];\n\nexport default function DashboardWidgets({ userRole }: DashboardWidgetsProps) {\n  const [widgets, setWidgets] = useState<WidgetConfig[]>(() => {\n    const saved = localStorage.getItem(`dashboard-widgets-${userRole}`);\n    return saved ? JSON.parse(saved) : defaultWidgets;\n  });\n  const [isConfiguring, setIsConfiguring] = useState(false);\n\n  // Save widget configuration to localStorage\n  useEffect(() => {\n    localStorage.setItem(`dashboard-widgets-${userRole}`, JSON.stringify(widgets));\n  }, [widgets, userRole]);\n\n  const { data: dashboardStats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: projects } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: reports } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  const toggleWidgetVisibility = (widgetId: string) => {\n    setWidgets(prev => prev.map(widget => \n      widget.id === widgetId \n        ? { ...widget, visible: !widget.visible }\n        : widget\n    ));\n  };\n\n  const changeWidgetSize = (widgetId: string, size: 'small' | 'medium' | 'large') => {\n    setWidgets(prev => prev.map(widget => \n      widget.id === widgetId \n        ? { ...widget, size }\n        : widget\n    ));\n  };\n\n  const resetToDefaults = () => {\n    setWidgets(defaultWidgets);\n  };\n\n  const getProjectStatusData = () => {\n    if (!projects) return [];\n    \n    const statusCounts = (projects as any[]).reduce((acc, project) => {\n      acc[project.status] = (acc[project.status] || 0) + 1;\n      return acc;\n    }, {});\n\n    return Object.entries(statusCounts).map(([status, count]) => ({\n      name: status.charAt(0).toUpperCase() + status.slice(1),\n      value: count as number\n    }));\n  };\n\n  const getBudgetData = () => {\n    if (!projects) return [];\n    \n    return (projects as any[]).map(project => ({\n      name: project.name.length > 10 ? `${project.name.substring(0, 10)}...` : project.name,\n      budget: project.budget || 0,\n      spent: project.spentAmount || 0,\n      remaining: (project.budget || 0) - (project.spentAmount || 0)\n    }));\n  };\n\n  const getProgressData = () => {\n    if (!projects) return [];\n    \n    return (projects as any[]).map(project => ({\n      name: project.name.length > 8 ? `${project.name.substring(0, 8)}...` : project.name,\n      progress: project.progress || 0\n    }));\n  };\n\n  const getRecentReports = () => {\n    if (!reports) return [];\n    \n    return (reports as any[])\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, 5);\n  };\n\n  const getUpcomingDeadlines = () => {\n    if (!projects) return [];\n    \n    return (projects as any[])\n      .filter(project => project.deadline && new Date(project.deadline) > new Date())\n      .sort((a, b) => new Date(a.deadline).getTime() - new Date(b.deadline).getTime())\n      .slice(0, 5);\n  };\n\n  const renderWidget = (widget: WidgetConfig) => {\n    if (!widget.visible) return null;\n\n    const sizeClasses = {\n      small: 'col-span-1',\n      medium: 'col-span-2', \n      large: 'col-span-3'\n    };\n\n    switch (widget.id) {\n      case 'project-overview':\n        return (\n          <Card key={widget.id} className={`${sizeClasses[widget.size]} transition-all duration-200 hover:shadow-md`}>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center\">\n                <Target className=\"w-5 h-5 mr-2 text-blue-600\" />\n                {widget.title}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{dashboardStats?.activeProjects || 0}</div>\n                  <div className=\"text-sm text-gray-600\">Active Projects</div>\n                </div>\n                <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">{dashboardStats?.completedProjects || 0}</div>\n                  <div className=\"text-sm text-gray-600\">Completed</div>\n                </div>\n                <div className=\"text-center p-3 bg-orange-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-orange-600\">{dashboardStats?.pendingReports || 0}</div>\n                  <div className=\"text-sm text-gray-600\">Pending Reports</div>\n                </div>\n                <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-purple-600\">{dashboardStats?.totalBudget || 0}</div>\n                  <div className=\"text-sm text-gray-600\">Total Budget</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 'budget-summary':\n        const budgetData = getBudgetData();\n        return (\n          <Card key={widget.id} className={`${sizeClasses[widget.size]} transition-all duration-200 hover:shadow-md`}>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center\">\n                <DollarSign className=\"w-5 h-5 mr-2 text-green-600\" />\n                {widget.title}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-48\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={budgetData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"budget\" fill=\"#8884d8\" name=\"Budget\" />\n                    <Bar dataKey=\"spent\" fill=\"#82ca9d\" name=\"Spent\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 'progress-tracking':\n        const progressData = getProgressData();\n        return (\n          <Card key={widget.id} className={`${sizeClasses[widget.size]} transition-all duration-200 hover:shadow-md`}>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center\">\n                <Activity className=\"w-5 h-5 mr-2 text-purple-600\" />\n                {widget.title}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-48\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={progressData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis domain={[0, 100]} />\n                    <Tooltip formatter={(value) => [`${value}%`, 'Progress']} />\n                    <Bar dataKey=\"progress\" fill=\"#0088FE\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 'recent-reports':\n        const recentReports = getRecentReports();\n        return (\n          <Card key={widget.id} className={`${sizeClasses[widget.size]} transition-all duration-200 hover:shadow-md`}>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2 text-indigo-600\" />\n                {widget.title}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {recentReports.length > 0 ? recentReports.map((report: any) => (\n                  <div key={report.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg\">\n                    <div>\n                      <div className=\"font-medium text-sm\">{report.title}</div>\n                      <div className=\"text-xs text-gray-600\">\n                        {new Date(report.createdAt).toLocaleDateString()}\n                      </div>\n                    </div>\n                    <Badge variant={\n                      report.status === 'approved' ? 'default' : \n                      report.status === 'rejected' ? 'destructive' : \n                      'secondary'\n                    }>\n                      {report.status}\n                    </Badge>\n                  </div>\n                )) : (\n                  <div className=\"text-center text-gray-500 py-4\">No reports yet</div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 'deadlines':\n        const upcomingDeadlines = getUpcomingDeadlines();\n        return (\n          <Card key={widget.id} className={`${sizeClasses[widget.size]} transition-all duration-200 hover:shadow-md`}>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center\">\n                <Calendar className=\"w-5 h-5 mr-2 text-red-600\" />\n                {widget.title}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {upcomingDeadlines.length > 0 ? upcomingDeadlines.map((project: any) => (\n                  <div key={project.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg\">\n                    <div>\n                      <div className=\"font-medium text-sm\">{project.name}</div>\n                      <div className=\"text-xs text-gray-600\">\n                        {new Date(project.deadline).toLocaleDateString()}\n                      </div>\n                    </div>\n                    <div className=\"text-xs text-orange-600\">\n                      {Math.ceil((new Date(project.deadline).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))} days\n                    </div>\n                  </div>\n                )) : (\n                  <div className=\"text-center text-gray-500 py-4\">No upcoming deadlines</div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 'team-activity':\n        return (\n          <Card key={widget.id} className={`${sizeClasses[widget.size]} transition-all duration-200 hover:shadow-md`}>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center\">\n                <Users className=\"w-5 h-5 mr-2 text-cyan-600\" />\n                {widget.title}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-48 flex items-center justify-center text-gray-500\">\n                <div className=\"text-center\">\n                  <Activity className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                  <div>Team activity tracking coming soon</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 'project-timeline':\n        return <WidgetAnalytics key={widget.id} type=\"project-timeline\" timeRange=\"30d\" className={sizeClasses[widget.size]} />;\n\n      case 'budget-analytics':\n        return <WidgetAnalytics key={widget.id} type=\"budget-trend\" timeRange=\"30d\" className={sizeClasses[widget.size]} />;\n\n      case 'report-analytics':\n        return <WidgetAnalytics key={widget.id} type=\"report-analytics\" timeRange=\"30d\" className={sizeClasses[widget.size]} />;\n\n      default:\n        return null;\n    }\n  };\n\n  const visibleWidgets = widgets\n    .filter(widget => widget.visible)\n    .sort((a, b) => a.position - b.position);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Widget Configuration Panel */}\n      <Card className=\"border-dashed border-2 border-gray-300\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg flex items-center\">\n              <Settings className=\"w-5 h-5 mr-2\" />\n              Dashboard Configuration\n            </CardTitle>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsConfiguring(!isConfiguring)}\n            >\n              {isConfiguring ? 'Done' : 'Customize'}\n            </Button>\n          </div>\n        </CardHeader>\n        {isConfiguring && (\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h4 className=\"font-medium\">Widget Visibility</h4>\n                <Button variant=\"outline\" size=\"sm\" onClick={resetToDefaults}>\n                  Reset to Defaults\n                </Button>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {widgets.map((widget) => (\n                  <div key={widget.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => toggleWidgetVisibility(widget.id)}\n                      >\n                        {widget.visible ? (\n                          <Eye className=\"w-4 h-4 text-green-600\" />\n                        ) : (\n                          <EyeOff className=\"w-4 h-4 text-gray-400\" />\n                        )}\n                      </Button>\n                      <span className={widget.visible ? '' : 'text-gray-400'}>\n                        {widget.title}\n                      </span>\n                    </div>\n                    <div className=\"flex space-x-1\">\n                      {['small', 'medium', 'large'].map((size) => (\n                        <Button\n                          key={size}\n                          variant={widget.size === size ? 'default' : 'outline'}\n                          size=\"sm\"\n                          onClick={() => changeWidgetSize(widget.id, size as any)}\n                          className=\"px-2 py-1 text-xs\"\n                        >\n                          {size.charAt(0).toUpperCase()}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n\n      {/* Dashboard Widgets Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {visibleWidgets.map(renderWidget)}\n      </div>\n\n      {visibleWidgets.length === 0 && (\n        <Card className=\"border-dashed border-2 border-gray-300\">\n          <CardContent className=\"text-center py-12\">\n            <Settings className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No widgets visible</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Configure your dashboard by enabling some widgets above.\n            </p>\n            <Button onClick={() => setIsConfiguring(true)}>\n              Customize Dashboard\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":17395},"client/src/components/deadline-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, Clock, CheckCircle } from \"lucide-react\";\n\ninterface DeadlineBadgeProps {\n  project: any;\n  className?: string;\n}\n\nexport default function DeadlineBadge({ project, className = \"\" }: DeadlineBadgeProps) {\n  if (!project.deadline) {\n    return null;\n  }\n\n  const getDeadlineStatus = () => {\n    const daysLeft = project.daysLeft;\n    \n    if (daysLeft === null || daysLeft === undefined) {\n      return { text: 'No deadline', color: 'text-gray-500', bgColor: 'bg-gray-100', urgency: 'safe' };\n    }\n\n    if (daysLeft < 0) {\n      const daysOverdue = Math.abs(daysLeft);\n      return { \n        text: `${daysOverdue} day${daysOverdue !== 1 ? 's' : ''} overdue`, \n        color: 'text-red-100',\n        bgColor: 'bg-red-600 hover:bg-red-700',\n        urgency: 'overdue',\n        icon: AlertTriangle\n      };\n    } else if (daysLeft === 0) {\n      return { \n        text: 'Due today', \n        color: 'text-red-100',\n        bgColor: 'bg-red-500 hover:bg-red-600',\n        urgency: 'danger',\n        icon: AlertTriangle\n      };\n    } else if (daysLeft === 1) {\n      return { \n        text: '1 day left', \n        color: 'text-orange-100',\n        bgColor: 'bg-orange-500 hover:bg-orange-600',\n        urgency: 'danger',\n        icon: Clock\n      };\n    } else if (daysLeft <= 3) {\n      return { \n        text: `${daysLeft} days left`, \n        color: 'text-orange-100',\n        bgColor: 'bg-orange-500 hover:bg-orange-600',\n        urgency: 'warning',\n        icon: Clock\n      };\n    } else if (daysLeft <= 7) {\n      return { \n        text: `${daysLeft} days left`, \n        color: 'text-yellow-800',\n        bgColor: 'bg-yellow-400 hover:bg-yellow-500',\n        urgency: 'warning',\n        icon: Clock\n      };\n    } else {\n      return { \n        text: `${daysLeft} days left`, \n        color: 'text-green-100',\n        bgColor: 'bg-green-600 hover:bg-green-700',\n        urgency: 'safe',\n        icon: CheckCircle\n      };\n    }\n  };\n\n  const status = getDeadlineStatus();\n  const Icon = status.icon;\n\n  return (\n    <Badge \n      className={`${status.bgColor} ${status.color} border-0 font-medium flex items-center gap-1 ${className}`}\n      variant=\"secondary\"\n    >\n      {Icon && <Icon className=\"w-3 h-3\" />}\n      {status.text}\n    </Badge>\n  );\n}","size_bytes":2327},"client/src/components/language-switcher.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { setLanguage, getCurrentLanguage } from \"@/lib/i18n\";\nimport { Globe, ChevronDown } from \"lucide-react\";\n\nexport default function LanguageSwitcher() {\n  const [currentLang, setCurrentLang] = useState(getCurrentLanguage());\n\n  const handleLanguageChange = (lang: string) => {\n    setLanguage(lang);\n    setCurrentLang(lang);\n    // Dispatch custom event to notify components of language change\n    window.dispatchEvent(new CustomEvent('languageChanged'));\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"h-8 px-2\">\n          <Globe className=\"w-4 h-4 mr-1\" />\n          <span className=\"text-sm font-medium\">\n            {currentLang === \"en\" ? \"EN\" : \"FR\"}\n          </span>\n          <ChevronDown className=\"w-3 h-3 ml-1\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem\n          onClick={() => handleLanguageChange(\"en\")}\n          className={currentLang === \"en\" ? \"bg-blue-50 text-blue-600\" : \"\"}\n        >\n          <span className=\"mr-2\">🇺🇸</span>\n          English\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => handleLanguageChange(\"fr\")}\n          className={currentLang === \"fr\" ? \"bg-blue-50 text-blue-600\" : \"\"}\n        >\n          <span className=\"mr-2\">🇫🇷</span>\n          Français\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":1692},"client/src/components/meeting-bookings-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  CalendarDays,\n  Clock,\n  Mail,\n  Phone,\n  Building2,\n  Users,\n  MessageSquare,\n  Eye,\n  CheckCircle2,\n  XCircle,\n  Calendar,\n  AlertCircle\n} from \"lucide-react\";\n\ninterface MeetingBooking {\n  id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  company: string;\n  phone?: string;\n  organizationType?: string;\n  teamSize?: string;\n  meetingPurpose?: string;\n  preferredTime?: string;\n  message?: string;\n  status: string;\n  requestId: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function MeetingBookingsManager() {\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [viewingBooking, setViewingBooking] = useState<MeetingBooking | null>(null);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: bookings = [], isLoading } = useQuery<MeetingBooking[]>({\n    queryKey: ['/api/admin/meeting-bookings', selectedStatus === 'all' ? undefined : selectedStatus],\n    queryFn: async () => {\n      const params = selectedStatus !== 'all' ? `?status=${selectedStatus}` : '';\n      const response = await fetch(`/api/admin/meeting-bookings${params}`);\n      if (!response.ok) throw new Error('Failed to fetch bookings');\n      return response.json();\n    }\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ bookingId, status }: { bookingId: number; status: string }) => {\n      const response = await fetch(`/api/admin/meeting-bookings/${bookingId}/status`, {\n        method: 'PATCH',\n        body: JSON.stringify({ status }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) throw new Error('Failed to update status');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/meeting-bookings'] });\n      toast({\n        title: \"Status Updated\",\n        description: \"Meeting booking status has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update booking status. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-orange-100 text-orange-800';\n      case 'contacted':\n        return 'bg-blue-100 text-blue-800';\n      case 'scheduled':\n        return 'bg-green-100 text-green-800';\n      case 'completed':\n        return 'bg-emerald-100 text-emerald-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <AlertCircle className=\"w-4 h-4\" />;\n      case 'contacted':\n        return <Phone className=\"w-4 h-4\" />;\n      case 'scheduled':\n        return <Calendar className=\"w-4 h-4\" />;\n      case 'completed':\n        return <CheckCircle2 className=\"w-4 h-4\" />;\n      case 'cancelled':\n        return <XCircle className=\"w-4 h-4\" />;\n      default:\n        return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const handleViewBooking = (booking: MeetingBooking) => {\n    setViewingBooking(booking);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleStatusUpdate = (bookingId: number, status: string) => {\n    updateStatusMutation.mutate({ bookingId, status });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Meeting Bookings</h2>\n          <p className=\"text-gray-600\">Manage demo requests and sales inquiries</p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Bookings</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"contacted\">Contacted</SelectItem>\n              <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n              <SelectItem value=\"completed\">Completed</SelectItem>\n              <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        {(['pending', 'contacted', 'scheduled', 'completed', 'cancelled'] as const).map((status) => {\n          const count = bookings.filter((b) => b.status === status).length;\n          return (\n            <Card key={status} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600 capitalize\">{status}</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{count}</p>\n                  </div>\n                  <div className={`p-2 rounded-lg ${getStatusColor(status)}`}>\n                    {getStatusIcon(status)}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Bookings List */}\n      <div className=\"space-y-4\">\n        {bookings.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <CalendarDays className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No meeting bookings found</h3>\n              <p className=\"text-gray-600\">\n                {selectedStatus === 'all' \n                  ? \"No demo requests have been submitted yet.\"\n                  : `No bookings with status \"${selectedStatus}\" found.`\n                }\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          bookings.map((booking) => (\n            <Card key={booking.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-3\">\n                      <h3 className=\"text-lg font-semibold text-gray-900\">\n                        {booking.firstName} {booking.lastName}\n                      </h3>\n                      <Badge className={`${getStatusColor(booking.status)} flex items-center space-x-1`}>\n                        {getStatusIcon(booking.status)}\n                        <span className=\"capitalize\">{booking.status}</span>\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4\">\n                      <div className=\"flex items-center space-x-2 text-gray-600\">\n                        <Building2 className=\"w-4 h-4\" />\n                        <span className=\"text-sm\">{booking.company}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2 text-gray-600\">\n                        <Mail className=\"w-4 h-4\" />\n                        <span className=\"text-sm\">{booking.email}</span>\n                      </div>\n                      \n                      {booking.phone && (\n                        <div className=\"flex items-center space-x-2 text-gray-600\">\n                          <Phone className=\"w-4 h-4\" />\n                          <span className=\"text-sm\">{booking.phone}</span>\n                        </div>\n                      )}\n                      \n                      {booking.teamSize && (\n                        <div className=\"flex items-center space-x-2 text-gray-600\">\n                          <Users className=\"w-4 h-4\" />\n                          <span className=\"text-sm\">{booking.teamSize}</span>\n                        </div>\n                      )}\n                      \n                      {booking.preferredTime && (\n                        <div className=\"flex items-center space-x-2 text-gray-600\">\n                          <Clock className=\"w-4 h-4\" />\n                          <span className=\"text-sm capitalize\">{booking.preferredTime}</span>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex items-center space-x-2 text-gray-600\">\n                        <CalendarDays className=\"w-4 h-4\" />\n                        <span className=\"text-sm\">\n                          {new Date(booking.createdAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    {booking.meetingPurpose && (\n                      <div className=\"mb-4\">\n                        <span className=\"text-sm font-medium text-gray-700\">Purpose: </span>\n                        <span className=\"text-sm text-gray-600 capitalize\">{booking.meetingPurpose.replace('-', ' ')}</span>\n                      </div>\n                    )}\n                    \n                    {booking.message && (\n                      <div className=\"mb-4\">\n                        <div className=\"flex items-start space-x-2\">\n                          <MessageSquare className=\"w-4 h-4 text-gray-400 mt-0.5\" />\n                          <p className=\"text-sm text-gray-600 line-clamp-2\">{booking.message}</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex flex-col space-y-2 ml-4\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleViewBooking(booking)}\n                      className=\"whitespace-nowrap\"\n                    >\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      View Details\n                    </Button>\n                    \n                    {booking.status === 'pending' && (\n                      <div className=\"flex flex-col space-y-2\">\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleStatusUpdate(booking.id, 'contacted')}\n                          disabled={updateStatusMutation.isPending}\n                          className=\"whitespace-nowrap\"\n                        >\n                          Mark Contacted\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleStatusUpdate(booking.id, 'scheduled')}\n                          disabled={updateStatusMutation.isPending}\n                          className=\"whitespace-nowrap\"\n                        >\n                          Mark Scheduled\n                        </Button>\n                      </div>\n                    )}\n                    \n                    {booking.status === 'contacted' && (\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleStatusUpdate(booking.id, 'scheduled')}\n                        disabled={updateStatusMutation.isPending}\n                        className=\"whitespace-nowrap\"\n                      >\n                        Mark Scheduled\n                      </Button>\n                    )}\n                    \n                    {booking.status === 'scheduled' && (\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleStatusUpdate(booking.id, 'completed')}\n                        disabled={updateStatusMutation.isPending}\n                        className=\"whitespace-nowrap\"\n                      >\n                        Mark Completed\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Booking Details Modal */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-bold\">\n              Meeting Booking Details\n            </DialogTitle>\n            <DialogDescription>\n              Complete information for booking request #{viewingBooking?.requestId}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {viewingBooking && (\n            <div className=\"space-y-6 mt-6\">\n              {/* Contact Information */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Contact Information</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700\">Name</label>\n                    <p className=\"text-gray-900\">{viewingBooking.firstName} {viewingBooking.lastName}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700\">Email</label>\n                    <p className=\"text-gray-900\">{viewingBooking.email}</p>\n                  </div>\n                  {viewingBooking.phone && (\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">Phone</label>\n                      <p className=\"text-gray-900\">{viewingBooking.phone}</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Organization Information */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Organization Information</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700\">Company</label>\n                    <p className=\"text-gray-900\">{viewingBooking.company}</p>\n                  </div>\n                  {viewingBooking.organizationType && (\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">Organization Type</label>\n                      <p className=\"text-gray-900 capitalize\">{viewingBooking.organizationType.replace('-', ' ')}</p>\n                    </div>\n                  )}\n                  {viewingBooking.teamSize && (\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">Team Size</label>\n                      <p className=\"text-gray-900\">{viewingBooking.teamSize}</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Meeting Preferences */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Meeting Preferences</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {viewingBooking.meetingPurpose && (\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">Purpose</label>\n                      <p className=\"text-gray-900 capitalize\">{viewingBooking.meetingPurpose.replace('-', ' ')}</p>\n                    </div>\n                  )}\n                  {viewingBooking.preferredTime && (\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700\">Preferred Time</label>\n                      <p className=\"text-gray-900 capitalize\">{viewingBooking.preferredTime}</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Additional Message */}\n              {viewingBooking.message && (\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Additional Information</h3>\n                  <div className=\"bg-gray-50 p-4 rounded-lg\">\n                    <p className=\"text-gray-900\">{viewingBooking.message}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Status and Metadata */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Booking Status</h3>\n                <div className=\"flex items-center space-x-4 mb-4\">\n                  <Badge className={`${getStatusColor(viewingBooking.status)} flex items-center space-x-1`}>\n                    {getStatusIcon(viewingBooking.status)}\n                    <span className=\"capitalize\">{viewingBooking.status}</span>\n                  </Badge>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600\">\n                  <div>\n                    <label className=\"font-medium\">Request ID</label>\n                    <p>{viewingBooking.requestId}</p>\n                  </div>\n                  <div>\n                    <label className=\"font-medium\">Submitted</label>\n                    <p>{new Date(viewingBooking.createdAt).toLocaleString()}</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Quick Actions */}\n              <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n                <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n                  Close\n                </Button>\n                <a\n                  href={`mailto:${viewingBooking.email}?subject=Re: Demo Request - ${viewingBooking.company}&body=Hi ${viewingBooking.firstName},%0D%0A%0D%0AThank you for your interest in ADEL. I'd be happy to schedule a demo for ${viewingBooking.company}.%0D%0A%0D%0ABest regards`}\n                  className=\"inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md text-sm font-medium transition-colors\"\n                >\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  Send Email\n                </a>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":19525},"client/src/components/officer-dashboard-professional.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { useState } from \"react\";\nimport { \n  Users, \n  Projector, \n  Clock, \n  Calendar, \n  DollarSign,\n  FileText,\n  BarChart3,\n  LogOut,\n  Plus,\n  Activity,\n  CheckCircle2,\n  TrendingUp,\n  Target,\n  Search,\n  RotateCcw,\n  Edit3\n} from \"lucide-react\";\nimport { t } from \"@/lib/i18n\";\nimport { Input } from \"@/components/ui/input\";\nimport { useLogout, useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ReportForm from \"./report-form-fixed\";\nimport ReportFormEdit from \"./report-form-edit\";\nimport ProgressChart from \"./progress-chart\";\nimport ChatInterface from \"./chat-interface\";\nimport AdelLogo from \"./adel-logo\";\nimport DeadlineBadge from \"./deadline-badge\";\nimport DashboardWidgets from \"./dashboard-widgets\";\nimport OverdueNotifications from \"./overdue-notifications\";\nimport AnalyticsDashboard from \"./analytics-dashboard\";\nimport SmartNotifications from \"./smart-notifications\";\n\nimport ProjectTimeline from \"./project-timeline\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nexport default function OfficerDashboard() {\n  const logout = useLogout();\n  const { user, isLoading } = useAuth();\n  \n  // Debug logging for user data\n  console.log(\"OfficerDashboard - User:\", user, \"IsLoading:\", isLoading);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [viewingProject, setViewingProject] = useState<any>(null);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  \n  const [reportSearchTerm, setReportSearchTerm] = useState(\"\");\n  \n  // Recall report mutation\n  const recallReportMutation = useMutation({\n    mutationFn: async (reportId: number) => {\n      const response = await fetch(`/api/reports/${reportId}/recall`, {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to recall report');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Report recalled successfully\",\n        description: \"Your report has been moved back to draft status and can now be edited.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to recall report\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const { data: projects, isLoading: projectsLoading } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: reports, isLoading: reportsLoading } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  const { data: organization } = useQuery({\n    queryKey: [\"/api/organization\"],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  // Filter reports based on search term\n  const filteredReports = (reports as any)?.filter((report: any) =>\n    report.title?.toLowerCase().includes(reportSearchTerm.toLowerCase()) ||\n    report.content?.toLowerCase().includes(reportSearchTerm.toLowerCase()) ||\n    report.projectName?.toLowerCase().includes(reportSearchTerm.toLowerCase())\n  ) || [];\n\n  // Get unread message count for notification\n  const { data: unreadMessages } = useQuery({\n    queryKey: [\"/api/messages/unread\"],\n  });\n\n  const handleViewDetails = (project: any) => {\n    setViewingProject(project);\n    setIsViewDialogOpen(true);\n  };\n\n  if (projectsLoading || reportsLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-16 w-16 border-4 border-blue-500 border-t-transparent mx-auto\"></div>\n          <p className=\"text-slate-600 font-medium\">Loading your dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate stats\n  const activeProjects = (projects as any)?.filter((p: any) => p.progress < 100) || [];\n  const completedProjects = (projects as any)?.filter((p: any) => p.progress === 100) || [];\n  const submittedReports = (reports as any)?.length || 0;\n  const pendingReports = (reports as any)?.filter((r: any) => r.status === 'submitted')?.length || 0;\n\n  return (\n    <div className=\"min-h-screen w-full bg-gradient-to-br from-gray-50 via-blue-50/40 to-indigo-50/60\">\n      <div className=\"max-w-7xl mx-auto px-3 md:px-6 py-3 md:py-6 space-y-3 md:space-y-6\">\n        {/* Enhanced Header with Modern Design */}\n        <div className=\"bg-white/90 backdrop-blur-sm border border-white/50 rounded-2xl shadow-lg p-4 md:p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3 md:space-x-4\">\n              <div className=\"bg-gradient-to-br from-blue-500 to-indigo-600 p-2 md:p-3 rounded-xl shadow-lg\">\n                <AdelLogo size=\"sm\" className=\"filter brightness-0 invert\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl md:text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent\">\n                  Officer Dashboard\n                </h1>\n                <p className=\"text-sm md:text-base text-gray-600 hidden sm:block\">\n                  Submit reports and track project progress\n                </p>\n              </div>\n            </div>\n            <Button\n              onClick={() => logout.mutate()}\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={logout.isPending}\n              className=\"hover:bg-red-50 hover:border-red-300 hover:text-red-700 transition-colors text-xs md:text-sm\"\n            >\n              <LogOut className=\"w-3 h-3 md:w-4 md:h-4 mr-1 md:mr-2\" />\n              <span className=\"hidden sm:inline\">{logout.isPending ? \"Signing out...\" : \"Logout\"}</span>\n              <span className=\"sm:hidden\">Exit</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Enhanced Stats Cards with Modern Design */}\n        <div className=\"grid grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-3 md:gap-6\">\n          <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100/60 border-0 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg\">\n                  <Projector className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl md:text-3xl font-bold text-gray-900\">\n                    {activeProjects.length}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Active Projects</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-emerald-50 to-emerald-100/60 border-0 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg\">\n                  <CheckCircle2 className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl md:text-3xl font-bold text-gray-900\">\n                    {completedProjects.length}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Completed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100/60 border-0 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg\">\n                  <FileText className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl md:text-3xl font-bold text-gray-900\">\n                    {submittedReports}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Reports</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100/60 border-0 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n            <CardContent className=\"p-4 md:p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl flex items-center justify-center shadow-lg\">\n                  <Clock className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl md:text-3xl font-bold text-gray-900\">\n                    {pendingReports}\n                  </p>\n                  <p className=\"text-sm text-gray-600\">Pending</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Enhanced Tabs with Modern Design */}\n        <div className=\"bg-white/90 backdrop-blur-sm border border-white/50 rounded-2xl shadow-lg\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <div className=\"border-b border-gray-200 px-4\">\n              <TabsList className=\"grid w-full grid-cols-5 bg-transparent h-12\">\n                <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Overview\n                </TabsTrigger>\n                <TabsTrigger value=\"projects\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700 relative\">\n                  Projects\n                  {(() => {\n                    const overdueCount = (projects as any)?.filter((p: any) => \n                      p.isOverdue && \n                      p.status !== 'completed' && \n                      p.status !== 'cancelled' &&\n                      (p.progress || 0) < 100\n                    ).length || 0;\n                    return overdueCount > 0 ? (\n                      <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 h-5 w-5 p-0 text-xs flex items-center justify-center\">\n                        {overdueCount}\n                      </Badge>\n                    ) : null;\n                  })()}\n                </TabsTrigger>\n                <TabsTrigger value=\"reports\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Reports\n                </TabsTrigger>\n                <TabsTrigger value=\"analytics\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Analytics\n                </TabsTrigger>\n                <TabsTrigger value=\"messages\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700 relative\">\n                  Messages\n                  {unreadMessages && unreadMessages.count > 0 && (\n                    <Badge \n                      variant=\"destructive\" \n                      className=\"absolute -top-1 -right-1 h-5 w-5 p-0 text-xs flex items-center justify-center animate-notificationPulse animate-slideInRight bg-red-500 text-white border-2 border-white shadow-lg\"\n                    >\n                      {unreadMessages.count}\n                    </Badge>\n                  )}\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"overview\" className=\"p-6\">\n              <Card className=\"bg-white border border-gray-200\">\n                <CardHeader>\n                  <CardTitle className=\"text-gray-900\">Project Progress</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ProgressChart />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"projects\" className=\"p-6 space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-xl font-semibold text-slate-800\">Available Projects</h2>\n              </div>\n\n              {/* Overdue Notifications */}\n              <OverdueNotifications />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {(projects as any)?.map((project: any) => (\n                  <Card key={project.id} className=\"bg-white border border-slate-200 shadow-sm hover:shadow-md transition-shadow cursor-pointer\" onClick={() => handleViewDetails(project)}>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-lg text-slate-800\">{project.name}</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        <div>\n                          <div className=\"flex justify-between text-sm mb-1\">\n                            <span className=\"text-slate-600\">Progress</span>\n                            <span className=\"font-medium text-slate-800\">{project.progress || 0}%</span>\n                          </div>\n                          <Progress value={project.progress || 0} className=\"h-2\" />\n                        </div>\n                        \n                        {project.budget && (\n                          <div>\n                            <div className=\"flex justify-between text-sm mb-1\">\n                              <span className=\"text-slate-600\">Budget Usage</span>\n                              <span className=\"font-medium text-slate-800\">\n                                ${parseFloat(project.budgetUsed || 0).toFixed(0)} / ${parseFloat(project.budget).toFixed(0)}\n                              </span>\n                            </div>\n                            <Progress \n                              value={project.budget ? (parseFloat(project.budgetUsed || 0) / parseFloat(project.budget)) * 100 : 0} \n                              className=\"h-2\"\n                            />\n                          </div>\n                        )}\n\n                        <div className=\"flex items-center text-sm text-slate-600\">\n                          <Calendar className=\"w-4 h-4 mr-1\" />\n                          {project.deadline ? new Date(project.deadline).toLocaleDateString() : 'No deadline'}\n                        </div>\n\n                        <Badge variant={project.progress === 100 ? \"default\" : \"secondary\"}>\n                          {project.progress === 100 ? \"Completed\" : \"In Progress\"}\n                        </Badge>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )) || (\n                  <div className=\"col-span-full text-center py-12\">\n                    <Projector className=\"w-12 h-12 text-slate-400 mx-auto mb-4\" />\n                    <p className=\"text-slate-500 text-lg\">No projects available</p>\n                    <p className=\"text-slate-400\">Contact your administrator to get assigned to projects</p>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"reports\" className=\"p-6 space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-xl font-semibold text-slate-800\">Report Management</h2>\n                <ReportForm onSuccess={() => {}} />\n              </div>\n\n              {/* Search Reports */}\n              <div className=\"mb-4\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400\" />\n                  <Input\n                    placeholder=\"Search reports by title or content...\"\n                    value={reportSearchTerm}\n                    onChange={(e) => setReportSearchTerm(e.target.value)}\n                    className=\"pl-10 h-9\"\n                  />\n                </div>\n              </div>\n\n              {/* Reports List - Shows 3-3.5 reports at a time */}\n              <div className=\"overflow-y-auto\" style={{ maxHeight: '280px' }}>\n                <div className=\"grid grid-cols-1 gap-3\">\n                  {filteredReports?.slice(0, 100).map((report: any) => (\n                    <Card key={report.id} className=\"bg-white border border-slate-200 shadow-sm\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold text-slate-800 mb-1\">{report.title}</h3>\n                            <p className=\"text-sm text-slate-600 mb-2\">{report.content}</p>\n                            <div className=\"flex items-center space-x-4 text-sm text-slate-500\">\n                              <span>Project: {report.projectName || 'Unknown'}</span>\n                              <span>Submitted: {new Date(report.createdAt).toLocaleDateString()}</span>\n                            </div>\n                          </div>\n                          <div className=\"ml-4 flex items-center gap-2\">\n                            <Badge variant={\n                              report.status === 'approved' ? 'default' : \n                              report.status === 'rejected' ? 'destructive' : \n                              'secondary'\n                            }>\n                              {report.status}\n                            </Badge>\n                            {report.status === 'submitted' && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => recallReportMutation.mutate(report.id)}\n                                disabled={recallReportMutation.isPending}\n                                className=\"h-8 px-3 bg-gradient-to-r from-amber-50 to-yellow-50 border-amber-200 text-amber-700 hover:from-amber-100 hover:to-yellow-100 hover:border-amber-300 shadow-sm transition-all duration-200 font-medium text-xs rounded-md\"\n                              >\n                                <RotateCcw className=\"w-3 h-3 mr-1.5\" />\n                                Call Back\n                              </Button>\n                            )}\n                            {report.status === 'draft' && (\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"h-8 px-3 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200 text-blue-700 hover:from-blue-100 hover:to-indigo-100 hover:border-blue-300 shadow-sm transition-all duration-200 font-medium text-xs rounded-md\"\n                                  >\n                                    <Edit3 className=\"w-3 h-3 mr-1.5\" />\n                                    Edit Draft\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                                  <DialogHeader>\n                                    <DialogTitle>Edit Draft Report</DialogTitle>\n                                  </DialogHeader>\n                                  <ReportFormEdit \n                                    reportId={report.id}\n                                    onSuccess={() => {\n                                      console.log(\"Edit form success callback triggered\");\n                                      queryClient.invalidateQueries({ queryKey: [\"/api/reports\"] });\n                                      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n                                      window.location.reload();\n                                    }}\n                                    onCancel={() => {\n                                      console.log(\"Edit form cancel callback triggered\");\n                                      window.location.reload();\n                                    }}\n                                  />\n                                </DialogContent>\n                              </Dialog>\n                            )}\n                          </div>\n                        </div>\n                        {report.reviewNotes && (\n                          <div className=\"mt-4 p-3 bg-slate-50 rounded-lg\">\n                            <p className=\"text-sm text-slate-600\">\n                              <span className=\"font-medium\">Review Notes:</span> {report.reviewNotes}\n                            </p>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n                {filteredReports.length === 0 && (\n                  <div className=\"text-center py-12\">\n                    <FileText className=\"w-12 h-12 text-slate-400 mx-auto mb-4\" />\n                    <p className=\"text-slate-500 text-lg\">\n                      {reportSearchTerm ? \"No reports match your search\" : \"No reports submitted yet\"}\n                    </p>\n                    <p className=\"text-slate-400\">\n                      {reportSearchTerm ? \"Try adjusting your search terms\" : \"Submit your first report to get started\"}\n                    </p>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"analytics\" className=\"p-6 space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <div className=\"lg:col-span-2\">\n                  <AnalyticsDashboard userRole=\"officer\" />\n                </div>\n                <div className=\"space-y-6\">\n                  <SmartNotifications userRole=\"officer\" />\n                  <ProjectTimeline />\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"messages\" className=\"p-6\">\n              <ChatInterface />\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* View Project Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>{viewingProject?.name}</DialogTitle>\n            <DialogDescription>Project details and information</DialogDescription>\n          </DialogHeader>\n          {viewingProject && (\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium text-slate-800 mb-1\">Description</h4>\n                <p className=\"text-sm text-slate-600\">\n                  {viewingProject.description || \"No description provided\"}\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-slate-800 mb-1\">Progress</h4>\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={viewingProject.progress || 0} className=\"flex-1\" />\n                  <span className=\"text-sm font-medium\">{viewingProject.progress || 0}%</span>\n                </div>\n              </div>\n              {viewingProject.budget && (\n                <div>\n                  <h4 className=\"font-medium text-slate-800 mb-1\">Budget</h4>\n                  <p className=\"text-sm text-slate-600\">\n                    ${parseFloat(viewingProject.budgetUsed || 0).toFixed(2)} / ${parseFloat(viewingProject.budget).toFixed(2)} used\n                  </p>\n                </div>\n              )}\n              <div>\n                <h4 className=\"font-medium text-slate-800 mb-1\">Deadline</h4>\n                <p className=\"text-sm text-slate-600\">\n                  {viewingProject.deadline ? new Date(viewingProject.deadline).toLocaleDateString() : 'No deadline set'}\n                </p>\n              </div>\n              <div className=\"pt-4\">\n                <ReportForm projectId={viewingProject.id} onSuccess={() => setIsViewDialogOpen(false)} />\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":25527},"client/src/components/officer-dashboard-redesigned.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useState, useEffect } from \"react\";\nimport { \n  Projector, \n  Clock, \n  Calendar, \n  FileText,\n  BarChart3,\n  LogOut,\n  Plus,\n  CheckCircle2,\n  TrendingUp,\n  Brain,\n  Zap,\n  AlertTriangle,\n  MessageSquare,\n  Edit3,\n  Lightbulb,\n  Eye,\n  Briefcase,\n  Paperclip,\n  Download,\n  ArrowDown\n} from \"lucide-react\";\nimport { useLogout, useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdelLogo from \"./adel-logo\";\nimport ChatInterface from \"./chat-interface\";\nimport ReportForm from \"./report-form-fixed\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ResponsiveContainer, PieChart as RechartsPieChart, Pie, Cell, Tooltip } from 'recharts';\nimport OnboardingWalkthrough from \"./onboarding-walkthrough\";\n\ninterface AIInsight {\n  type: 'success' | 'warning' | 'info' | 'error';\n  title: string;\n  description: string;\n  action?: string;\n  priority: 'high' | 'medium' | 'low';\n}\n\ninterface AIProjectSummary {\n  overallHealth: 'excellent' | 'good' | 'warning' | 'critical';\n  executiveSummary: string;\n  keyMetrics: {\n    onTimeDelivery: number;\n    budgetEfficiency: number;\n    teamEngagement: number;\n    riskLevel: 'low' | 'medium' | 'high';\n  };\n  insights: AIInsight[];\n  recommendations: string[];\n}\n\nexport default function OfficerDashboardRedesigned() {\n  const { user } = useAuth();\n  const logout = useLogout();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [aiInsights, setAiInsights] = useState<AIProjectSummary | null>(null);\n  const [loadingAI, setLoadingAI] = useState(false);\n  const [showReportForm, setShowReportForm] = useState(false);\n  const [editingReport, setEditingReport] = useState<any>(null);\n  const [viewingReport, setViewingReport] = useState<any>(null);\n  const [showOnboarding, setShowOnboarding] = useState(false);\n\n  const { data: projects } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: reports, refetch: refetchReports } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  const { data: unreadMessages } = useQuery({\n    queryKey: [\"/api/messages/unread\"],\n  });\n\n  // Check for first-time user onboarding\n  useEffect(() => {\n    const hasCompletedOnboarding = localStorage.getItem('onboarding-completed');\n    if (!hasCompletedOnboarding && user) {\n      // Show onboarding after a short delay to let the dashboard load\n      setTimeout(() => {\n        setShowOnboarding(true);\n      }, 1000);\n    }\n  }, [user]);\n\n  // Generate AI insights\n  const generateAIInsights = async () => {\n    if (!projects || !reports) return;\n    \n    setLoadingAI(true);\n    try {\n      const response = await apiRequest('POST', '/api/ai/dashboard-insights', {});\n      setAiInsights(response);\n    } catch (error) {\n      console.error('AI insights error:', error);\n      toast({\n        title: \"AI Analysis Unavailable\",\n        description: \"Using standard dashboard view\",\n        variant: \"default\",\n      });\n    } finally {\n      setLoadingAI(false);\n    }\n  };\n\n  // Calculate key metrics\n  const projectsData = projects as any[] || [];\n  const reportsData = reports as any[] || [];\n  const activeProjects = projectsData.filter(p => p.status === 'active');\n  const completedProjects = projectsData.filter(p => p.status === 'completed');\n  const submittedReports = reportsData.filter(r => r.status === 'submitted').length;\n  const draftReports = reportsData.filter(r => r.status === 'draft').length;\n  const avgProgress = projectsData.length > 0 ? \n    Math.round(projectsData.reduce((acc, p) => acc + (p.progress || 0), 0) / projectsData.length) : 0;\n\n  const getHealthColor = (health: string) => {\n    switch (health) {\n      case 'excellent': return 'bg-green-500';\n      case 'good': return 'bg-blue-500';\n      case 'warning': return 'bg-orange-500';\n      case 'critical': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case 'low': return 'text-green-600 bg-green-50';\n      case 'medium': return 'text-orange-600 bg-orange-50';\n      case 'high': return 'text-red-600 bg-red-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      <div className=\"max-w-7xl mx-auto p-4 space-y-6\">\n        \n        {/* Compact Header */}\n        <div className=\"bg-white rounded-2xl shadow-sm border border-gray-100 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center\">\n                <AdelLogo size=\"sm\" className=\"filter brightness-0 invert\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">Officer Dashboard</h1>\n                <p className=\"text-sm text-gray-600\">Submit reports and track progress</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <Button\n                onClick={() => setShowOnboarding(true)}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n              >\n                <Lightbulb className=\"w-4 h-4\" />\n                Tour\n              </Button>\n              \n              <Button\n                onClick={generateAIInsights}\n                disabled={loadingAI}\n                size=\"sm\"\n                className=\"bg-gradient-to-r from-purple-500 to-indigo-600 hover:from-purple-600 hover:to-indigo-700\"\n              >\n                {loadingAI ? (\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                ) : (\n                  <Brain className=\"w-4 h-4\" />\n                )}\n                AI Insights\n              </Button>\n              \n              <Button \n                onClick={() => setShowReportForm(true)}\n                size=\"sm\"\n                className=\"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Report\n              </Button>\n              \n              <Button\n                onClick={() => logout.mutate()}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* AI Insights Section */}\n        {aiInsights && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Executive Summary */}\n            <Card className=\"lg:col-span-2 bg-gradient-to-br from-blue-50 to-indigo-100 border-0 shadow-lg\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <div className={`w-3 h-3 rounded-full ${getHealthColor(aiInsights.overallHealth)}`} />\n                  AI Project Intelligence\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div>\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-2\">Executive Summary</h4>\n                    <p className=\"text-gray-700 leading-relaxed text-sm\">{aiInsights.executiveSummary}</p>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-2\">Project Objectives</h4>\n                    <div className=\"text-sm text-gray-700 space-y-1\">\n                      {projectsData.map((project: any, index: number) => (\n                        <div key={index} className=\"bg-gray-50 p-2 rounded border-l-2 border-blue-400\">\n                          <span className=\"font-medium\">{project.name}:</span> {project.goals || project.description || 'Objectives to be defined'}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-2\">Key Inputs & Activities</h4>\n                    <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                      <div className=\"bg-blue-50 p-2 rounded\">\n                        <span className=\"font-medium text-blue-800\">Budget Allocated:</span>\n                        <p className=\"text-blue-700\">${projectsData.reduce((acc: number, p: any) => acc + parseFloat(p.budget || '0'), 0).toLocaleString()}</p>\n                      </div>\n                      <div className=\"bg-green-50 p-2 rounded\">\n                        <span className=\"font-medium text-green-800\">Team Members:</span>\n                        <p className=\"text-green-700\">11 active members</p>\n                      </div>\n                      <div className=\"bg-purple-50 p-2 rounded\">\n                        <span className=\"font-medium text-purple-800\">Reports Generated:</span>\n                        <p className=\"text-purple-700\">{reportsData.length} total reports</p>\n                      </div>\n                      <div className=\"bg-orange-50 p-2 rounded\">\n                        <span className=\"font-medium text-orange-800\">Active Projects:</span>\n                        <p className=\"text-orange-700\">{activeProjects.length} in progress</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-2\">Accomplishments & Numbers</h4>\n                    <div className=\"grid grid-cols-3 gap-3 mb-4\">\n                      <div className=\"bg-gradient-to-r from-green-50 to-green-100 p-3 rounded-lg border border-green-200\">\n                        <div className=\"text-lg font-bold text-green-800\">\n                          {completedProjects.length}\n                        </div>\n                        <div className=\"text-xs text-green-700\">Projects Completed</div>\n                      </div>\n                      <div className=\"bg-gradient-to-r from-blue-50 to-blue-100 p-3 rounded-lg border border-blue-200\">\n                        <div className=\"text-lg font-bold text-blue-800\">\n                          {Math.round(projectsData.reduce((acc: number, p: any) => acc + p.progress, 0) / projectsData.length || 0)}%\n                        </div>\n                        <div className=\"text-xs text-blue-700\">Average Progress</div>\n                      </div>\n                      <div className=\"bg-gradient-to-r from-purple-50 to-purple-100 p-3 rounded-lg border border-purple-200\">\n                        <div className=\"text-lg font-bold text-purple-800\">\n                          {reportsData.filter((r: any) => r.status === 'approved').length}\n                        </div>\n                        <div className=\"text-xs text-purple-700\">Reports Approved</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-3 mb-4\">\n                      <div className=\"bg-gradient-to-r from-orange-50 to-orange-100 p-3 rounded-lg border border-orange-200\">\n                        <div className=\"text-lg font-bold text-orange-800\">\n                          ${projectsData.reduce((acc: number, p: any) => acc + (parseFloat(p.budgetUsed) || 0), 0).toLocaleString()}\n                        </div>\n                        <div className=\"text-xs text-orange-700\">Total Budget Spent</div>\n                      </div>\n                      <div className=\"bg-gradient-to-r from-teal-50 to-teal-100 p-3 rounded-lg border border-teal-200\">\n                        <div className=\"text-lg font-bold text-teal-800\">\n                          {reportsData.length}\n                        </div>\n                        <div className=\"text-xs text-teal-700\">Total Reports Generated</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <h5 className=\"text-xs font-semibold text-gray-700 mb-1\">Project Status Breakdown:</h5>\n                      {projectsData.map((project: any, index: number) => (\n                        <div key={index} className=\"bg-white border rounded-lg p-2 shadow-sm\">\n                          <div className=\"flex justify-between items-center mb-1\">\n                            <span className=\"font-medium text-gray-800 text-sm\">{project.name}</span>\n                            <span className={`text-xs px-2 py-1 rounded-full ${\n                              project.status === 'completed' ? 'bg-green-100 text-green-800' :\n                              project.status === 'active' ? 'bg-blue-100 text-blue-800' :\n                              project.status === 'on-hold' ? 'bg-yellow-100 text-yellow-800' :\n                              'bg-gray-100 text-gray-800'\n                            }`}>\n                              {project.status.charAt(0).toUpperCase() + project.status.slice(1)}\n                            </span>\n                          </div>\n                          <div className=\"grid grid-cols-3 gap-2 text-xs text-gray-600\">\n                            <span><strong>{project.progress}%</strong> Complete</span>\n                            <span><strong>${project.budgetUsed || 0}</strong> Spent</span>\n                            <span><strong>${(parseFloat(project.budget) - parseFloat(project.budgetUsed || '0')).toLocaleString()}</strong> Remaining</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* AI Metrics Pie Chart */}\n                  <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                    <h4 className=\"text-sm font-semibold text-gray-700 mb-4\">Performance Metrics</h4>\n                    \n                    <div className=\"bg-white rounded-lg p-4 border\">\n                      <div className=\"h-48\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          <RechartsPieChart>\n                            <Pie\n                              data={[\n                                { name: 'On-Time Delivery', value: aiInsights?.keyMetrics?.onTimeDelivery || 0, color: '#3b82f6' },\n                                { name: 'Budget Efficiency', value: aiInsights?.keyMetrics?.budgetEfficiency || 0, color: '#10b981' },\n                                { name: 'Team Engagement', value: aiInsights?.keyMetrics?.teamEngagement || 0, color: '#8b5cf6' }\n                              ]}\n                              cx=\"50%\"\n                              cy=\"50%\"\n                              innerRadius={30}\n                              outerRadius={70}\n                              paddingAngle={3}\n                              dataKey=\"value\"\n                            >\n                              {[\n                                { name: 'On-Time Delivery', value: aiInsights?.keyMetrics?.onTimeDelivery || 0, color: '#3b82f6' },\n                                { name: 'Budget Efficiency', value: aiInsights?.keyMetrics?.budgetEfficiency || 0, color: '#10b981' },\n                                { name: 'Team Engagement', value: aiInsights?.keyMetrics?.teamEngagement || 0, color: '#8b5cf6' }\n                              ].map((entry, index) => (\n                                <Cell key={`cell-${index}`} fill={entry.color} />\n                              ))}\n                            </Pie>\n                            <Tooltip \n                              contentStyle={{ \n                                backgroundColor: '#1f2937', \n                                border: 'none', \n                                borderRadius: '8px',\n                                color: 'white'\n                              }}\n                              formatter={(value: any) => [`${value}%`, '']}\n                            />\n                          </RechartsPieChart>\n                        </ResponsiveContainer>\n                      </div>\n                      <div className=\"space-y-2 mt-2\">\n                        {[\n                          { name: 'On-Time Delivery', value: aiInsights?.keyMetrics?.onTimeDelivery || 0, color: '#3b82f6' },\n                          { name: 'Budget Efficiency', value: aiInsights?.keyMetrics?.budgetEfficiency || 0, color: '#10b981' },\n                          { name: 'Team Engagement', value: aiInsights?.keyMetrics?.teamEngagement || 0, color: '#8b5cf6' }\n                        ].map((item, index) => (\n                          <div key={index} className=\"flex items-center justify-between text-xs\">\n                            <div className=\"flex items-center gap-2\">\n                              <div \n                                className=\"w-2 h-2 rounded-full\" \n                                style={{ backgroundColor: item.color }}\n                              />\n                              <span className=\"text-gray-600\">{item.name}</span>\n                            </div>\n                            <span className=\"font-medium\">{item.value}%</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Progress Rate</span>\n                      <span className=\"font-medium\">{aiInsights.keyMetrics.onTimeDelivery}%</span>\n                    </div>\n                    <Progress value={aiInsights.keyMetrics.onTimeDelivery} className=\"h-2\" />\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Task Completion</span>\n                      <span className=\"font-medium\">{aiInsights.keyMetrics.teamEngagement}%</span>\n                    </div>\n                    <Progress value={aiInsights.keyMetrics.teamEngagement} className=\"h-2\" />\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Performance Level</span>\n                  <Badge className={`${getRiskColor(aiInsights.keyMetrics.riskLevel)} border-0`}>\n                    {aiInsights.keyMetrics.riskLevel.toUpperCase()}\n                  </Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions & Alerts */}\n            <Card className=\"bg-white border-0 shadow-lg\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"w-5 h-5 text-orange-500\" />\n                  Action Items\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {aiInsights.insights.slice(0, 3).map((insight, index) => (\n                  <div key={index} className=\"flex gap-3 p-3 rounded-lg bg-gray-50\">\n                    <div className=\"flex-shrink-0 mt-0.5\">\n                      {insight.type === 'warning' && <AlertTriangle className=\"w-4 h-4 text-orange-500\" />}\n                      {insight.type === 'success' && <CheckCircle2 className=\"w-4 h-4 text-green-500\" />}\n                      {insight.type === 'error' && <AlertTriangle className=\"w-4 h-4 text-red-500\" />}\n                      {insight.type === 'info' && <FileText className=\"w-4 h-4 text-blue-500\" />}\n                    </div>\n                    <div className=\"flex-1 space-y-1\">\n                      <p className=\"text-sm font-medium\">{insight.title}</p>\n                      <p className=\"text-xs text-gray-600\">{insight.description}</p>\n                      {insight.action && (\n                        <p className=\"text-xs text-blue-600 font-medium\">{insight.action}</p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 border-0 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center\">\n                  <Projector className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-gray-900\">{activeProjects.length}</p>\n                  <p className=\"text-sm text-gray-600\">Active</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-green-50 to-green-100 border-0 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center\">\n                  <CheckCircle2 className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-gray-900\">{completedProjects.length}</p>\n                  <p className=\"text-sm text-gray-600\">Complete</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 border-0 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-gray-900\">{submittedReports}</p>\n                  <p className=\"text-sm text-gray-600\">Submitted</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 border-0 shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-gray-900\">{draftReports}</p>\n                  <p className=\"text-sm text-gray-600\">Drafts</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Card className=\"bg-white border-0 shadow-lg\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <div className=\"border-b border-gray-200 px-4\">\n              <TabsList className=\"grid w-full grid-cols-4 bg-transparent h-12\">\n                <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Overview\n                </TabsTrigger>\n                <TabsTrigger value=\"projects\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Projects\n                </TabsTrigger>\n                <TabsTrigger value=\"reports\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700\">\n                  Reports\n                </TabsTrigger>\n                <TabsTrigger value=\"messages\" className=\"data-[state=active]:bg-blue-50 data-[state=active]:text-blue-700 relative\">\n                  Messages\n                  {(unreadMessages as any)?.count > 0 && (\n                    <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 h-5 w-5 p-0 text-xs flex items-center justify-center\">\n                      {(unreadMessages as any).count}\n                    </Badge>\n                  )}\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"overview\" className=\"p-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Progress Overview */}\n                <Card className=\"bg-gray-50 border-0\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"w-5 h-5 text-green-600\" />\n                      My Progress\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-2\">\n                        <span>Overall Progress</span>\n                        <span className=\"font-medium\">{avgProgress}%</span>\n                      </div>\n                      <Progress value={avgProgress} className=\"h-3\" />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 text-center\">\n                      <div>\n                        <p className=\"text-2xl font-bold text-green-600\">{completedProjects.length}</p>\n                        <p className=\"text-sm text-gray-600\">Completed</p>\n                      </div>\n                      <div>\n                        <p className=\"text-2xl font-bold text-blue-600\">{activeProjects.length}</p>\n                        <p className=\"text-sm text-gray-600\">In Progress</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Recent Reports */}\n                <Card className=\"bg-gray-50 border-0\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"w-5 h-5 text-blue-600\" />\n                      Recent Reports\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {reportsData.slice(0, 3).map((report: any, index) => (\n                        <div key={index} className=\"flex items-center gap-3 p-2 rounded-lg bg-white\">\n                          <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <FileText className=\"w-4 h-4 text-blue-600\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm font-medium\">{report.title}</p>\n                            <p className=\"text-xs text-gray-600\">\n                              {new Date(report.submittedAt || report.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <Badge variant={report.status === 'approved' ? 'default' : 'secondary'}>\n                            {report.status}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"projects\" className=\"p-6\">\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-xl font-bold text-gray-900\">My Projects</h3>\n                  <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                    <Briefcase className=\"w-4 h-4\" />\n                    <span>{projectsData.length} total projects</span>\n                  </div>\n                </div>\n                \n                <div className=\"grid gap-4 max-h-[500px] overflow-y-auto\">\n                  {projectsData.map((project: any) => (\n                    <Card key={project.id} className=\"border border-gray-100 hover:border-blue-200 transition-all duration-200 bg-gradient-to-r from-white to-gray-50 hover:shadow-md\">\n                      <CardContent className=\"p-5\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-3 mb-2\">\n                              <h4 className=\"font-semibold text-lg text-gray-900 truncate\">{project.name}</h4>\n                              <Badge \n                                variant=\"outline\"\n                                className={\n                                  project.status === 'active' ? 'bg-green-50 text-green-700 border-green-200' : \n                                  project.status === 'completed' ? 'bg-blue-50 text-blue-700 border-blue-200' : \n                                  project.status === 'on-hold' ? 'bg-yellow-50 text-yellow-700 border-yellow-200' :\n                                  'bg-gray-50 text-gray-700 border-gray-200'\n                                }\n                              >\n                                {project.status === 'on-hold' ? 'On Hold' : project.status.charAt(0).toUpperCase() + project.status.slice(1)}\n                              </Badge>\n                            </div>\n                            <p className=\"text-gray-600 mb-4 line-clamp-2\">\n                              {project.description || 'No description available'}\n                            </p>\n                          </div>\n                          \n                          {project.isOverdue && project.status !== 'completed' && (\n                            <Badge variant=\"destructive\" className=\"ml-4\">\n                              <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                              Overdue\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        <div className=\"space-y-4\">\n                          <div>\n                            <div className=\"flex justify-between items-center mb-2\">\n                              <span className=\"text-sm font-medium text-gray-700\">Progress</span>\n                              <span className=\"text-sm font-semibold text-gray-900\">{project.progress || 0}%</span>\n                            </div>\n                            <Progress \n                              value={project.progress || 0} \n                              className=\"h-3 bg-gray-200\"\n                            />\n                          </div>\n                          \n                          <div className=\"grid grid-cols-2 gap-4 pt-2 border-t border-gray-100\">\n                            <div className=\"flex items-center text-sm\">\n                              <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mr-3\">\n                                <Calendar className=\"w-4 h-4 text-blue-600\" />\n                              </div>\n                              <div>\n                                <p className=\"text-gray-500\">Deadline</p>\n                                <p className=\"font-medium text-gray-900\">\n                                  {project.deadline ? new Date(project.deadline).toLocaleDateString() : 'No deadline'}\n                                </p>\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center text-sm\">\n                              <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center mr-3\">\n                                <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                              </div>\n                              <div>\n                                <p className=\"text-gray-500\">Budget</p>\n                                <p className=\"font-medium text-gray-900\">\n                                  ${(project.budget || 0).toLocaleString()}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                  \n                  {projectsData.length === 0 && (\n                    <Card className=\"border-dashed border-2 border-gray-200\">\n                      <CardContent className=\"p-8 text-center\">\n                        <Briefcase className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                        <h4 className=\"text-lg font-medium text-gray-900 mb-2\">No Projects Yet</h4>\n                        <p className=\"text-gray-600\">Contact your admin to get started with projects.</p>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"reports\" className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <h3 className=\"text-lg font-semibold\">My Reports</h3>\n                  <Button onClick={() => setShowReportForm(true)} size=\"sm\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    New Report\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-3 max-h-[400px] overflow-y-auto\">\n                  {reportsData.slice(0, 6).map((report: any) => (\n                    <Card key={report.id} className=\"border border-gray-100 hover:border-blue-200 transition-colors bg-gradient-to-r from-white to-gray-50\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-3 mb-2\">\n                              <h4 className=\"font-semibold text-gray-900 truncate\">{report.title}</h4>\n                              <Badge \n                                variant=\"outline\"\n                                className={\n                                  report.status === 'approved' ? 'bg-green-50 text-green-700 border-green-200' : \n                                  report.status === 'submitted' ? 'bg-blue-50 text-blue-700 border-blue-200' : \n                                  report.status === 'rejected' ? 'bg-red-50 text-red-700 border-red-200' :\n                                  'bg-gray-50 text-gray-700 border-gray-200'\n                                }\n                              >\n                                {report.status.charAt(0).toUpperCase() + report.status.slice(1)}\n                              </Badge>\n                            </div>\n                            <div className=\"flex items-center text-sm text-gray-500 mb-3\">\n                              <Calendar className=\"w-4 h-4 mr-1\" />\n                              Submitted: {new Date(report.submittedAt).toLocaleDateString()}\n                              {report.reviewedAt && (\n                                <>\n                                  <span className=\"mx-2\">•</span>\n                                  <span>Reviewed: {new Date(report.reviewedAt).toLocaleDateString()}</span>\n                                </>\n                              )}\n                            </div>\n                            <p className=\"text-sm text-gray-600 line-clamp-2 mb-3\">\n                              {report.content ? report.content.substring(0, 120) + '...' : 'No content available'}\n                            </p>\n                          </div>\n                          \n                          <div className=\"flex flex-col gap-2 ml-4\">\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => setViewingReport(report)}\n                              className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                            >\n                              <Eye className=\"w-3 h-3 mr-1\" />\n                              View\n                            </Button>\n                            {(report.status === 'draft' || report.status === 'rejected') && (\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => setEditingReport(report)}\n                                className=\"text-orange-600 border-orange-200 hover:bg-orange-50\"\n                              >\n                                <Edit3 className=\"w-3 h-3 mr-1\" />\n                                Edit\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"messages\" className=\"p-6\">\n              <ChatInterface />\n            </TabsContent>\n          </Tabs>\n        </Card>\n\n        {/* Report Form Modal */}\n        {showReportForm && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n            <div className=\"bg-white rounded-2xl shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n              <div className=\"p-6\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h2 className=\"text-xl font-bold\">Submit New Report</h2>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setShowReportForm(false)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n                <ReportForm \n                  onSuccess={() => {\n                    setShowReportForm(false);\n                    refetchReports();\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Edit Report Modal */}\n        {editingReport && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n            <div className=\"bg-white rounded-2xl shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n              <div className=\"p-6\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h2 className=\"text-xl font-bold\">Edit Report</h2>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setEditingReport(null)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n                <ReportForm \n                  reportId={editingReport.id}\n                  onSuccess={() => {\n                    setEditingReport(null);\n                    refetchReports();\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* View Report Modal */}\n        {viewingReport && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n            <div className=\"bg-white rounded-2xl shadow-xl max-w-5xl w-full max-h-[90vh] overflow-y-auto\">\n              <div className=\"p-8\">\n                <div className=\"flex justify-between items-start mb-6\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">{viewingReport.title}</h2>\n                    <div className=\"flex items-center gap-3\">\n                      <Badge \n                        variant=\"outline\"\n                        className={\n                          viewingReport.status === 'approved' ? 'bg-green-50 text-green-700 border-green-200' : \n                          viewingReport.status === 'submitted' ? 'bg-blue-50 text-blue-700 border-blue-200' : \n                          viewingReport.status === 'rejected' ? 'bg-red-50 text-red-700 border-red-200' :\n                          'bg-gray-50 text-gray-700 border-gray-200'\n                        }\n                      >\n                        {viewingReport.status.charAt(0).toUpperCase() + viewingReport.status.slice(1)}\n                      </Badge>\n                      <span className=\"text-sm text-gray-600 flex items-center gap-1\">\n                        <Calendar className=\"w-4 h-4\" />\n                        Submitted: {new Date(viewingReport.submittedAt || Date.now()).toLocaleDateString()}\n                      </span>\n                      {viewingReport.reviewedAt && (\n                        <span className=\"text-sm text-gray-600 flex items-center gap-1\">\n                          <Eye className=\"w-4 h-4\" />\n                          Reviewed: {new Date(viewingReport.reviewedAt).toLocaleDateString()}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setViewingReport(null)}\n                    className=\"shrink-0\"\n                  >\n                    Close\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-6\">\n                  <div className=\"bg-gradient-to-r from-gray-50 to-white rounded-xl p-6 border border-gray-100\">\n                    <h3 className=\"font-semibold text-lg mb-4 flex items-center gap-2\">\n                      <FileText className=\"w-5 h-5 text-blue-600\" />\n                      Report Content\n                    </h3>\n                    <div className=\"prose max-w-none\">\n                      <p className=\"whitespace-pre-wrap text-gray-700 leading-relaxed\">\n                        {viewingReport.content || 'No content available'}\n                      </p>\n                    </div>\n                  </div>\n\n                  {viewingReport.files && Array.isArray(viewingReport.files) && viewingReport.files.length > 0 && (\n                    <div className=\"bg-gradient-to-r from-blue-50 to-white rounded-xl p-6 border border-blue-100\">\n                      <h3 className=\"font-semibold text-lg mb-4 flex items-center gap-2\">\n                        <Paperclip className=\"w-5 h-5 text-blue-600\" />\n                        Attachments ({viewingReport.files.length})\n                      </h3>\n                      <div className=\"grid gap-3\">\n                        {viewingReport.files.map((file: any, index: number) => (\n                          <div key={index} className=\"flex items-center justify-between p-4 bg-white rounded-lg border border-gray-200 hover:border-blue-300 transition-colors\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                                <FileText className=\"w-5 h-5 text-blue-600\" />\n                              </div>\n                              <div>\n                                <p className=\"font-medium text-gray-900\">{file.filename || `Attachment ${index + 1}`}</p>\n                                <p className=\"text-sm text-gray-500\">Click to download</p>\n                              </div>\n                            </div>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => window.open(`/api/reports/${viewingReport.id}/files/${file.filename || index}`, '_blank')}\n                              className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                            >\n                              <ArrowDown className=\"w-4 h-4 mr-1\" />\n                              Download\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {viewingReport.reviewNotes && (\n                    <div className=\"bg-gradient-to-r from-yellow-50 to-white rounded-xl p-6 border border-yellow-200\">\n                      <h3 className=\"font-semibold text-lg mb-4 flex items-center gap-2 text-yellow-800\">\n                        <MessageSquare className=\"w-5 h-5\" />\n                        Admin Review Notes\n                      </h3>\n                      <div className=\"bg-white rounded-lg p-4 border border-yellow-200\">\n                        <p className=\"text-yellow-800 whitespace-pre-wrap leading-relaxed\">\n                          {viewingReport.reviewNotes}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {(viewingReport.status === 'draft' || viewingReport.status === 'rejected') && (\n                    <div className=\"flex justify-end pt-4 border-t border-gray-200\">\n                      <Button \n                        onClick={() => {\n                          setViewingReport(null);\n                          setEditingReport(viewingReport);\n                        }}\n                        className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                      >\n                        <Edit3 className=\"w-4 h-4 mr-2\" />\n                        Edit Report\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {/* Onboarding Walkthrough */}\n        <OnboardingWalkthrough\n          isOpen={showOnboarding}\n          onClose={() => {\n            setShowOnboarding(false);\n            localStorage.setItem('onboarding-completed', 'true');\n          }}\n          userRole=\"officer\"\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":47068},"client/src/components/officer-dashboard.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport ReportForm from \"@/components/report-form\";\nimport ProgressChart from \"@/components/progress-chart\";\nimport AdelLogo from \"@/components/adel-logo\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { t } from \"@/lib/i18n\";\nimport {\n  ListTodo,\n  FileText,\n  Clock,\n  Plus,\n  List,\n  Calendar,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n} from \"lucide-react\";\n\nexport default function OfficerDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: projects, isLoading: projectsLoading } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: reports, isLoading: reportsLoading } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  // Get user's submitted reports - API already filters for current officer\n  const userReports = Array.isArray(reports) ? reports : [];\n  const submittedReports = userReports.filter((report: any) => report.status === \"submitted\");\n  const draftReports = userReports.filter((report: any) => report.status === \"draft\");\n  const approvedReports = userReports.filter((report: any) => report.status === \"approved\");\n  const rejectedReports = userReports.filter((report: any) => report.status === \"rejected\");\n\n  // Debug log to check report statuses\n  console.log(\"=== OFFICER DASHBOARD DEBUG ===\");\n  console.log(\"All reports from API:\", reports);\n  console.log(\"User reports:\", userReports.map(r => ({ id: r.id, title: r.title, status: r.status, submittedBy: r.submittedBy })));\n  console.log(\"Submitted reports count:\", submittedReports.length);\n  console.log(\"Submitted reports:\", submittedReports.map(r => ({ id: r.id, title: r.title, status: r.status })));\n  console.log(\"Current user from useAuth:\", user);\n  console.log(\"User ID for filtering:\", user?.id);\n  console.log(\"CRITICAL DEBUG - submittedReports array:\", submittedReports);\n  console.log(\"CRITICAL DEBUG - submittedReports.length:\", submittedReports?.length);\n  console.log(\"CRITICAL DEBUG - Check first submitted report:\", submittedReports[0]);\n  console.log(\"CRITICAL DEBUG - Reports with 'submitted' status:\", userReports.filter(r => r.status === \"submitted\"));\n  console.log(\"CRITICAL DEBUG - Raw reports from API:\", reports);\n  console.log(\"CRITICAL DEBUG - UserReports before filtering:\", userReports);\n  console.log(\"CRITICAL DEBUG - Authentication data:\", { user, isAuthenticated: !!user });\n  console.log(\"Filtered user reports:\", userReports.length);\n  console.log(\"Filtered submitted reports:\", submittedReports.length);\n  console.log(\"=== END DEBUG ===\");\n\n  // Recall report mutation\n  const recallReportMutation = useMutation({\n    mutationFn: async (reportId: number) => {\n      const response = await fetch(`/api/reports/${reportId}/recall`, {\n        method: 'POST',\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to recall report');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\"] });\n      toast({\n        title: \"Report recalled successfully\",\n        description: \"Your report has been moved back to draft status and can now be edited.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to recall report\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (statsLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header with Logo */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-3\">\n          <AdelLogo size=\"lg\" />\n          <span className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent\">ADEL</span>\n        </div>\n        <Button\n          onClick={() => window.location.href = '/api/auth/logout'}\n          variant=\"outline\"\n          className=\"text-sm\"\n        >\n          Logout\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {Array.isArray(projects) ? projects.length : 0}\n                </p>\n                <p className=\"text-sm text-gray-600\">{t('dashboard.myProjects')}</p>\n              </div>\n              <ListTodo className=\"w-8 h-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {userReports.length || 0}\n                </p>\n                <p className=\"text-sm text-gray-600\">{t('dashboard.reportsSubmitted')}</p>\n              </div>\n              <FileText className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {submittedReports.length}\n                </p>\n                <p className=\"text-sm text-gray-600\">{t('dashboard.pendingReview')}</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"projects\">My Projects</TabsTrigger>\n          <TabsTrigger value=\"reports\">My Reports</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Progress</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('dashboard.quickActions')}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button className=\"w-full bg-blue-500 hover:bg-blue-600 text-white p-4 h-auto\">\n                      <Plus className=\"w-5 h-5 mr-2\" />\n                      {t('dashboard.submitNewReport')}\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle>Submit New Report</DialogTitle>\n                    </DialogHeader>\n                    <ReportForm />\n                  </DialogContent>\n                </Dialog>\n                \n                <Button variant=\"outline\" className=\"w-full p-4 h-auto\">\n                  <List className=\"w-5 h-5 mr-2\" />\n                  {t('dashboard.viewMyProjects')}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Recent Submissions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>{t('dashboard.recentSubmissions')}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {reportsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : userReports.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <FileText className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                    <p>No reports submitted yet</p>\n                    <p className=\"text-sm\">Submit your first report to get started</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {userReports.slice(0, 3).map((report: any) => (\n                      <div key={report.id} className=\"p-4 bg-gray-50 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"font-medium text-gray-900\">{report.title}</div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge \n                              variant={\n                                report.status === \"approved\" ? \"default\" :\n                                report.status === \"rejected\" ? \"destructive\" :\n                                report.status === \"submitted\" ? \"secondary\" : \"outline\"\n                              }\n                              className={\n                                report.status === \"approved\" ? \"bg-green-100 text-green-600\" :\n                                report.status === \"rejected\" ? \"bg-red-100 text-red-600\" :\n                                report.status === \"submitted\" ? \"bg-orange-100 text-orange-600\" :\n                                \"bg-gray-100 text-gray-600\"\n                              }\n                            >\n                              {report.status === \"approved\" && <CheckCircle className=\"w-3 h-3 mr-1\" />}\n                              {report.status === \"rejected\" && <XCircle className=\"w-3 h-3 mr-1\" />}\n                              {report.status === \"submitted\" && <AlertCircle className=\"w-3 h-3 mr-1\" />}\n                              {report.status === \"draft\" && <AlertCircle className=\"w-3 h-3 mr-1\" />}\n                              {report.status.charAt(0).toUpperCase() + report.status.slice(1)}\n                            </Badge>\n                            {report.status === \"submitted\" && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => recallReportMutation.mutate(report.id)}\n                                disabled={recallReportMutation.isPending}\n                                className=\"text-xs h-7 px-2 bg-yellow-50 border-yellow-200 text-yellow-700 hover:bg-yellow-100 font-medium\"\n                              >\n                                📞 Call Back\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"text-sm text-gray-600\">Project #{report.projectId}</div>\n                        {report.submittedAt && (\n                          <div className=\"text-xs text-gray-400 mt-1 flex items-center\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            Submitted {new Date(report.submittedAt).toLocaleDateString()}\n                          </div>\n                        )}\n                        {report.status === \"draft\" && (\n                          <div className=\"text-xs text-yellow-600 mt-1 flex items-center\">\n                            <AlertCircle className=\"w-3 h-3 mr-1\" />\n                            Draft - Not yet submitted\n                          </div>\n                        )}\n                        {report.reviewNotes && (\n                          <div className=\"mt-2 p-2 bg-white rounded border-l-4 border-blue-200\">\n                            <p className=\"text-xs text-gray-600 font-medium\">Review Notes:</p>\n                            <p className=\"text-xs text-gray-500\">{report.reviewNotes}</p>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"projects\">\n          <Card>\n            <CardHeader>\n              <CardTitle>My Assigned Projects</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {projectsLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3].map((i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : (!projects || (Array.isArray(projects) && projects.length === 0)) ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <ListTodo className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>No projects assigned yet</p>\n                  <p className=\"text-sm\">Wait for your admin to assign you to projects</p>\n                </div>\n              ) : (\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  {(Array.isArray(projects) ? projects : []).map((project: any) => (\n                    <Card key={project.id} className=\"border-l-4 border-blue-500\">\n                      <CardContent className=\"p-4\">\n                        <h3 className=\"font-semibold text-gray-900 mb-2\">{project.name}</h3>\n                        <p className=\"text-sm text-gray-600 mb-3\">{project.description}</p>\n                        <div className=\"space-y-2 text-xs text-gray-500\">\n                          {project.budget && (\n                            <div className=\"flex items-center\">\n                              <span className=\"font-medium\">Budget:</span>\n                              <span className=\"ml-1\">${parseFloat(project.budget).toLocaleString()}</span>\n                            </div>\n                          )}\n                          {project.deadline && (\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"w-3 h-3 mr-1\" />\n                              <span className=\"font-medium\">Deadline:</span>\n                              <span className=\"ml-1\">{new Date(project.deadline).toLocaleDateString()}</span>\n                            </div>\n                          )}\n                          {project.goals && (\n                            <div>\n                              <span className=\"font-medium\">Goals:</span>\n                              <p className=\"mt-1\">{project.goals}</p>\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"mt-4 pt-3 border-t\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-xs text-gray-500\">\n                              Reports: {userReports.filter((r: any) => r.projectId === project.id).length}\n                            </span>\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button size=\"sm\" variant=\"outline\">\n                                  <Plus className=\"w-3 h-3 mr-1\" />\n                                  Submit Report\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                                <DialogHeader>\n                                  <DialogTitle>Submit Report - {project.name}</DialogTitle>\n                                </DialogHeader>\n                                <ReportForm projectId={project.id} />\n                              </DialogContent>\n                            </Dialog>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"reports\">\n          <div className=\"space-y-6\">\n            {/* Report Status Overview */}\n            <div className=\"grid md:grid-cols-3 gap-4\">\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"flex items-center justify-center mb-2\">\n                    <CheckCircle className=\"w-8 h-8 text-green-500\" />\n                  </div>\n                  <p className=\"text-2xl font-bold text-green-600\">{approvedReports.length}</p>\n                  <p className=\"text-sm text-gray-600\">Approved Reports</p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"flex items-center justify-center mb-2\">\n                    <AlertCircle className=\"w-8 h-8 text-orange-500\" />\n                  </div>\n                  <p className=\"text-2xl font-bold text-orange-600\">{submittedReports.length}</p>\n                  <p className=\"text-sm text-gray-600\">Awaiting Review</p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"flex items-center justify-center mb-2\">\n                    <XCircle className=\"w-8 h-8 text-red-500\" />\n                  </div>\n                  <p className=\"text-2xl font-bold text-red-600\">{rejectedReports.length}</p>\n                  <p className=\"text-sm text-gray-600\">Rejected Reports</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* All Reports */}\n            <Card>\n              <CardHeader>\n                <CardTitle>All My Reports</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {userReports.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <FileText className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                    <p>No reports submitted yet</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {userReports.map((report: any) => (\n                      <div key={report.id} className=\"p-4 border rounded-lg\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div>\n                            <h4 className=\"font-medium text-gray-900\">{report.title}</h4>\n                            <p className=\"text-sm text-gray-600 mt-1\">{report.content}</p>\n                            <div className=\"flex items-center mt-2 text-xs text-gray-500\">\n                              <Calendar className=\"w-3 h-3 mr-1\" />\n                              Submitted {new Date(report.submittedAt).toLocaleDateString()}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"flex items-center gap-2\">\n                              <Badge \n                                variant={\n                                  report.status === \"approved\" ? \"default\" :\n                                  report.status === \"rejected\" ? \"destructive\" :\n                                  report.status === \"submitted\" ? \"secondary\" : \"outline\"\n                                }\n                                className={\n                                  report.status === \"approved\" ? \"bg-green-100 text-green-600\" :\n                                  report.status === \"rejected\" ? \"bg-red-100 text-red-600\" :\n                                  report.status === \"submitted\" ? \"bg-orange-100 text-orange-600\" :\n                                  \"bg-gray-100 text-gray-600\"\n                                }\n                              >\n                                {report.status === \"approved\" && <CheckCircle className=\"w-3 h-3 mr-1\" />}\n                                {report.status === \"rejected\" && <XCircle className=\"w-3 h-3 mr-1\" />}\n                                {report.status === \"submitted\" && <AlertCircle className=\"w-3 h-3 mr-1\" />}\n                                {report.status === \"draft\" && <AlertCircle className=\"w-3 h-3 mr-1\" />}\n                                {report.status.charAt(0).toUpperCase() + report.status.slice(1)}\n                              </Badge>\n                              {/* Call Back button for submitted reports */}\n                              {report.status === \"submitted\" && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => {\n                                    console.log(\"Recalling report:\", report.id);\n                                    recallReportMutation.mutate(report.id);\n                                  }}\n                                  disabled={recallReportMutation.isPending}\n                                  className=\"text-xs h-7 px-2 bg-yellow-50 border-yellow-200 text-yellow-700 hover:bg-yellow-100 font-medium border-2\"\n                                >\n                                  📞 Call Back\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {report.files && report.files.length > 0 && (\n                          <div className=\"mb-3\">\n                            <p className=\"text-xs text-gray-500 mb-1\">Attachments:</p>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {report.files.map((file: any, index: number) => (\n                                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                  {file.originalName || `File ${index + 1}`}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                        \n                        {report.reviewNotes && (\n                          <div className=\"mt-3 p-3 bg-gray-50 rounded border-l-4 border-blue-200\">\n                            <p className=\"text-xs text-gray-600 font-medium mb-1\">Review Notes:</p>\n                            <p className=\"text-sm text-gray-700\">{report.reviewNotes}</p>\n                            {report.reviewedAt && (\n                              <p className=\"text-xs text-gray-500 mt-2\">\n                                Reviewed {new Date(report.reviewedAt).toLocaleDateString()}\n                              </p>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\">\n          <ProgressChart />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":24244},"client/src/components/officer-messages.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MessageCircle, Clock, User, CheckCircle, Send } from \"lucide-react\";\n\nexport default function OfficerMessages() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [replyMessage, setReplyMessage] = useState(\"\");\n\n  // Get current user\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  // Get organization members to find admin\n  const { data: teamMembers = [] } = useQuery({\n    queryKey: [\"/api/organization/members\"],\n  });\n\n  // Find admin user\n  const admin = Array.isArray(teamMembers) \n    ? teamMembers.find((member: any) => member.role === \"admin\")\n    : null;\n\n  // Get messages between officer and admin\n  const { data: messages = [], isLoading: messagesLoading } = useQuery({\n    queryKey: [\"/api/messages\", admin?.id],\n    enabled: !!admin?.id,\n  });\n\n  // Get unread message count\n  const { data: unreadCount } = useQuery({\n    queryKey: [\"/api/messages/unread/count\"],\n  });\n\n  // Send reply message mutation\n  const sendReplyMutation = useMutation({\n    mutationFn: async (content: string) => {\n      return await apiRequest(\"POST\", \"/api/messages\", {\n        recipientId: admin?.id,\n        content: content.trim(),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message sent\",\n        description: \"Your reply has been sent to the admin.\",\n      });\n      setReplyMessage(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\", admin?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages/unread/count\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (messageId: number) => {\n      return await apiRequest(\"PATCH\", `/api/messages/${messageId}/read`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\", admin?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages/unread/count\"] });\n    },\n  });\n\n  const handleSendReply = () => {\n    if (!replyMessage.trim()) {\n      toast({\n        title: \"Empty message\",\n        description: \"Please enter a message before sending.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    sendReplyMutation.mutate(replyMessage);\n  };\n\n  const handleMarkAsRead = (messageId: number) => {\n    markAsReadMutation.mutate(messageId);\n  };\n\n  if (!admin) {\n    return (\n      <Card className=\"border border-gray-200\">\n        <CardContent className=\"p-8 text-center\">\n          <MessageCircle className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\n          <p className=\"text-gray-500\">No admin found to receive messages from</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Chat Header */}\n      <Card className=\"border border-gray-200\">\n        <CardHeader className=\"bg-gray-50 pb-3\">\n          <CardTitle className=\"flex items-center justify-between text-gray-800\">\n            <div className=\"flex items-center gap-2\">\n              <MessageCircle className=\"h-4 w-4 text-blue-600\" />\n              Chat with Admin\n            </div>\n            {unreadCount?.count > 0 && (\n              <Badge variant=\"destructive\" className=\"text-xs\">\n                {unreadCount.count} unread\n              </Badge>\n            )}\n          </CardTitle>\n        </CardHeader>\n      </Card>\n\n      {/* Chat Messages */}\n      <Card className=\"border border-gray-200\">\n        <CardContent className=\"p-0\">\n          <div className=\"h-96 overflow-y-auto p-4 space-y-3\">\n            {messagesLoading ? (\n              <div className=\"space-y-3\">\n                {[1, 2, 3].map(i => (\n                  <div key={i} className=\"animate-pulse\">\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : Array.isArray(messages) && messages.length > 0 ? (\n              messages.map((message: any) => (\n                <div key={message.id} className=\"space-y-2\">\n                  {/* Message from Admin */}\n                  {message.senderId === admin?.id ? (\n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <User className=\"w-4 h-4 text-blue-600\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <span className=\"text-sm font-medium text-gray-900\">Admin</span>\n                          <span className=\"text-xs text-gray-500\">\n                            {new Date(message.createdAt).toLocaleString()}\n                          </span>\n                        </div>\n                        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 max-w-xs\">\n                          <p className=\"text-gray-700 text-sm\">{message.content}</p>\n                        </div>\n                        {!message.isRead && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => handleMarkAsRead(message.id)}\n                            disabled={markAsReadMutation.isPending}\n                            className=\"text-xs mt-1 h-6 p-1\"\n                          >\n                            Mark as read\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ) : (\n                    /* Message from Officer (current user) */\n                    <div className=\"flex items-start space-x-2 justify-end\">\n                      <div className=\"flex-1 text-right\">\n                        <div className=\"flex items-center justify-end space-x-2 mb-1\">\n                          <span className=\"text-xs text-gray-500\">\n                            {new Date(message.createdAt).toLocaleString()}\n                          </span>\n                          <span className=\"text-sm font-medium text-gray-900\">You</span>\n                        </div>\n                        <div className=\"bg-green-50 border border-green-200 rounded-lg p-3 max-w-xs ml-auto\">\n                          <p className=\"text-gray-700 text-sm\">{message.content}</p>\n                        </div>\n                      </div>\n                      <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <User className=\"w-4 h-4 text-green-600\" />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-12 text-gray-500\">\n                <MessageCircle className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\n                <p>No messages yet</p>\n                <p className=\"text-sm\">Start a conversation with your admin</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Reply Form */}\n      <Card className=\"border border-gray-200\">\n        <CardContent className=\"p-4\">\n          <div className=\"space-y-3\">\n            <Textarea\n              placeholder=\"Type your message to admin...\"\n              value={replyMessage}\n              onChange={(e) => setReplyMessage(e.target.value)}\n              className=\"min-h-[80px]\"\n            />\n            <div className=\"flex justify-end\">\n              <Button\n                onClick={handleSendReply}\n                disabled={sendReplyMutation.isPending || !replyMessage.trim()}\n                className=\"px-6\"\n              >\n                <Send className=\"w-4 h-4 mr-2\" />\n                Send Message\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8591},"client/src/components/onboarding-walkthrough.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  X, \n  ArrowRight, \n  ArrowLeft, \n  CheckCircle, \n  Brain,\n  FileText,\n  Users,\n  BarChart3,\n  MessageSquare,\n  Lightbulb,\n  Target,\n  Clock,\n  TrendingUp\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface OnboardingStep {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ReactNode;\n  targetElement?: string;\n  position: 'top' | 'bottom' | 'left' | 'right' | 'center';\n  content: React.ReactNode;\n}\n\ninterface OnboardingWalkthroughProps {\n  isOpen: boolean;\n  onClose: () => void;\n  userRole: 'admin' | 'officer';\n}\n\nexport default function OnboardingWalkthrough({ isOpen, onClose, userRole }: OnboardingWalkthroughProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  const adminSteps: OnboardingStep[] = [\n    {\n      id: 'welcome',\n      title: 'Welcome to ADEL!',\n      description: 'Your AI-powered project management platform',\n      icon: <Target className=\"w-6 h-6 text-blue-600\" />,\n      position: 'center',\n      content: (\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto\">\n            <Target className=\"w-8 h-8 text-blue-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold\">Welcome to ADEL!</h3>\n          <p className=\"text-gray-600\">\n            ADEL is designed specifically for NGOs and organizations to manage projects efficiently with AI-powered insights.\n            Let's take a quick tour to get you started.\n          </p>\n          <div className=\"bg-blue-50 p-3 rounded-lg\">\n            <p className=\"text-sm text-blue-800\">\n              <strong>Your Role:</strong> Administrator - You have full access to manage projects, review reports, and oversee your team.\n            </p>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'ai-insights',\n      title: 'AI-Powered Dashboard Intelligence',\n      description: 'Get intelligent project analysis and recommendations',\n      icon: <Brain className=\"w-6 h-6 text-purple-600\" />,\n      position: 'center',\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto\">\n            <Brain className=\"w-8 h-8 text-purple-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold\">AI Insights</h3>\n          <p className=\"text-gray-600\">\n            Click the \"AI Insights\" button to get comprehensive project analysis including:\n          </p>\n          <ul className=\"space-y-2 text-sm\">\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Executive summaries of your projects\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Budget efficiency and team engagement metrics\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Risk assessment and recommendations\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Performance charts and visual analytics\n            </li>\n          </ul>\n        </div>\n      )\n    },\n    {\n      id: 'projects',\n      title: 'Project Management',\n      description: 'Create and manage projects with deadlines and budgets',\n      icon: <Target className=\"w-6 h-6 text-green-600\" />,\n      position: 'center',\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n            <Target className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold\">Projects Tab</h3>\n          <p className=\"text-gray-600\">\n            Manage your organization's projects with comprehensive tracking:\n          </p>\n          <div className=\"grid grid-cols-2 gap-3 text-sm\">\n            <div className=\"bg-green-50 p-3 rounded\">\n              <strong>Create Projects</strong>\n              <p className=\"text-gray-600\">Set budgets, deadlines, and assign teams</p>\n            </div>\n            <div className=\"bg-blue-50 p-3 rounded\">\n              <strong>Track Progress</strong>\n              <p className=\"text-gray-600\">Monitor completion and budget usage</p>\n            </div>\n            <div className=\"bg-yellow-50 p-3 rounded\">\n              <strong>Deadline Alerts</strong>\n              <p className=\"text-gray-600\">Get notifications for overdue projects</p>\n            </div>\n            <div className=\"bg-purple-50 p-3 rounded\">\n              <strong>Export Data</strong>\n              <p className=\"text-gray-600\">Generate reports for stakeholders</p>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'reports',\n      title: 'Report Review System',\n      description: 'Review and approve officer reports with AI assistance',\n      icon: <FileText className=\"w-6 h-6 text-orange-600\" />,\n      position: 'center',\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto\">\n            <FileText className=\"w-8 h-8 text-orange-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold\">Reports Tab</h3>\n          <p className=\"text-gray-600\">\n            Efficiently review and manage officer reports:\n          </p>\n          <ul className=\"space-y-2 text-sm\">\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              View pending reports requiring your review\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Download attachments and supporting documents\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Approve, reject, or request revisions\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Generate professional PDF reports for donors\n            </li>\n          </ul>\n          <div className=\"bg-orange-50 p-3 rounded-lg\">\n            <p className=\"text-sm text-orange-800\">\n              <strong>Pro Tip:</strong> Use the PDF Preview feature to create professional reports for stakeholders and donors.\n            </p>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'team',\n      title: 'Team Management',\n      description: 'Manage team members and communication',\n      icon: <Users className=\"w-6 h-6 text-indigo-600\" />,\n      position: 'center',\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"w-16 h-16 bg-indigo-100 rounded-full flex items-center justify-center mx-auto\">\n            <Users className=\"w-8 h-8 text-indigo-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold\">Team Tab</h3>\n          <p className=\"text-gray-600\">\n            Manage your organization's team members and communications:\n          </p>\n          <div className=\"space-y-3\">\n            <div className=\"bg-indigo-50 p-3 rounded\">\n              <strong>Organization Code:</strong>\n              <p className=\"text-sm text-gray-600\">Share your unique code with new team members to join</p>\n            </div>\n            <div className=\"bg-green-50 p-3 rounded\">\n              <strong>Secure Messaging:</strong>\n              <p className=\"text-sm text-gray-600\">Communicate with officers and share files securely</p>\n            </div>\n            <div className=\"bg-blue-50 p-3 rounded\">\n              <strong>Member Overview:</strong>\n              <p className=\"text-sm text-gray-600\">See all team members and their roles</p>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'completion',\n      title: 'You\\'re All Set!',\n      description: 'Start managing your projects with AI-powered insights',\n      icon: <CheckCircle className=\"w-6 h-6 text-green-600\" />,\n      position: 'center',\n      content: (\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold\">You're Ready to Go!</h3>\n          <p className=\"text-gray-600\">\n            You now know the key features of ADEL. Start by creating your first project or reviewing pending reports.\n          </p>\n          <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 p-4 rounded-lg\">\n            <h4 className=\"font-semibold text-blue-800 mb-2\">Quick Actions:</h4>\n            <div className=\"grid grid-cols-2 gap-2 text-sm\">\n              <div className=\"text-blue-700\">• Click \"AI Insights\" for analysis</div>\n              <div className=\"text-blue-700\">• Create your first project</div>\n              <div className=\"text-blue-700\">• Review pending reports</div>\n              <div className=\"text-blue-700\">• Invite team members</div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n  ];\n\n  const officerSteps: OnboardingStep[] = [\n    {\n      id: 'welcome',\n      title: 'Welcome to ADEL!',\n      description: 'Your AI-powered project management platform',\n      icon: <Target className=\"w-6 h-6 text-blue-600\" />,\n      position: 'center',\n      content: (\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto\">\n            <Target className=\"w-8 h-8 text-blue-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold\">Welcome to ADEL!</h3>\n          <p className=\"text-gray-600\">\n            ADEL helps you manage project tasks, submit reports, and collaborate with your team efficiently.\n            Let's explore your dashboard.\n          </p>\n          <div className=\"bg-blue-50 p-3 rounded-lg\">\n            <p className=\"text-sm text-blue-800\">\n              <strong>Your Role:</strong> Officer - You can manage assigned projects, submit reports, and communicate with your admin.\n            </p>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'ai-insights',\n      title: 'AI Project Intelligence',\n      description: 'Get intelligent analysis of your project performance',\n      icon: <Brain className=\"w-6 h-6 text-purple-600\" />,\n      position: 'center',\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto\">\n            <Brain className=\"w-8 h-8 text-purple-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold\">AI Insights</h3>\n          <p className=\"text-gray-600\">\n            The AI Insights feature provides personalized analysis of your project work:\n          </p>\n          <ul className=\"space-y-2 text-sm\">\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Executive summary of your projects and progress\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Performance metrics and completion trends\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Budget utilization and team engagement data\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Visual charts showing your contribution\n            </li>\n          </ul>\n        </div>\n      )\n    },\n    {\n      id: 'projects',\n      title: 'Your Projects',\n      description: 'View and manage your assigned projects',\n      icon: <Target className=\"w-6 h-6 text-green-600\" />,\n      position: 'center',\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n            <Target className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold\">Projects Tab</h3>\n          <p className=\"text-gray-600\">\n            Track your assigned projects and their progress:\n          </p>\n          <div className=\"grid grid-cols-2 gap-3 text-sm\">\n            <div className=\"bg-green-50 p-3 rounded\">\n              <strong>View Details</strong>\n              <p className=\"text-gray-600\">See project goals, budgets, and deadlines</p>\n            </div>\n            <div className=\"bg-blue-50 p-3 rounded\">\n              <strong>Track Progress</strong>\n              <p className=\"text-gray-600\">Monitor completion percentage</p>\n            </div>\n            <div className=\"bg-yellow-50 p-3 rounded\">\n              <strong>Deadline Alerts</strong>\n              <p className=\"text-gray-600\">Stay aware of upcoming deadlines</p>\n            </div>\n            <div className=\"bg-purple-50 p-3 rounded\">\n              <strong>Budget Tracking</strong>\n              <p className=\"text-gray-600\">See budget allocation and usage</p>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'reports',\n      title: 'Report Submission',\n      description: 'Submit progress reports with AI feedback',\n      icon: <FileText className=\"w-6 h-6 text-orange-600\" />,\n      position: 'center',\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto\">\n            <FileText className=\"w-8 h-8 text-orange-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold\">Reports Tab</h3>\n          <p className=\"text-gray-600\">\n            Submit and manage your project reports:\n          </p>\n          <ul className=\"space-y-2 text-sm\">\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Create new reports with rich text and file attachments\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Get AI feedback on report quality before submission\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Edit draft reports and resubmit rejected ones\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Track report status (draft, submitted, approved, rejected)\n            </li>\n          </ul>\n          <div className=\"bg-orange-50 p-3 rounded-lg\">\n            <p className=\"text-sm text-orange-800\">\n              <strong>AI Feature:</strong> Before submitting, get AI suggestions to improve your report quality and clarity.\n            </p>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'messages',\n      title: 'Team Communication',\n      description: 'Communicate securely with your admin and team',\n      icon: <MessageSquare className=\"w-6 h-6 text-indigo-600\" />,\n      position: 'center',\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"w-16 h-16 bg-indigo-100 rounded-full flex items-center justify-center mx-auto\">\n            <MessageSquare className=\"w-8 h-8 text-indigo-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold\">Messages Tab</h3>\n          <p className=\"text-gray-600\">\n            Secure communication with your admin and team:\n          </p>\n          <div className=\"space-y-3\">\n            <div className=\"bg-indigo-50 p-3 rounded\">\n              <strong>Direct Messaging:</strong>\n              <p className=\"text-sm text-gray-600\">Send messages directly to your admin</p>\n            </div>\n            <div className=\"bg-green-50 p-3 rounded\">\n              <strong>File Sharing:</strong>\n              <p className=\"text-sm text-gray-600\">Share documents and files securely</p>\n            </div>\n            <div className=\"bg-blue-50 p-3 rounded\">\n              <strong>Real-time Notifications:</strong>\n              <p className=\"text-sm text-gray-600\">Get notified of new messages instantly</p>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'completion',\n      title: 'Ready to Start!',\n      description: 'Begin working on your projects',\n      icon: <CheckCircle className=\"w-6 h-6 text-green-600\" />,\n      position: 'center',\n      content: (\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <h3 className=\"text-xl font-bold\">You're Ready!</h3>\n          <p className=\"text-gray-600\">\n            You now understand ADEL's key features. Start by reviewing your projects and submitting progress reports.\n          </p>\n          <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 p-4 rounded-lg\">\n            <h4 className=\"font-semibold text-blue-800 mb-2\">Get Started:</h4>\n            <div className=\"grid grid-cols-2 gap-2 text-sm\">\n              <div className=\"text-blue-700\">• Check your assigned projects</div>\n              <div className=\"text-blue-700\">• Submit a progress report</div>\n              <div className=\"text-blue-700\">• Try the AI Insights feature</div>\n              <div className=\"text-blue-700\">• Message your admin</div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n  ];\n\n  const steps = userRole === 'admin' ? adminSteps : officerSteps;\n\n  const nextStep = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    } else {\n      setIsCompleted(true);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const skipTour = () => {\n    localStorage.setItem('onboarding-completed', 'true');\n    onClose();\n  };\n\n  const completeTour = () => {\n    localStorage.setItem('onboarding-completed', 'true');\n    setIsCompleted(true);\n    setTimeout(() => {\n      onClose();\n    }, 2000);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n      <Card className=\"bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[80vh] overflow-y-auto\">\n        <CardContent className=\"p-0\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                {steps[currentStep]?.icon}\n              </div>\n              <div>\n                <h2 className=\"text-lg font-semibold\">{steps[currentStep]?.title}</h2>\n                <p className=\"text-sm text-gray-600\">{steps[currentStep]?.description}</p>\n              </div>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" onClick={skipTour}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"px-6 py-4 bg-gray-50\">\n            <div className=\"flex items-center justify-between text-sm text-gray-600 mb-2\">\n              <span>Step {currentStep + 1} of {steps.length}</span>\n              <span>{Math.round(((currentStep + 1) / steps.length) * 100)}% Complete</span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}\n              />\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-6\">\n            {isCompleted ? (\n              <div className=\"text-center space-y-4\">\n                <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n                  <CheckCircle className=\"w-10 h-10 text-green-600\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-green-800\">Tour Completed!</h3>\n                <p className=\"text-gray-600\">\n                  You're now ready to use ADEL effectively. The dashboard will close automatically.\n                </p>\n                <div className=\"flex items-center justify-center\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n                </div>\n              </div>\n            ) : (\n              steps[currentStep]?.content\n            )}\n          </div>\n\n          {/* Footer */}\n          {!isCompleted && (\n            <div className=\"flex items-center justify-between p-6 border-t border-gray-200 bg-gray-50\">\n              <Button \n                variant=\"outline\" \n                onClick={prevStep}\n                disabled={currentStep === 0}\n                className=\"flex items-center gap-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                Previous\n              </Button>\n\n              <div className=\"flex gap-2\">\n                {steps.map((_, index) => (\n                  <div\n                    key={index}\n                    className={`w-2 h-2 rounded-full transition-colors ${\n                      index === currentStep ? 'bg-blue-600' : \n                      index < currentStep ? 'bg-green-600' : 'bg-gray-300'\n                    }`}\n                  />\n                ))}\n              </div>\n\n              <Button \n                onClick={currentStep === steps.length - 1 ? completeTour : nextStep}\n                className=\"flex items-center gap-2\"\n              >\n                {currentStep === steps.length - 1 ? 'Complete Tour' : 'Next'}\n                <ArrowRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":22784},"client/src/components/organization-info.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Copy, Users, Building2, Calendar, Mail, UserCheck, UserX, AlertTriangle, Search } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { t } from \"@/lib/i18n\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useState } from \"react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\nexport default function OrganizationInfo() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  \n  const { data: organization = {}, isLoading } = useQuery({\n    queryKey: [\"/api/organization\"],\n  });\n\n  const { data: teamMembers = [], isLoading: membersLoading } = useQuery({\n    queryKey: [\"/api/organization/members\"],\n  });\n\n  const removeMemberMutation = useMutation({\n    mutationFn: async (memberId: number) => {\n      await apiRequest(\"DELETE\", `/api/organization/members/${memberId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Team member removed successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/organization/members\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove team member\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text).then(() => {\n      toast({\n        title: t(\"success\"),\n        description: t(\"organizationCodeCopied\"),\n      });\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Building2 className=\"h-5 w-5\" />\n            {t(\"organizationInfo\")}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-3\">\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4\"></div>\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"border border-gray-200\">\n        <CardHeader className=\"bg-gray-50 pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-gray-800\">\n            <Building2 className=\"h-4 w-4 text-red-600\" />\n            Organization\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-1\">\n              <div className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">Name</div>\n              <div className=\"text-sm font-semibold text-gray-900\">\n                {(organization as any)?.name || \"Loading...\"}\n              </div>\n            </div>\n\n            <div className=\"space-y-1\">\n              <div className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">Invitation Code</div>\n              <div className=\"flex items-center space-x-2\">\n                <code className=\"text-sm font-mono bg-gray-100 px-2 py-1 rounded border text-gray-800\">\n                  {(organization as any)?.code || \"Loading...\"}\n                </code>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard((organization as any)?.code || \"\")}\n                  className=\"h-6 w-6 p-0 hover:bg-gray-100\"\n                >\n                  <Copy className=\"w-3 h-3\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"space-y-1\">\n              <div className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">Created</div>\n              <div className=\"flex items-center space-x-1\">\n                <Calendar className=\"w-3 h-3 text-gray-400\" />\n                <span className=\"text-sm text-gray-700\">\n                  {(organization as any)?.createdAt \n                    ? new Date((organization as any).createdAt).toLocaleDateString()\n                    : \"Today\"\n                  }\n                </span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"border border-gray-200\">\n        <CardHeader className=\"bg-gray-50 pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-gray-800\">\n            <Users className=\"h-4 w-4 text-blue-600\" />\n            Team Members ({Array.isArray(teamMembers) ? teamMembers.length : 0})\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-4\">\n          {/* Search Box */}\n          {Array.isArray(teamMembers) && teamMembers.length > 0 && (\n            <div className=\"mb-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search team members...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n          )}\n          \n          {membersLoading ? (\n            <div className=\"space-y-3\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"animate-pulse flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-gray-200 rounded-full\"></div>\n                  <div className=\"space-y-1 flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : Array.isArray(teamMembers) && teamMembers.length > 0 ? (\n            <div className=\"max-h-80 overflow-y-auto space-y-3 pr-2\">\n              {teamMembers\n                .filter((member: any) => {\n                  if (!searchTerm) return true;\n                  const fullName = `${member.firstName || ''} ${member.lastName || ''}`.toLowerCase();\n                  const email = member.email.toLowerCase();\n                  const search = searchTerm.toLowerCase();\n                  return fullName.includes(search) || email.includes(search);\n                })\n                .map((member: any) => (\n                <div key={member.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <UserCheck className=\"w-4 h-4 text-blue-600\" />\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-gray-900\">\n                        {member.firstName && member.lastName \n                          ? `${member.firstName} ${member.lastName}`\n                          : member.email\n                        }\n                      </div>\n                      <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                        <Mail className=\"w-3 h-3\" />\n                        <span>{member.email}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={member.role === 'admin' ? 'default' : 'secondary'}>\n                      {member.role}\n                    </Badge>\n                    {member.role === 'officer' && (\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                          >\n                            <UserX className=\"w-4 h-4\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle className=\"flex items-center gap-2\">\n                              <AlertTriangle className=\"w-5 h-5 text-red-500\" />\n                              Remove Team Member\n                            </AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to remove <strong>{member.firstName && member.lastName ? `${member.firstName} ${member.lastName}` : member.email}</strong> from your organization? \n                              <br /><br />\n                              <span className=\"text-red-600 font-medium\">This action will permanently delete their account and cannot be undone.</span>\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => removeMemberMutation.mutate(member.id)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                              disabled={removeMemberMutation.isPending}\n                            >\n                              {removeMemberMutation.isPending ? \"Removing...\" : \"Remove Member\"}\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Users className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\n              <p>No team members found</p>\n              <p className=\"text-sm\">Invite team members using the invitation code above</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10647},"client/src/components/overdue-notifications.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertTriangle, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface OverdueNotificationsProps {\n  className?: string;\n}\n\nexport default function OverdueNotifications({ className = \"\" }: OverdueNotificationsProps) {\n  const { data: projects } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Filter overdue projects that are still active (not completed or cancelled)\n  const overdueProjects = (projects as any)?.filter((project: any) => \n    project.isOverdue && \n    project.status !== 'completed' && \n    project.status !== 'cancelled' &&\n    (project.progress || 0) < 100  // Also check progress - if 100% then consider completed\n  ) || [];\n\n  if (overdueProjects.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      {overdueProjects.map((project: any) => {\n        const daysOverdue = Math.abs(project.daysLeft || 0);\n        \n        return (\n          <Card key={`overdue-${project.id}`} className=\"border-red-200 bg-red-50\">\n            <CardContent className=\"p-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <AlertTriangle className=\"w-4 h-4 text-red-600\" />\n                  <div>\n                    <p className=\"font-medium text-red-800\">{project.name}</p>\n                    <p className=\"text-sm text-red-600\">\n                      {daysOverdue} day{daysOverdue !== 1 ? 's' : ''} overdue\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    {project.status}\n                  </Badge>\n                  <div className=\"text-xs text-red-600\">\n                    <div>Progress: {project.progress || 0}%</div>\n                    <div>Due: {new Date(project.deadline).toLocaleDateString()}</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":2290},"client/src/components/pdf-report-preview.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  FileText,\n  Download,\n  Calendar,\n  User,\n  Building,\n  Target,\n  DollarSign,\n  TrendingUp,\n  CheckCircle2,\n  TrendingDown,\n  BarChart3,\n  Clock,\n  X,\n  Maximize2,\n  ChevronDown\n} from \"lucide-react\";\n\ninterface PDFReportPreviewProps {\n  isOpen: boolean;\n  onClose: () => void;\n  organizationData?: any;\n  projectsData?: any[];\n  reportsData?: any[];\n  statsData?: any;\n}\n\nexport default function PDFReportPreview({ \n  isOpen, \n  onClose, \n  organizationData, \n  projectsData, \n  reportsData, \n  statsData \n}: PDFReportPreviewProps) {\n  const [selectedReport, setSelectedReport] = useState(\"progress\");\n\n  // Use real data with fallbacks\n  const orgData = organizationData as any;\n  const projects = projectsData as any[] || [];\n  const reports = reportsData as any[] || [];\n  const stats = statsData as any;\n\n  if (!isOpen) return null;\n\n  const downloadPDF = async (reportType: string, projectSpecific?: boolean, projectName?: string) => {\n    try {\n      // Generate the HTML content for the PDF\n      const reportContent = generateReportHTML(reportType, projectSpecific, projectName);\n      \n      // Dynamic filename based on bulk vs specific project\n      let filename: string;\n      let reportTitle: string;\n      \n      if (projectSpecific && projectName) {\n        reportTitle = `${projectName}: ${reportTypes[reportType as keyof typeof reportTypes].title}`;\n        filename = `${projectName}_${reportTypes[reportType as keyof typeof reportTypes].title.replace(/\\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;\n      } else {\n        reportTitle = `${orgData?.name || 'hjhjhj'}: Project Management Report`;\n        filename = `${orgData?.name || 'Organization'}_Project_Management_Report_${new Date().toISOString().split('T')[0]}.pdf`;\n      }\n      \n      // Create complete HTML content for PDF generation\n      const htmlContent = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <title>${reportTitle}</title>\n            <style>\n              body { \n                font-family: Arial, sans-serif; \n                line-height: 1.6; \n                color: #333;\n                margin: 0;\n                padding: 20px;\n              }\n              .header { \n                background: linear-gradient(135deg, #2563eb, #7c3aed);\n                color: white; \n                padding: 30px; \n                margin: -20px -20px 30px -20px;\n                border-radius: 0;\n              }\n              .org-info { display: flex; justify-content: space-between; align-items: center; }\n              .org-name { font-size: 28px; font-weight: bold; margin-bottom: 5px; }\n              .org-subtitle { opacity: 0.8; }\n              .report-title { font-size: 24px; font-weight: bold; margin: 30px 0 20px 0; }\n              .section { margin: 30px 0; }\n              .section h3 { color: #1f2937; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px; }\n              .metric-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }\n              .metric-card { \n                border: 1px solid #e5e7eb; \n                border-radius: 8px; \n                padding: 20px; \n                background: #f9fafb;\n              }\n              .metric-value { font-size: 32px; font-weight: bold; color: #2563eb; }\n              .metric-label { color: #6b7280; font-size: 14px; margin-top: 5px; }\n              .progress-bar { \n                background: #e5e7eb; \n                border-radius: 10px; \n                height: 20px; \n                overflow: hidden; \n                margin: 10px 0;\n              }\n              .progress-fill { \n                background: linear-gradient(90deg, #10b981, #06b6d4); \n                height: 100%; \n                transition: width 0.3s ease;\n              }\n              .table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n              .table th, .table td { border: 1px solid #e5e7eb; padding: 12px; text-align: left; }\n              .table th { background: #f3f4f6; font-weight: bold; }\n              .footer { \n                margin-top: 50px; \n                padding-top: 20px; \n                border-top: 1px solid #e5e7eb; \n                text-align: center; \n                color: #6b7280; \n                font-size: 12px;\n              }\n            </style>\n          </head>\n          <body>\n            ${reportContent}\n            <div class=\"footer\">\n              <p>Generated on ${new Date().toLocaleDateString()} | ${orgData?.name || 'Organization'} - Professional Report</p>\n            </div>\n          </body>\n        </html>\n      `;\n\n      // Call server endpoint to generate PDF\n      const response = await fetch('/api/generate-pdf', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          htmlContent,\n          filename,\n          reportType\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to generate PDF: ${response.statusText}`);\n      }\n\n      // Get PDF blob from response\n      const pdfBlob = await response.blob();\n      \n      // Create and trigger download\n      const url = URL.createObjectURL(pdfBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n\n    } catch (error) {\n      console.error('PDF download error:', error);\n      // Fallback to show error message\n      alert('Failed to generate PDF. Please try again.');\n    }\n  };\n\n  const generateReportHTML = (reportType: string, projectSpecific?: boolean, projectName?: string) => {\n    const currentReport = reportTypes[reportType as keyof typeof reportTypes];\n    \n    let content = `\n      <div class=\"header\">\n        <div class=\"org-info\">\n          <div>\n            <div class=\"org-name\">${orgData?.name || 'hjhjhj'}</div>\n            <div class=\"org-subtitle\">${projectSpecific && projectName ? `${projectName} - Project Report` : 'Project Management Report'}</div>\n          </div>\n          <div style=\"text-align: right;\">\n            <div style=\"opacity: 0.8; font-size: 14px;\">Generated on</div>\n            <div style=\"font-weight: bold;\">${new Date().toLocaleDateString()}</div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"report-title\">${currentReport.title}</div>\n      \n      <div class=\"section\">\n        <h3>Executive Summary</h3>\n    `;\n\n    if (reportType === 'progress') {\n      content += `\n        <p>This comprehensive progress report provides detailed insights into our organization's project portfolio performance. Our analysis shows strong momentum across ${stats?.activeProjects || 0} active initiatives.</p>\n        \n        <div class=\"metric-grid\">\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">${stats?.activeProjects || 0}</div>\n            <div class=\"metric-label\">Active Projects</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">${stats?.completedProjects || 0}</div>\n            <div class=\"metric-label\">Completed Projects</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">${Math.round(((stats?.completedProjects || 0) / Math.max((stats?.activeProjects || 0) + (stats?.completedProjects || 0), 1)) * 100)}%</div>\n            <div class=\"metric-label\">Success Rate</div>\n          </div>\n        </div>\n\n        <h3>Project Progress Overview</h3>\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>Project Name</th>\n              <th>Progress</th>\n              <th>Status</th>\n              <th>Budget Utilization</th>\n            </tr>\n          </thead>\n          <tbody>\n      `;\n\n      projects?.forEach((project: any) => {\n        const progress = project.progress || 0;\n        const budgetUsed = ((project.spentAmount || 0) / Math.max(project.budget || 1, 1)) * 100;\n        content += `\n          <tr>\n            <td>${project.name}</td>\n            <td>\n              <div class=\"progress-bar\">\n                <div class=\"progress-fill\" style=\"width: ${progress}%\"></div>\n              </div>\n              ${progress}%\n            </td>\n            <td>${project.status}</td>\n            <td>${budgetUsed.toFixed(1)}%</td>\n          </tr>\n        `;\n      });\n\n      content += `\n          </tbody>\n        </table>\n      `;\n\n    } else if (reportType === 'financial') {\n      const totalBudget = projects?.reduce((sum: number, p: any) => sum + (p.budget || 0), 0) || 0;\n      const totalSpent = projects?.reduce((sum: number, p: any) => sum + (p.spentAmount || 0), 0) || 0;\n      const utilizationRate = totalBudget > 0 ? (totalSpent / totalBudget) * 100 : 0;\n\n      content += `\n        <p>Our financial analysis demonstrates strong fiscal responsibility with a ${utilizationRate.toFixed(1)}% budget utilization rate across all active projects. This report provides comprehensive insights into our resource allocation and spending efficiency.</p>\n        \n        <div class=\"metric-grid\">\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">$${totalBudget.toLocaleString()}</div>\n            <div class=\"metric-label\">Total Budget Allocated</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">$${totalSpent.toLocaleString()}</div>\n            <div class=\"metric-label\">Total Amount Spent</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">$${(totalBudget - totalSpent).toLocaleString()}</div>\n            <div class=\"metric-label\">Remaining Budget</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">${utilizationRate.toFixed(1)}%</div>\n            <div class=\"metric-label\">Budget Utilization</div>\n          </div>\n        </div>\n\n        <h3>Project Financial Breakdown</h3>\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>Project Name</th>\n              <th>Total Budget</th>\n              <th>Amount Spent</th>\n              <th>Remaining</th>\n              <th>Utilization %</th>\n            </tr>\n          </thead>\n          <tbody>\n      `;\n\n      projects?.forEach((project: any) => {\n        const budget = project.budget || 0;\n        const spent = project.spentAmount || 0;\n        const remaining = budget - spent;\n        const utilization = budget > 0 ? (spent / budget) * 100 : 0;\n        \n        content += `\n          <tr>\n            <td>${project.name}</td>\n            <td>$${budget.toLocaleString()}</td>\n            <td>$${spent.toLocaleString()}</td>\n            <td>$${remaining.toLocaleString()}</td>\n            <td>${utilization.toFixed(1)}%</td>\n          </tr>\n        `;\n      });\n\n      content += `\n          </tbody>\n        </table>\n      `;\n\n    } else if (reportType === 'analytics') {\n      const approvedReports = reports?.filter((r: any) => r.status === 'approved').length || 0;\n      const totalReports = reports?.length || 0;\n      const approvalRate = totalReports > 0 ? (approvedReports / totalReports) * 100 : 0;\n\n      content += `\n        <p>Our analytics dashboard reveals strong organizational performance with a ${approvalRate.toFixed(1)}% report approval rate and consistent project delivery across all departments.</p>\n        \n        <div class=\"metric-grid\">\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">${stats?.activeProjects + stats?.completedProjects || 0}</div>\n            <div class=\"metric-label\">Total Projects</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">${totalReports}</div>\n            <div class=\"metric-label\">Reports Submitted</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">${approvalRate.toFixed(1)}%</div>\n            <div class=\"metric-label\">Approval Rate</div>\n          </div>\n          <div class=\"metric-card\">\n            <div class=\"metric-value\">${stats?.teamMembers || 0}</div>\n            <div class=\"metric-label\">Team Members</div>\n          </div>\n        </div>\n\n        <h3>Performance Analytics</h3>\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>Metric</th>\n              <th>Current Value</th>\n              <th>Target</th>\n              <th>Performance</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Project Completion Rate</td>\n              <td>${Math.round(((stats?.completedProjects || 0) / Math.max((stats?.activeProjects || 0) + (stats?.completedProjects || 0), 1)) * 100)}%</td>\n              <td>85%</td>\n              <td>Excellent</td>\n            </tr>\n            <tr>\n              <td>Report Approval Rate</td>\n              <td>${approvalRate.toFixed(1)}%</td>\n              <td>90%</td>\n              <td>Good</td>\n            </tr>\n            <tr>\n              <td>Budget Efficiency</td>\n              <td>92%</td>\n              <td>90%</td>\n              <td>Exceeds Target</td>\n            </tr>\n            <tr>\n              <td>Team Productivity</td>\n              <td>88%</td>\n              <td>80%</td>\n              <td>Above Average</td>\n            </tr>\n          </tbody>\n        </table>\n      `;\n    }\n\n    content += `\n      </div>\n    `;\n\n    return content;\n  };\n\n  const reportTypes = {\n    progress: {\n      title: \"Monthly Progress Report\",\n      date: \"December 2024\",\n      type: \"Progress Report\",\n      color: \"bg-blue-500\"\n    },\n    financial: {\n      title: \"Financial Summary Report\",\n      date: \"Q4 2024\",\n      type: \"Financial Report\", \n      color: \"bg-green-500\"\n    },\n    analytics: {\n      title: \"Project Analytics Dashboard\",\n      date: \"2024 Annual\",\n      type: \"Analytics Report\",\n      color: \"bg-purple-500\"\n    }\n  };\n\n  const currentReport = reportTypes[selectedReport as keyof typeof reportTypes];\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white dark:bg-gray-900 rounded-xl shadow-2xl max-w-6xl w-full max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg p-2\">\n              <FileText className=\"h-6 w-6 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                Interactive PDF Report Preview\n              </h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                See how your reports look when exported for donors and stakeholders\n              </p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n          >\n            <X className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        <div className=\"flex h-[calc(90vh-100px)]\">\n          {/* Sidebar - Report Types */}\n          <div className=\"w-80 border-r border-gray-200 dark:border-gray-700 p-6 bg-gray-50 dark:bg-gray-800\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white mb-4\">\n              Report Templates\n            </h3>\n            \n            <div className=\"space-y-3\">\n              {Object.entries(reportTypes).map(([key, report]) => (\n                <Card \n                  key={key}\n                  className={`cursor-pointer transition-all duration-200 hover:shadow-md ${\n                    selectedReport === key \n                      ? 'ring-2 ring-blue-500 bg-blue-50 dark:bg-blue-900/20' \n                      : 'hover:bg-gray-100 dark:hover:bg-gray-700'\n                  }`}\n                  onClick={() => setSelectedReport(key)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`${report.color} rounded-full p-2`}>\n                        <FileText className=\"h-4 w-4 text-white\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-gray-900 dark:text-white text-sm\">\n                          {report.title}\n                        </h4>\n                        <p className=\"text-xs text-gray-600 dark:text-gray-300\">\n                          {report.date}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge \n                      variant=\"secondary\" \n                      className=\"mt-2 text-xs\"\n                    >\n                      {report.type}\n                    </Badge>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n              <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">\n                Export Features\n              </h4>\n              <ul className=\"space-y-2 text-sm text-blue-800 dark:text-blue-200\">\n                <li className=\"flex items-center\">\n                  <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                  Professional branding\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                  Interactive charts\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                  Donor-ready format\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                  Custom branding\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          {/* Main Preview Area */}\n          <div className=\"flex-1 bg-gray-100 dark:bg-gray-900 p-6\">\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg h-full overflow-auto max-h-[600px]\">\n              {/* PDF Header */}\n              <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6 sticky top-0 z-10\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"bg-white/20 rounded-lg p-3\">\n                      <Building className=\"h-8 w-8\" />\n                    </div>\n                    <div>\n                      <h1 className=\"text-2xl font-bold\">{orgData?.name || 'hjhjhj'}</h1>\n                      <p className=\"text-blue-100\">Project Management Report</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-blue-100 text-sm\">Generated on</p>\n                    <p className=\"font-semibold\">{new Date().toLocaleDateString('en-GB')}</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Report Content */}\n              <div className=\"p-6 space-y-6\">\n                {/* Report Header Section */}\n                <div className=\"space-y-4 mb-8\">\n                  <div className=\"flex flex-col lg:flex-row lg:items-start lg:justify-between gap-4\">\n                    <div className=\"flex-1\">\n                      <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-3\">\n                        {currentReport.title}\n                      </h2>\n                      <div className=\"flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-300\">\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-2\" />\n                          {currentReport.date}\n                        </div>\n                        <div className=\"flex items-center\">\n                          <User className=\"h-4 w-4 mr-2\" />\n                          Sarah Johnson, Project Manager\n                        </div>\n                        <Badge className={`${currentReport.color} text-white`}>\n                          {currentReport.type}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Download Options Section */}\n                  <div className=\"space-y-6 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                    {/* Organization-Wide Report */}\n                    <div className=\"bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-6 border border-green-200 dark:border-green-800\">\n                      <div className=\"flex items-start space-x-4\">\n                        <div className=\"bg-gradient-to-r from-green-500 to-emerald-500 rounded-lg p-3 shadow-lg\">\n                          <Download className=\"w-6 h-6 text-white\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-lg font-semibold text-green-900 dark:text-green-100 mb-2\">\n                            Organization-Wide Report\n                          </h3>\n                          <p className=\"text-sm text-green-700 dark:text-green-300 mb-4 leading-relaxed\">\n                            Download a comprehensive report containing all projects, metrics, and analytics for your entire organization. Perfect for board meetings and stakeholder presentations.\n                          </p>\n                          <div className=\"flex items-center space-x-3 text-xs text-green-600 dark:text-green-400 mb-4\">\n                            <div className=\"flex items-center\">\n                              <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n                              {stats?.activeProjects || 0} Projects\n                            </div>\n                            <div className=\"flex items-center\">\n                              <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n                              {reports.length} Reports\n                            </div>\n                            <div className=\"flex items-center\">\n                              <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n                              Complete Analytics\n                            </div>\n                          </div>\n                          <Button\n                            onClick={() => downloadPDF(selectedReport, false)}\n                            className=\"bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 px-6 py-2.5 text-sm font-medium\"\n                          >\n                            <Download className=\"w-4 h-4 mr-2\" />\n                            Download Organization Report\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Project-Specific Report */}\n                    {projects.length > 0 && (\n                      <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl p-6 border border-blue-200 dark:border-blue-800\">\n                        <div className=\"flex items-start space-x-4\">\n                          <div className=\"bg-gradient-to-r from-blue-500 to-indigo-500 rounded-lg p-3 shadow-lg\">\n                            <FileText className=\"w-6 h-6 text-white\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <h3 className=\"text-lg font-semibold text-blue-900 dark:text-blue-100 mb-2\">\n                              Project-Specific Report\n                            </h3>\n                            <p className=\"text-sm text-blue-700 dark:text-blue-300 mb-4 leading-relaxed\">\n                              Generate a focused report for a specific project. Includes detailed progress, budget analysis, and project-specific metrics.\n                            </p>\n                            <div className=\"flex items-center space-x-3 text-xs text-blue-600 dark:text-blue-400 mb-4\">\n                              <div className=\"flex items-center\">\n                                <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n                                Detailed Progress\n                              </div>\n                              <div className=\"flex items-center\">\n                                <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n                                Budget Analysis\n                              </div>\n                              <div className=\"flex items-center\">\n                                <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n                                Team Insights\n                              </div>\n                            </div>\n                            <div className=\"relative\">\n                              <select\n                                onChange={(e) => {\n                                  const projectName = e.target.value;\n                                  if (projectName) {\n                                    downloadPDF(selectedReport, true, projectName);\n                                    // Reset selection after download\n                                    e.target.value = \"\";\n                                  }\n                                }}\n                                className=\"w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-4 py-2.5 rounded-lg shadow-lg cursor-pointer border-0 font-medium text-sm transition-all duration-300 hover:shadow-xl appearance-none pr-10\"\n                                defaultValue=\"\"\n                              >\n                                <option value=\"\" disabled className=\"bg-gray-800 text-gray-300\">\n                                  Select Project to Download\n                                </option>\n                                {projects.map((project: any) => (\n                                  <option key={project.id} value={project.name} className=\"bg-white text-gray-900 py-2\">\n                                    {project.name}\n                                  </option>\n                                ))}\n                              </select>\n                              <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none\">\n                                <ChevronDown className=\"w-4 h-4 text-white/80\" />\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Download Tips */}\n                    <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n                      <h4 className=\"text-sm font-medium text-gray-900 dark:text-gray-100 mb-2\">\n                        Download Tips\n                      </h4>\n                      <ul className=\"space-y-1 text-xs text-gray-600 dark:text-gray-400\">\n                        <li className=\"flex items-center\">\n                          <CheckCircle2 className=\"w-3 h-3 mr-2 text-green-500\" />\n                          Reports are generated in PDF format for professional sharing\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle2 className=\"w-3 h-3 mr-2 text-green-500\" />\n                          All data is real-time and reflects current project status\n                        </li>\n                        <li className=\"flex items-center\">\n                          <CheckCircle2 className=\"w-3 h-3 mr-2 text-green-500\" />\n                          Professional formatting suitable for stakeholder presentations\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Executive Summary */}\n                <div className=\"mb-8\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\n                    Executive Summary\n                  </h3>\n                  <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n                    <p className=\"text-gray-700 dark:text-gray-300\">\n                      {selectedReport === 'progress' && (\n                        `This month's progress report highlights significant achievements across our active projects. \n                        ${orgData?.name || 'Our organization'} currently manages ${stats?.activeProjects || 0} active projects \n                        with ${reports.length} detailed reports submitted for stakeholder review. Project milestones are being \n                        met consistently with strong team engagement and measurable impact.`\n                      )}\n                      {selectedReport === 'financial' && (\n                        `Financial analysis for Q4 2024 demonstrates strong budget management and resource allocation. \n                        ${orgData?.name || 'Our organization'} has maintained fiscal responsibility across ${stats?.activeProjects || 0} \n                        active projects with total budget utilization of $${(() => {\n                          const totalBudget = projects.reduce((sum: number, p: any) => \n                            sum + parseFloat(p.budgetUsed || 0), 0);\n                          return totalBudget.toLocaleString();\n                        })()} and transparent financial reporting processes in place.`\n                      )}\n                      {selectedReport === 'analytics' && (\n                        `Comprehensive analytics dashboard showing organizational performance metrics and project outcomes. \n                        ${orgData?.name || 'Our organization'} has completed ${stats?.completedProjects || 0} projects this year \n                        with ${reports.length} analytical reports providing data-driven insights for strategic decision making \n                        and continuous improvement initiatives.`\n                      )}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Key Metrics */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n                  {selectedReport === 'progress' && (\n                    <>\n                      <Card className=\"border-0 bg-blue-50 dark:bg-blue-900/20\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-blue-600 dark:text-blue-400 text-sm font-medium\">\n                                Active Projects\n                              </p>\n                              <p className=\"text-2xl font-bold text-blue-800 dark:text-blue-200\">\n                                {stats?.activeProjects || 0}\n                              </p>\n                            </div>\n                            <Target className=\"h-8 w-8 text-blue-500\" />\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      <Card className=\"border-0 bg-green-50 dark:bg-green-900/20\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-green-600 dark:text-green-400 text-sm font-medium\">\n                                Milestones Achieved\n                              </p>\n                              <p className=\"text-2xl font-bold text-green-800 dark:text-green-200\">\n                                {(() => {\n                                  const totalProgress = projects.reduce((sum: number, p: any) => \n                                    sum + (parseFloat(p.progress || 0)), 0);\n                                  return Math.round(totalProgress / Math.max(projects.length, 1));\n                                })()}%\n                              </p>\n                            </div>\n                            <CheckCircle2 className=\"h-8 w-8 text-green-500\" />\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      <Card className=\"border-0 bg-purple-50 dark:bg-purple-900/20\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-purple-600 dark:text-purple-400 text-sm font-medium\">\n                                Reports Submitted\n                              </p>\n                              <p className=\"text-2xl font-bold text-purple-800 dark:text-purple-200\">\n                                {reports.length}\n                              </p>\n                            </div>\n                            <FileText className=\"h-8 w-8 text-purple-500\" />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </>\n                  )}\n\n                  {selectedReport === 'financial' && (\n                    <>\n                      <Card className=\"border-0 bg-green-50 dark:bg-green-900/20\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-green-600 dark:text-green-400 text-sm font-medium\">\n                                Total Budget\n                              </p>\n                              <p className=\"text-2xl font-bold text-green-800 dark:text-green-200\">\n                                ${(() => {\n                                  const totalBudget = projects.reduce((sum: number, p: any) => \n                                    sum + parseFloat(p.budget || 0), 0);\n                                  return totalBudget.toLocaleString();\n                                })()}\n                              </p>\n                            </div>\n                            <DollarSign className=\"h-8 w-8 text-green-500\" />\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      <Card className=\"border-0 bg-blue-50 dark:bg-blue-900/20\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-blue-600 dark:text-blue-400 text-sm font-medium\">\n                                Amount Spent\n                              </p>\n                              <p className=\"text-2xl font-bold text-blue-800 dark:text-blue-200\">\n                                ${(() => {\n                                  const totalSpent = projects.reduce((sum: number, p: any) => \n                                    sum + parseFloat(p.budgetUsed || 0), 0);\n                                  return totalSpent.toLocaleString();\n                                })()}\n                              </p>\n                            </div>\n                            <TrendingDown className=\"h-8 w-8 text-blue-500\" />\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      <Card className=\"border-0 bg-orange-50 dark:bg-orange-900/20\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-orange-600 dark:text-orange-400 text-sm font-medium\">\n                                Budget Efficiency\n                              </p>\n                              <p className=\"text-2xl font-bold text-orange-800 dark:text-orange-200\">\n                                {(() => {\n                                  const totalBudget = projects.reduce((sum: number, p: any) => \n                                    sum + parseFloat(p.budget || 0), 0);\n                                  const totalSpent = projects.reduce((sum: number, p: any) => \n                                    sum + parseFloat(p.budgetUsed || 0), 0);\n                                  const efficiency = totalBudget > 0 ? Math.round((totalSpent / totalBudget) * 100) : 0;\n                                  return efficiency;\n                                })()}%\n                              </p>\n                            </div>\n                            <BarChart3 className=\"h-8 w-8 text-orange-500\" />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </>\n                  )}\n\n                  {selectedReport === 'analytics' && (\n                    <>\n                      <Card className=\"border-0 bg-purple-50 dark:bg-purple-900/20\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-purple-600 dark:text-purple-400 text-sm font-medium\">\n                                Projects Completed\n                              </p>\n                              <p className=\"text-2xl font-bold text-purple-800 dark:text-purple-200\">\n                                {stats?.completedProjects || 0}\n                              </p>\n                            </div>\n                            <CheckCircle2 className=\"h-8 w-8 text-purple-500\" />\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      <Card className=\"border-0 bg-blue-50 dark:bg-blue-900/20\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-blue-600 dark:text-blue-400 text-sm font-medium\">\n                                Success Rate\n                              </p>\n                              <p className=\"text-2xl font-bold text-blue-800 dark:text-blue-200\">\n                                {(() => {\n                                  const total = (stats?.activeProjects || 0) + (stats?.completedProjects || 0);\n                                  const completed = stats?.completedProjects || 0;\n                                  return total > 0 ? Math.round((completed / total) * 100) : 0;\n                                })()}%\n                              </p>\n                            </div>\n                            <TrendingUp className=\"h-8 w-8 text-blue-500\" />\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      <Card className=\"border-0 bg-indigo-50 dark:bg-indigo-900/20\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-indigo-600 dark:text-indigo-400 text-sm font-medium\">\n                                Data Points\n                              </p>\n                              <p className=\"text-2xl font-bold text-indigo-800 dark:text-indigo-200\">\n                                {reports.length * 15}\n                              </p>\n                            </div>\n                            <BarChart3 className=\"h-8 w-8 text-indigo-500\" />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </>\n                  )}\n                </div>\n\n                {/* Template-Specific Content */}\n                <div className=\"mb-8\">\n                  {selectedReport === 'progress' && (\n                    <>\n                      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\n                        Project Progress Details\n                      </h3>\n                      <div className=\"space-y-4\">\n                        {projects.map((project: any, index: number) => (\n                          <Card key={index} className=\"border-0 bg-gray-50 dark:bg-gray-700\">\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <h4 className=\"font-medium text-gray-900 dark:text-white\">\n                                  {project.name}\n                                </h4>\n                                <Badge variant=\"secondary\">\n                                  {project.progress || 0}% Complete\n                                </Badge>\n                              </div>\n                              <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-3\">\n                                {project.description || 'Project in active development'}\n                              </p>\n                              <div className=\"w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2\">\n                                <div \n                                  className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                                  style={{ width: `${project.progress || 0}%` }}\n                                ></div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    </>\n                  )}\n\n                  {selectedReport === 'financial' && (\n                    <>\n                      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\n                        Budget Breakdown by Project\n                      </h3>\n                      <div className=\"space-y-4\">\n                        {projects.map((project: any, index: number) => (\n                          <Card key={index} className=\"border-0 bg-gray-50 dark:bg-gray-700\">\n                            <CardContent className=\"p-4\">\n                              <div className=\"flex items-center justify-between mb-3\">\n                                <h4 className=\"font-medium text-gray-900 dark:text-white\">\n                                  {project.name}\n                                </h4>\n                                <div className=\"text-right\">\n                                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                                    Budget: ${parseFloat(project.budget || 0).toLocaleString()}\n                                  </p>\n                                  <p className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">\n                                    Spent: ${parseFloat(project.budgetUsed || 0).toLocaleString()}\n                                  </p>\n                                </div>\n                              </div>\n                              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                                <div>\n                                  <p className=\"text-gray-600 dark:text-gray-300\">Utilization Rate</p>\n                                  <p className=\"font-medium text-green-600 dark:text-green-400\">\n                                    {project.budget ? Math.round((parseFloat(project.budgetUsed || 0) / parseFloat(project.budget)) * 100) : 0}%\n                                  </p>\n                                </div>\n                                <div>\n                                  <p className=\"text-gray-600 dark:text-gray-300\">Remaining</p>\n                                  <p className=\"font-medium text-gray-900 dark:text-white\">\n                                    ${(parseFloat(project.budget || 0) - parseFloat(project.budgetUsed || 0)).toLocaleString()}\n                                  </p>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    </>\n                  )}\n\n                  {selectedReport === 'analytics' && (\n                    <>\n                      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\n                        Performance Analytics Summary\n                      </h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <Card className=\"border-0 bg-gray-50 dark:bg-gray-700\">\n                          <CardContent className=\"p-4\">\n                            <h4 className=\"font-medium text-gray-900 dark:text-white mb-3\">\n                              Project Status Distribution\n                            </h4>\n                            <div className=\"space-y-2\">\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-sm text-gray-600 dark:text-gray-300\">Active</span>\n                                <span className=\"font-medium text-blue-600\">{stats?.activeProjects || 0}</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-sm text-gray-600 dark:text-gray-300\">Completed</span>\n                                <span className=\"font-medium text-green-600\">{stats?.completedProjects || 0}</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-sm text-gray-600 dark:text-gray-300\">Reports Generated</span>\n                                <span className=\"font-medium text-purple-600\">{reports.length}</span>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n\n                        <Card className=\"border-0 bg-gray-50 dark:bg-gray-700\">\n                          <CardContent className=\"p-4\">\n                            <h4 className=\"font-medium text-gray-900 dark:text-white mb-3\">\n                              Key Performance Indicators\n                            </h4>\n                            <div className=\"space-y-2\">\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-sm text-gray-600 dark:text-gray-300\">Success Rate</span>\n                                <span className=\"font-medium text-green-600\">\n                                  {(() => {\n                                    const total = (stats?.activeProjects || 0) + (stats?.completedProjects || 0);\n                                    const completed = stats?.completedProjects || 0;\n                                    return total > 0 ? Math.round((completed / total) * 100) : 0;\n                                  })()}%\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-sm text-gray-600 dark:text-gray-300\">Avg. Progress</span>\n                                <span className=\"font-medium text-blue-600\">\n                                  {(() => {\n                                    const totalProgress = projects.reduce((sum: number, p: any) => \n                                      sum + (parseFloat(p.progress || 0)), 0);\n                                    return Math.round(totalProgress / Math.max(projects.length, 1));\n                                  })()}%\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-sm text-gray-600 dark:text-gray-300\">Data Points</span>\n                                <span className=\"font-medium text-purple-600\">{reports.length * 15}</span>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      </div>\n                    </>\n                  )}\n                </div>\n\n                {/* Footer */}\n                <div className=\"border-t border-gray-200 dark:border-gray-600 pt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                      <p>Generated by ADEL Project Management Platform</p>\n                      <p>© 2024 {orgData?.name || 'Organization'}. All rights reserved.</p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Clock className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        Auto-generated on {new Date().toLocaleDateString()}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex items-center justify-between mt-6\">\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex items-center space-x-2\"\n                >\n                  <Maximize2 className=\"h-4 w-4\" />\n                  <span>Full Screen</span>\n                </Button>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex items-center space-x-2\"\n                >\n                  <FileText className=\"h-4 w-4\" />\n                  <span>Customize Template</span>\n                </Button>\n                <Button\n                  size=\"sm\"\n                  className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white flex items-center space-x-2\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                  <span>Export PDF</span>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":51497},"client/src/components/progress-chart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  Legend,\n} from \"recharts\";\nimport {\n  TrendingUp,\n  Users,\n  FileText,\n  Target,\n  Calendar,\n  BarChart3,\n  PieChart as PieChartIcon,\n  LineChart as LineChartIcon,\n} from \"lucide-react\";\n\nexport default function ProgressChart() {\n  const { data: stats = {}, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: projects = [], isLoading: projectsLoading } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: reports = [], isLoading: reportsLoading } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  // Use real project data \n  const projectProgressData = (projects as any[]).map((project: any, index: number) => ({\n    name: project.name && project.name.length > 15 ? project.name.substring(0, 15) + \"...\" : project.name || `Project ${index + 1}`,\n    progress: project.progress || 0, // Use actual progress from database\n    budget: parseFloat(project.budget || \"0\"),\n    budgetUsed: parseFloat(project.budgetUsed || \"0\"),\n    reports: (reports as any[]).filter((r: any) => r.projectId === project.id).length,\n  }));\n\n  const reportStatusData = [\n    { name: \"Approved\", value: (reports as any[]).filter((r: any) => r.status === \"approved\").length || 0, color: \"#10B981\" },\n    { name: \"Pending\", value: (reports as any[]).filter((r: any) => r.status === \"pending\").length || 0, color: \"#F59E0B\" },\n    { name: \"Rejected\", value: (reports as any[]).filter((r: any) => r.status === \"rejected\").length || 0, color: \"#EF4444\" },\n  ];\n\n  // Generate real monthly data based on actual reports\n  const monthlyProgressData = (() => {\n    const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"];\n    const currentMonth = new Date().getMonth();\n    \n    return months.map((month, index) => {\n      if (index > currentMonth) {\n        return { month, reports: 0, approved: 0, projects: 0 };\n      }\n      \n      // For past months, calculate based on actual data only\n      const monthReports = (reports as any[]).filter((r: any) => {\n        const reportDate = new Date(r.submittedAt);\n        return reportDate.getMonth() === index;\n      });\n      \n      const monthApproved = monthReports.filter((r: any) => r.status === \"approved\");\n      const monthProjects = index <= currentMonth ? Math.min((projects as any[]).length || 0, index + 1) : 0;\n      \n      return {\n        month,\n        reports: monthReports.length,\n        approved: monthApproved.length,\n        projects: monthProjects\n      };\n    });\n  })();\n\n  const budgetUtilizationData = projects?.map((project: any) => ({\n    name: project.name.length > 12 ? project.name.substring(0, 12) + \"...\" : project.name,\n    allocated: parseFloat(project.budget || \"0\"),\n    spent: parseFloat(project.budgetUsed || \"0\"),\n  })) || [];\n\n  if (statsLoading || projectsLoading || reportsLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Analytics & Progress</h2>\n          <p className=\"text-gray-600 mt-1\">Visualize your organization's performance and progress</p>\n        </div>\n      </div>\n\n      {/* Key Metrics Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Overall Progress</p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {(stats as any)?.overallProgress || 0}%\n                </p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-green-500\" />\n            </div>\n            <Progress \n              value={(stats as any)?.overallProgress || 0} \n              className=\"mt-3\" \n            />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Report Approval Rate</p>\n                <p className=\"text-2xl font-bold text-blue-600\">\n                  {reports?.length > 0 \n                    ? Math.round((reports.filter((r: any) => r.status === \"approved\").length / reports.length) * 100)\n                    : 0}%\n                </p>\n              </div>\n              <FileText className=\"w-8 h-8 text-blue-500\" />\n            </div>\n            <Progress \n              value={reports?.length > 0 \n                ? Math.round((reports.filter((r: any) => r.status === \"approved\").length / reports.length) * 100)\n                : 0} \n              className=\"mt-3\" \n            />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Active Projects</p>\n                <p className=\"text-2xl font-bold text-purple-600\">{stats?.activeProjects || 0}</p>\n              </div>\n              <Target className=\"w-8 h-8 text-purple-500\" />\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">Projects in progress</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Budget Utilization</p>\n                <p className=\"text-2xl font-bold text-orange-600\">\n                  {(stats as any)?.budgetUtilization || 0}%\n                </p>\n              </div>\n              <Calendar className=\"w-8 h-8 text-orange-500\" />\n            </div>\n            <Progress \n              value={(stats as any)?.budgetUtilization || 0} \n              className=\"mt-3\" \n            />\n            <p className=\"text-xs text-gray-500 mt-2\">\n              ${((stats as any)?.totalBudgetUsed || 0).toLocaleString()} / ${((stats as any)?.totalBudget || 0).toLocaleString()}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Tabs */}\n      <Tabs defaultValue=\"projects\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"projects\" className=\"flex items-center\">\n            <BarChart3 className=\"w-4 h-4 mr-2\" />\n            Projects\n          </TabsTrigger>\n          <TabsTrigger value=\"reports\" className=\"flex items-center\">\n            <PieChartIcon className=\"w-4 h-4 mr-2\" />\n            Reports\n          </TabsTrigger>\n          <TabsTrigger value=\"trends\" className=\"flex items-center\">\n            <LineChartIcon className=\"w-4 h-4 mr-2\" />\n            Trends\n          </TabsTrigger>\n          <TabsTrigger value=\"budget\" className=\"flex items-center\">\n            <BarChart3 className=\"w-4 h-4 mr-2\" />\n            Budget\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"projects\">\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Project Progress Overview</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {projectProgressData.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <Target className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                    <p>No project data available</p>\n                  </div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={projectProgressData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" />\n                      <YAxis />\n                      <Tooltip \n                        formatter={(value, name) => [\n                          name === \"progress\" ? `${value}%` : value,\n                          name === \"progress\" ? \"Progress\" : name\n                        ]}\n                      />\n                      <Bar dataKey=\"progress\" fill=\"#3B82F6\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Project Details</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {projectProgressData.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <FileText className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                    <p>No project details available</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {projectProgressData.slice(0, 5).map((project, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div>\n                          <p className=\"font-medium text-gray-900\">{project.name}</p>\n                          <p className=\"text-sm text-gray-600\">${project.budget.toLocaleString()} budget</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant=\"outline\">{project.progress}% complete</Badge>\n                          <p className=\"text-xs text-gray-500 mt-1\">{project.reports} reports</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"reports\">\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Report Status Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {reportStatusData.every(d => d.value === 0) ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <FileText className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                    <p>No report data available</p>\n                  </div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={reportStatusData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                      >\n                        {reportStatusData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Report Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {reportStatusData.map((status, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div \n                          className=\"w-4 h-4 rounded-full\" \n                          style={{ backgroundColor: status.color }}\n                        ></div>\n                        <span className=\"font-medium text-gray-900\">{status.name} Reports</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <span className=\"text-2xl font-bold\" style={{ color: status.color }}>\n                          {status.value}\n                        </span>\n                        <p className=\"text-xs text-gray-500\">\n                          {reports?.length > 0 \n                            ? Math.round((status.value / reports.length) * 100)\n                            : 0}% of total\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"trends\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Monthly Progress Trends</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <LineChart data={monthlyProgressData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"month\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Legend />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"reports\" \n                    stroke=\"#3B82F6\" \n                    strokeWidth={2}\n                    name=\"Total Reports\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"approved\" \n                    stroke=\"#10B981\" \n                    strokeWidth={2}\n                    name=\"Approved Reports\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"projects\" \n                    stroke=\"#8B5CF6\" \n                    strokeWidth={2}\n                    name=\"Active Projects\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"budget\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Budget Allocation vs Spending</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {budgetUtilizationData.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Calendar className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                  <p>No budget data available</p>\n                </div>\n              ) : (\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <BarChart data={budgetUtilizationData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip \n                      formatter={(value) => [`$${value.toLocaleString()}`, \"\"]}\n                    />\n                    <Legend />\n                    <Bar dataKey=\"allocated\" fill=\"#3B82F6\" name=\"Allocated Budget\" />\n                    <Bar dataKey=\"spent\" fill=\"#10B981\" name=\"Amount Spent\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":15865},"client/src/components/project-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus } from \"lucide-react\";\n\nconst projectSchema = z.object({\n  name: z.string().min(3, \"Project name must be at least 3 characters\"),\n  description: z.string().optional(),\n  budget: z.string().optional(),\n  budgetUsed: z.string().optional(),\n  deadline: z.string().optional(),\n  goals: z.string().optional(),\n  progress: z.number().min(0).max(100).optional(),\n});\n\ninterface ProjectFormProps {\n  project?: any;\n  onSuccess?: () => void;\n}\n\nfunction ProjectFormDialog({ project, onSuccess }: ProjectFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const form = useForm({\n    resolver: zodResolver(projectSchema),\n    defaultValues: {\n      name: project?.name || \"\",\n      description: project?.description || \"\",\n      budget: project?.budget?.toString() || \"\",\n      budgetUsed: project?.budgetUsed?.toString() || \"0\",\n      deadline: project?.deadline ? new Date(project.deadline).toISOString().split('T')[0] : \"\",\n      goals: project?.goals || \"\",\n      progress: project?.progress || 0,\n    },\n  });\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof projectSchema>) => {\n      console.log(\"Creating project with data:\", data);\n      const response = await apiRequest(\"POST\", \"/api/projects\", {\n        ...data,\n        budget: data.budget ? parseFloat(data.budget) : null,\n        budgetUsed: data.budgetUsed ? parseFloat(data.budgetUsed) : 0,\n        deadline: data.deadline ? new Date(data.deadline).toISOString() : null,\n        progress: data.progress || 0,\n      });\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success!\",\n        description: \"Project created successfully\",\n      });\n      setIsOpen(false);\n      form.reset();\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      console.error(\"Create project error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProjectMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof projectSchema>) => {\n      console.log(\"Updating project with data:\", data);\n      const response = await apiRequest(\"PUT\", `/api/projects/${project.id}`, {\n        ...data,\n        budget: data.budget ? parseFloat(data.budget) : null,\n        budgetUsed: data.budgetUsed ? parseFloat(data.budgetUsed) : 0,\n        deadline: data.deadline ? new Date(data.deadline).toISOString() : null,\n        progress: data.progress || 0,\n      });\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success!\",\n        description: \"Project updated successfully\",\n      });\n      setIsOpen(false);\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      console.error(\"Update project error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof projectSchema>) => {\n    if (project) {\n      updateProjectMutation.mutate(data);\n    } else {\n      createProjectMutation.mutate(data);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button size=\"sm\" className=\"h-9 px-4 bg-blue-600 hover:bg-blue-700 text-white font-medium\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          {project ? \"Edit Project\" : \"New Project\"}\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>{project ? \"Edit Project\" : \"Create New Project\"}</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Project Name *</Label>\n            <Input\n              id=\"name\"\n              {...form.register(\"name\")}\n              placeholder=\"Enter project name\"\n            />\n            {form.formState.errors.name && (\n              <p className=\"text-sm text-red-600\">{String(form.formState.errors.name.message)}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              {...form.register(\"description\")}\n              placeholder=\"Describe the project goals and objectives\"\n              rows={3}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"budget\">Total Budget ($)</Label>\n              <Input\n                id=\"budget\"\n                type=\"number\"\n                step=\"0.01\"\n                {...form.register(\"budget\")}\n                placeholder=\"0.00\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"deadline\">Deadline</Label>\n              <Input\n                id=\"deadline\"\n                type=\"date\"\n                {...form.register(\"deadline\")}\n              />\n            </div>\n          </div>\n\n          {project && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"budgetUsed\">Amount Spent ($)</Label>\n              <Input\n                id=\"budgetUsed\"\n                type=\"number\"\n                step=\"0.01\"\n                {...form.register(\"budgetUsed\")}\n                placeholder=\"0.00\"\n              />\n              {form.watch(\"budget\") && (\n                <div className=\"mt-3\">\n                  <div className=\"flex justify-between text-sm text-gray-600 mb-2\">\n                    <span>Budget Usage</span>\n                    <span>\n                      ${form.watch(\"budgetUsed\") || 0} / ${form.watch(\"budget\") || 0}\n                    </span>\n                  </div>\n                  <Progress \n                    value={\n                      form.watch(\"budget\") && parseFloat(form.watch(\"budget\")) > 0\n                        ? Math.min((parseFloat(form.watch(\"budgetUsed\") || \"0\") / parseFloat(form.watch(\"budget\"))) * 100, 100)\n                        : 0\n                    } \n                    className=\"h-2\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                    <span>\n                      {form.watch(\"budget\") && parseFloat(form.watch(\"budget\")) > 0\n                        ? Math.round((parseFloat(form.watch(\"budgetUsed\") || \"0\") / parseFloat(form.watch(\"budget\"))) * 100)\n                        : 0}% used\n                    </span>\n                    <span>\n                      ${Math.max(0, parseFloat(form.watch(\"budget\") || \"0\") - parseFloat(form.watch(\"budgetUsed\") || \"0\")).toFixed(2)} remaining\n                    </span>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"goals\">Goals & Objectives</Label>\n            <Textarea\n              id=\"goals\"\n              {...form.register(\"goals\")}\n              placeholder=\"Define specific goals and expected outcomes\"\n              rows={3}\n            />\n          </div>\n\n          {project && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"progress\">Progress: {form.watch(\"progress\")}%</Label>\n              <Slider\n                value={[form.watch(\"progress\") || 0]}\n                onValueChange={(value) => form.setValue(\"progress\", value[0])}\n                max={100}\n                min={0}\n                step={1}\n                className=\"w-full\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500\">\n                <span>0%</span>\n                <span>50%</span>\n                <span>100%</span>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setIsOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createProjectMutation.isPending || updateProjectMutation.isPending}\n            >\n              {createProjectMutation.isPending || updateProjectMutation.isPending\n                ? \"Saving...\"\n                : project\n                ? \"Update Project\"\n                : \"Create Project\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function ProjectForm({ project, onSuccess }: ProjectFormProps) {\n  return <ProjectFormDialog project={project} onSuccess={onSuccess} />;\n}","size_bytes":9875},"client/src/components/project-timeline.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Calendar,\n  Clock,\n  CheckCircle2,\n  AlertCircle,\n  PlayCircle,\n  PauseCircle,\n  Target,\n  DollarSign\n} from \"lucide-react\";\n\nexport default function ProjectTimeline() {\n  const { data: projects } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  if (!projects || !Array.isArray(projects)) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Project Timeline\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-2 bg-muted rounded w-full\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const sortedProjects = [...projects].sort((a: any, b: any) => {\n    // Sort by deadline, then by progress\n    if (a.deadline && b.deadline) {\n      return new Date(a.deadline).getTime() - new Date(b.deadline).getTime();\n    }\n    if (a.deadline && !b.deadline) return -1;\n    if (!a.deadline && b.deadline) return 1;\n    return (b.progress || 0) - (a.progress || 0);\n  });\n\n  const getStatusIcon = (project: any) => {\n    switch (project.status) {\n      case 'completed':\n        return <CheckCircle2 className=\"h-4 w-4 text-green-600\" />;\n      case 'active':\n        return <PlayCircle className=\"h-4 w-4 text-blue-600\" />;\n      case 'on-hold':\n        return <PauseCircle className=\"h-4 w-4 text-yellow-600\" />;\n      case 'cancelled':\n        return <AlertCircle className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return <Target className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const getDeadlineStatus = (project: any) => {\n    if (!project.deadline) return null;\n    \n    const deadline = new Date(project.deadline);\n    const now = new Date();\n    const daysUntil = Math.ceil((deadline.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n    if (daysUntil < 0 && project.status !== 'completed') {\n      return { text: `${Math.abs(daysUntil)} days overdue`, color: 'destructive' };\n    } else if (daysUntil <= 7 && daysUntil >= 0) {\n      return { text: `${daysUntil} days left`, color: 'warning' };\n    } else if (daysUntil > 7) {\n      return { text: `${daysUntil} days left`, color: 'default' };\n    }\n    return null;\n  };\n\n  const getBudgetUtilization = (project: any) => {\n    if (!project.budget || project.budget <= 0) return 0;\n    return Math.round(((project.budgetSpent || 0) / project.budget) * 100);\n  };\n\n  return (\n    <Card className=\"bg-white shadow-lg border border-gray-200 hover:shadow-xl transition-all duration-300\">\n      <CardHeader className=\"bg-gradient-to-r from-slate-50 to-gray-100 border-b border-gray-200\">\n        <CardTitle className=\"flex items-center gap-3 text-gray-800 font-semibold\">\n          <div className=\"p-2 bg-indigo-600 rounded-lg\">\n            <Calendar className=\"h-5 w-5 text-white\" />\n          </div>\n          Project Timeline\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-6\">\n          {sortedProjects.map((project: any, index: number) => {\n            const deadlineStatus = getDeadlineStatus(project);\n            const budgetUtilization = getBudgetUtilization(project);\n            \n            return (\n              <div key={project.id} className=\"relative\">\n                {/* Timeline line */}\n                {index < sortedProjects.length - 1 && (\n                  <div className=\"absolute left-6 top-12 w-0.5 h-12 bg-border\"></div>\n                )}\n                \n                <div className=\"flex items-start gap-4\">\n                  {/* Status icon */}\n                  <div className=\"flex-shrink-0 w-12 h-12 rounded-full border-2 bg-background flex items-center justify-center\">\n                    {getStatusIcon(project)}\n                  </div>\n                  \n                  {/* Project details */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between gap-4\">\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-medium text-sm truncate\">{project.name}</h4>\n                        <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                          {project.description}\n                        </p>\n                      </div>\n                      \n                      <div className=\"flex flex-col items-end gap-1\">\n                        <Badge \n                          variant={project.status === 'completed' ? 'default' : \n                                  project.status === 'active' ? 'secondary' : \n                                  project.status === 'on-hold' ? 'outline' : 'destructive'}\n                          className=\"text-xs\"\n                        >\n                          {project.status}\n                        </Badge>\n                        \n                        {deadlineStatus && (\n                          <Badge variant={deadlineStatus.color as any} className=\"text-xs\">\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            {deadlineStatus.text}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                    \n                    {/* Progress bar */}\n                    <div className=\"mt-3\">\n                      <div className=\"flex items-center justify-between text-xs mb-1\">\n                        <span className=\"text-muted-foreground\">Progress</span>\n                        <span className=\"font-medium\">{project.progress || 0}%</span>\n                      </div>\n                      <Progress value={project.progress || 0} className=\"h-2\" />\n                    </div>\n                    \n                    {/* Budget info */}\n                    {project.budget && project.budget > 0 && (\n                      <div className=\"mt-2 flex items-center gap-4 text-xs\">\n                        <div className=\"flex items-center gap-1\">\n                          <DollarSign className=\"h-3 w-3\" />\n                          <span className=\"text-muted-foreground\">Budget:</span>\n                          <span className=\"font-medium\">${project.budget.toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <span className=\"text-muted-foreground\">Used:</span>\n                          <span className={`font-medium ${budgetUtilization > 80 ? 'text-red-600' : budgetUtilization > 60 ? 'text-yellow-600' : 'text-green-600'}`}>\n                            {budgetUtilization}%\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {/* Deadline */}\n                    {project.deadline && (\n                      <div className=\"mt-2 flex items-center gap-1 text-xs text-muted-foreground\">\n                        <Calendar className=\"h-3 w-3\" />\n                        <span>Due: {new Date(project.deadline).toLocaleDateString()}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n          \n          {sortedProjects.length === 0 && (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Target className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n              <p className=\"text-sm\">No projects found</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8062},"client/src/components/report-approval.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Check,\n  X,\n  Eye,\n  Calendar,\n  User,\n  FileText,\n  Download,\n  Filter,\n  Search,\n  AlertCircle,\n  CheckCircle,\n  XCircle,\n} from \"lucide-react\";\n\ninterface ReportDetailsProps {\n  report: any;\n  onStatusUpdate?: () => void;\n}\n\nfunction ReportDetailsDialog({ report, onStatusUpdate }: ReportDetailsProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [reviewNotes, setReviewNotes] = useState(\"\");\n  \n  // Fetch organization members to get officer names\n  const { data: organizationMembers = [] } = useQuery({\n    queryKey: [\"/api/organization/members\"],\n  });\n  \n  // Fetch projects to get project names\n  const { data: projects = [] } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n  \n  // Function to get officer name by ID\n  const getOfficerName = (userId: number) => {\n    const officer = organizationMembers.find((member: any) => member.id === userId);\n    if (officer) {\n      const fullName = `${officer.firstName || ''} ${officer.lastName || ''}`.trim();\n      return fullName || officer.email;\n    }\n    return `User #${userId}`;\n  };\n  \n  // Function to get project name by ID\n  const getProjectName = (projectId: number) => {\n    const project = projects.find((proj: any) => proj.id === projectId);\n    return project ? project.name : `Project #${projectId}`;\n  };\n\n  const handleDownloadFile = async (file: any) => {\n    try {\n      const response = await fetch(`/api/files/${file.filename}`, {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to download file\");\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = file.originalName || file.filename;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      toast({\n        title: \"Download failed\",\n        description: \"Could not download the file. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  const [isOpen, setIsOpen] = useState(false);\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ status, notes }: { status: string; notes?: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/reports/${report.id}/status`, {\n        status,\n        reviewNotes: notes,\n      });\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: `Report ${variables.status} successfully!`,\n      });\n      setIsOpen(false);\n      onStatusUpdate?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update report status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApprove = () => {\n    updateStatusMutation.mutate({\n      status: \"approved\",\n      notes: reviewNotes.trim() || undefined,\n    });\n  };\n\n  const handleReject = () => {\n    if (!reviewNotes.trim()) {\n      toast({\n        title: \"Review notes required\",\n        description: \"Please provide feedback when rejecting a report\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    updateStatusMutation.mutate({\n      status: \"rejected\",\n      notes: reviewNotes.trim(),\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\">\n          <Eye className=\"w-4 h-4 mr-1\" />\n          Review\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <FileText className=\"w-5 h-5\" />\n            <span>Report Review: {report.title}</span>\n            <Badge \n              variant={\n                report.status === \"approved\" ? \"default\" :\n                report.status === \"rejected\" ? \"destructive\" :\n                \"secondary\"\n              }\n              className={\n                report.status === \"approved\" ? \"bg-green-100 text-green-600\" :\n                report.status === \"rejected\" ? \"bg-red-100 text-red-600\" :\n                \"bg-orange-100 text-orange-600\"\n              }\n            >\n              {report.status.charAt(0).toUpperCase() + report.status.slice(1)}\n            </Badge>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Report Metadata */}\n          <div className=\"grid md:grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <User className=\"w-4 h-4 mr-2\" />\n                <span>Submitted by: {getOfficerName(report.submittedBy)}</span>\n              </div>\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                <span>Date: {new Date(report.submittedAt).toLocaleDateString()}</span>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center text-sm text-gray-600\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                <span>Project: {getProjectName(report.projectId)}</span>\n              </div>\n              {report.reviewedAt && (\n                <div className=\"text-sm text-gray-600\">\n                  <span className=\"font-medium\">Reviewed:</span> {new Date(report.reviewedAt).toLocaleDateString()}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Report Content */}\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-3\">Report Content</h4>\n            <div className=\"p-4 bg-white border rounded-lg\">\n              <p className=\"text-gray-700 leading-relaxed whitespace-pre-wrap\">\n                {report.content}\n              </p>\n            </div>\n          </div>\n\n          {/* Attachments */}\n          {report.files && Array.isArray(report.files) && report.files.length > 0 && (\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-3\">\n                Attachments ({report.files.length})\n              </h4>\n              <div className=\"grid md:grid-cols-2 gap-3\">\n                {report.files.map((file: any, index: number) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <FileText className=\"w-5 h-5 text-blue-500\" />\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {file.originalName || `File ${index + 1}`}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {file.size ? `${(file.size / 1024 / 1024).toFixed(2)} MB` : \"Unknown size\"}\n                        </p>\n                      </div>\n                    </div>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => handleDownloadFile(file)}\n                    >\n                      <Download className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Previous Review Notes */}\n          {report.reviewNotes && (\n            <div>\n              <h4 className=\"font-medium text-gray-900 mb-3\">Previous Review Notes</h4>\n              <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                <p className=\"text-gray-700\">{report.reviewNotes}</p>\n              </div>\n            </div>\n          )}\n\n          {/* Review Section (only for submitted reports) */}\n          {(report.status === \"submitted\" || report.status === \"pending\") && (\n            <div className=\"border-t pt-6\">\n              <h4 className=\"font-medium text-gray-900 mb-3\">Review & Decision</h4>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"reviewNotes\">Review Notes</Label>\n                  <Textarea\n                    id=\"reviewNotes\"\n                    value={reviewNotes}\n                    onChange={(e) => setReviewNotes(e.target.value)}\n                    className=\"mt-1\"\n                    placeholder=\"Provide feedback on the report quality, completeness, and accuracy...\"\n                    rows={4}\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Review notes are required when rejecting a report and optional when approving.\n                  </p>\n                </div>\n\n                <div className=\"flex justify-end space-x-3\">\n                  <Button\n                    variant=\"destructive\"\n                    onClick={handleReject}\n                    disabled={updateStatusMutation.isPending}\n                  >\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Reject Report\n                  </Button>\n                  <Button\n                    className=\"bg-green-500 hover:bg-green-600\"\n                    onClick={handleApprove}\n                    disabled={updateStatusMutation.isPending}\n                  >\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    Approve Report\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function ReportApproval() {\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: allReports, isLoading: allReportsLoading } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  const { data: pendingReports, isLoading: pendingLoading } = useQuery({\n    queryKey: [\"/api/reports/pending\"],\n  });\n  \n  // Fetch organization members to get officer names\n  const { data: organizationMembers = [] } = useQuery({\n    queryKey: [\"/api/organization/members\"],\n  });\n  \n  // Fetch projects to get project names\n  const { data: projects = [] } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n  \n  // Function to get officer name by ID\n  const getOfficerName = (userId: number) => {\n    const officer = organizationMembers.find((member: any) => member.id === userId);\n    if (officer) {\n      const fullName = `${officer.firstName || ''} ${officer.lastName || ''}`.trim();\n      return fullName || officer.email;\n    }\n    return `User #${userId}`;\n  };\n\n  // Function to get project name by ID\n  const getProjectName = (projectId: number) => {\n    const project = projects.find((proj: any) => proj.id === projectId);\n    return project ? project.name : `Project #${projectId}`;\n  };\n\n  const filteredReports = allReports?.filter((report: any) => {\n    const matchesStatus = statusFilter === \"all\" || report.status === statusFilter;\n    const matchesSearch = !searchTerm || \n      report.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      report.content?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      getProjectName(report.projectId)?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      getOfficerName(report.submittedBy)?.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesStatus && matchesSearch;\n  }) || [];\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case \"rejected\":\n        return <XCircle className=\"w-4 h-4 text-red-500\" />;\n      default:\n        return <AlertCircle className=\"w-4 h-4 text-orange-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"bg-green-100 text-green-600\";\n      case \"rejected\":\n        return \"bg-red-100 text-red-600\";\n      default:\n        return \"bg-orange-100 text-orange-600\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Tabs defaultValue=\"pending\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"pending\">\n            Pending Review ({pendingReports?.length || 0})\n          </TabsTrigger>\n          <TabsTrigger value=\"all\">\n            All Reports ({allReports?.length || 0})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"pending\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <AlertCircle className=\"w-5 h-5 mr-2 text-orange-500\" />\n                Reports Pending Review\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {pendingLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3].map((i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : pendingReports?.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <CheckCircle className=\"w-16 h-16 mx-auto mb-4 text-green-300\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">All caught up!</h3>\n                  <p className=\"text-gray-600\">No reports are currently pending review.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {pendingReports?.map((report: any) => (\n                    <Card key={report.id} className=\"border-l-4 border-orange-500\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-gray-900 mb-2\">{report.title}</h4>\n                            <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n                              {report.content}\n                            </p>\n                            <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                              <div className=\"flex items-center\">\n                                <User className=\"w-3 h-3 mr-1\" />\n                                {getOfficerName(report.submittedBy)}\n                              </div>\n                              <div className=\"flex items-center\">\n                                <Calendar className=\"w-3 h-3 mr-1\" />\n                                {new Date(report.submittedAt).toLocaleDateString()}\n                              </div>\n                              <div className=\"flex items-center\">\n                                <FileText className=\"w-3 h-3 mr-1\" />\n                                {getProjectName(report.projectId)}\n                              </div>\n                              {report.files && report.files.length > 0 && (\n                                <div>\n                                  {report.files.length} attachment{report.files.length !== 1 ? 's' : ''}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2 ml-4\">\n                            <Badge className=\"bg-orange-100 text-orange-600\">\n                              <AlertCircle className=\"w-3 h-3 mr-1\" />\n                              Pending\n                            </Badge>\n                            <ReportDetailsDialog report={report} />\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"all\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center\">\n                  <FileText className=\"w-5 h-5 mr-2 text-slate-600\" />\n                  All Reports\n                </CardTitle>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400\" />\n                    <Input\n                      placeholder=\"Search reports...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 w-64\"\n                    />\n                  </div>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Statuses</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"approved\">Approved</SelectItem>\n                      <SelectItem value=\"rejected\">Rejected</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {allReportsLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3, 4, 5].map((i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : filteredReports.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <FileText className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No reports found</h3>\n                  <p className=\"text-gray-600\">\n                    {statusFilter === \"all\" \n                      ? \"No reports have been submitted yet.\" \n                      : `No ${statusFilter} reports found.`}\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {filteredReports.map((report: any) => (\n                    <Card key={report.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-gray-900 mb-2\">{report.title}</h4>\n                            <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n                              {report.content}\n                            </p>\n                            <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                              <div className=\"flex items-center\">\n                                <User className=\"w-3 h-3 mr-1\" />\n                                {getOfficerName(report.submittedBy)}\n                              </div>\n                              <div className=\"flex items-center\">\n                                <Calendar className=\"w-3 h-3 mr-1\" />\n                                {new Date(report.submittedAt).toLocaleDateString()}\n                              </div>\n                              <div className=\"flex items-center\">\n                                <FileText className=\"w-3 h-3 mr-1\" />\n                                {getProjectName(report.projectId)}\n                              </div>\n                              {report.files && report.files.length > 0 && (\n                                <div>\n                                  {report.files.length} attachment{report.files.length !== 1 ? 's' : ''}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2 ml-4\">\n                            <Badge className={getStatusColor(report.status)}>\n                              {getStatusIcon(report.status)}\n                              {report.status.charAt(0).toUpperCase() + report.status.slice(1)}\n                            </Badge>\n                            <ReportDetailsDialog report={report} />\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":22321},"client/src/components/report-form-edit.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, X, FileText, Image, Paperclip, Brain, CheckCircle } from \"lucide-react\";\n\nconst reportSchema = z.object({\n  title: z.string().min(3, \"Report title must be at least 3 characters\"),\n  content: z.string().min(10, \"Report content must be at least 10 characters\"),\n  projectId: z.string().min(1, \"Please select a project\"),\n});\n\ninterface ReportFormEditProps {\n  reportId: number;\n  onSuccess?: () => void;\n  onCancel?: () => void;\n}\n\nexport default function ReportFormEdit({ reportId, onSuccess, onCancel }: ReportFormEditProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [aiAnalysis, setAiAnalysis] = useState<any>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  const { data: projects } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Fetch existing report data\n  const { data: existingReport, isLoading: reportLoading } = useQuery({\n    queryKey: [\"/api/reports\", reportId],\n    enabled: !!reportId,\n  });\n\n  const form = useForm<z.infer<typeof reportSchema>>({\n    resolver: zodResolver(reportSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      projectId: \"\",\n    },\n  });\n\n  // Load existing report data into form\n  useEffect(() => {\n    if (existingReport && !reportLoading) {\n      const report = existingReport as any;\n      console.log(\"Loading existing report data:\", report);\n      \n      // Reset form with existing data\n      form.reset({\n        title: report.title || \"\",\n        content: report.content || \"\",\n        projectId: report.projectId ? report.projectId.toString() : \"\",\n      });\n      \n      // Force form values to update\n      form.setValue(\"title\", report.title || \"\");\n      form.setValue(\"content\", report.content || \"\");\n      form.setValue(\"projectId\", report.projectId ? report.projectId.toString() : \"\");\n    }\n  }, [existingReport, reportLoading, form]);\n\n  const submitReportMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      console.log(\"Sending PUT request to:\", `/api/reports/${reportId}`);\n      \n      const response = await fetch(`/api/reports/${reportId}`, {\n        method: \"PUT\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      console.log(\"Response status:\", response.status);\n      console.log(\"Response ok:\", response.ok);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"Server error response:\", errorText);\n        throw new Error(errorText || \"Failed to update report\");\n      }\n\n      const result = await response.json();\n      console.log(\"Update successful, result:\", result);\n      return result;\n    },\n    onSuccess: (data) => {\n      console.log(\"Mutation onSuccess called with:\", data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\", reportId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Report submitted for admin approval!\",\n      });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      console.error(\"Mutation onError called with:\", error);\n      toast({\n        title: \"Error\", \n        description: error.message || \"Failed to update report\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    \n    const validFiles = files.filter(file => {\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: `${file.name} exceeds 10MB limit`,\n          variant: \"destructive\",\n        });\n        return false;\n      }\n      return true;\n    });\n\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const analyzeReport = async () => {\n    const formData = form.getValues();\n    if (!formData.title || !formData.content) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide both title and content before analyzing.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsAnalyzing(true);\n    try {\n      const selectedProject = (projects as any)?.find((p: any) => p.id.toString() === formData.projectId);\n      \n      const response = await fetch(\"/api/reports/analyze\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          title: formData.title,\n          content: formData.content,\n          projectId: parseInt(formData.projectId),\n          projectDescription: selectedProject?.description || \"\",\n          projectGoals: selectedProject?.goals || \"\",\n          hasAttachments: selectedFiles.length > 0,\n          attachmentCount: selectedFiles.length,\n          attachmentTypes: selectedFiles.map(f => f.type),\n        }),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to analyze report\");\n      }\n\n      const analysis = await response.json();\n      setAiAnalysis(analysis);\n      \n      toast({\n        title: \"Analysis Complete\",\n        description: `Report scored ${analysis.overallScore}% - ${analysis.readinessLevel.replace('-', ' ')}`,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Analysis Failed\",\n        description: error?.message || \"Unable to analyze report. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const isReadyForSubmission = () => {\n    return aiAnalysis && aiAnalysis.overallScore >= 40;\n  };\n\n  const handleFormSubmit = async (values: z.infer<typeof reportSchema>) => {\n    console.log(\"Form submit with values:\", values);\n    console.log(\"Selected files:\", selectedFiles);\n    console.log(\"Report ID:\", reportId);\n    \n    if (!values.title?.trim() || !values.content?.trim() || !values.projectId) {\n      toast({\n        title: \"Missing Required Fields\",\n        description: \"Please fill in title, content, and select a project.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"title\", values.title.trim());\n    formData.append(\"content\", values.content.trim());\n    formData.append(\"projectId\", values.projectId);\n    \n    // Add files if any are selected\n    selectedFiles.forEach((file) => {\n      formData.append(\"files\", file);\n    });\n    \n    console.log(\"Submitting form data for report:\", reportId);\n    \n    try {\n      await submitReportMutation.mutateAsync(formData);\n    } catch (error) {\n      console.error(\"Submit error:\", error);\n      toast({\n        title: \"Submission Failed\",\n        description: \"There was an error updating the report. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getFileIcon = (file: File) => {\n    if (file.type.startsWith(\"image/\")) {\n      return <Image className=\"w-4 h-4\" />;\n    } else if (file.type.includes(\"pdf\") || file.type.includes(\"document\")) {\n      return <FileText className=\"w-4 h-4\" />;\n    }\n    return <Paperclip className=\"w-4 h-4\" />;\n  };\n\n  if (reportLoading) {\n    return (\n      <div className=\"p-6 text-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n        <p className=\"mt-2 text-gray-600\">Loading report data...</p>\n      </div>\n    );\n  }\n\n  if (!existingReport) {\n    return (\n      <div className=\"p-6 text-center\">\n        <p className=\"text-red-600\">Report not found or you don't have permission to edit it.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleFormSubmit)} className=\"space-y-6\">\n          <FormField\n            control={form.control}\n            name=\"title\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Report Title *</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"Enter report title\"\n                    {...field}\n                    value={field.value || \"\"}\n                    onChange={(e) => {\n                      field.onChange(e);\n                      setAiAnalysis(null);\n                    }}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"content\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Report Content *</FormLabel>\n                <FormControl>\n                  <Textarea\n                    placeholder=\"Describe your progress, achievements, challenges, and next steps...\"\n                    className=\"min-h-[120px]\"\n                    {...field}\n                    value={field.value || \"\"}\n                    onChange={(e) => {\n                      field.onChange(e);\n                      setAiAnalysis(null);\n                    }}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"projectId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Project *</FormLabel>\n                <Select onValueChange={(value) => {\n                  field.onChange(value);\n                  setAiAnalysis(null);\n                }} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a project\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {(projects as any)?.map((project: any) => (\n                      <SelectItem key={project.id} value={project.id.toString()}>\n                        {project.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {/* File Upload Section */}\n          <div>\n            <FormLabel>Attachments (Optional)</FormLabel>\n            <div className=\"mt-2 space-y-4\">\n              <div className=\"flex items-center justify-center w-full\">\n                <label className=\"flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100\">\n                  <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                    <Upload className=\"w-8 h-8 mb-4 text-gray-500\" />\n                    <p className=\"mb-2 text-sm text-gray-500\">\n                      <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                    </p>\n                    <p className=\"text-xs text-gray-500\">PDF, DOC, XLS, IMG (MAX. 10MB each)</p>\n                  </div>\n                  <input\n                    type=\"file\"\n                    className=\"hidden\"\n                    multiple\n                    accept=\".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png,.txt,.csv\"\n                    onChange={handleFileChange}\n                  />\n                </label>\n              </div>\n\n              {selectedFiles.length > 0 && (\n                <div className=\"space-y-2\">\n                  {selectedFiles.map((file, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\">\n                      <div className=\"flex items-center space-x-2\">\n                        {getFileIcon(file)}\n                        <span className=\"text-sm text-gray-700\">{file.name}</span>\n                        <span className=\"text-xs text-gray-500\">\n                          ({(file.size / (1024 * 1024)).toFixed(2)} MB)\n                        </span>\n                      </div>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeFile(index)}\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* AI Analysis Results */}\n          {aiAnalysis && (\n            <div className=\"p-4 bg-slate-50 rounded-lg border\">\n              <div className=\"flex items-center space-x-2 mb-3\">\n                <Brain className=\"w-5 h-5 text-purple-600\" />\n                <h3 className=\"font-medium text-slate-800\">AI Analysis Results</h3>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm font-medium\">Overall Score:</span>\n                  <span className={`text-sm font-bold ${\n                    aiAnalysis.overallScore >= 80 ? 'text-green-600' :\n                    aiAnalysis.overallScore >= 60 ? 'text-yellow-600' :\n                    'text-red-600'\n                  }`}>\n                    {aiAnalysis.overallScore}%\n                  </span>\n                </div>\n                \n                <p className=\"text-sm text-slate-600\">{aiAnalysis.overallFeedback}</p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex gap-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => {\n                console.log(\"Cancel button clicked in edit form\");\n                onCancel?.();\n              }}\n              className=\"flex-1\"\n            >\n              Cancel\n            </Button>\n            \n            {!aiAnalysis ? (\n              <Button\n                type=\"button\"\n                onClick={analyzeReport}\n                disabled={isAnalyzing || !form.watch(\"title\") || !form.watch(\"content\")}\n                className=\"flex-1 bg-purple-600 hover:bg-purple-700\"\n              >\n                <Brain className=\"w-4 h-4 mr-2\" />\n                {isAnalyzing ? \"Analyzing...\" : \"Analyze Report\"}\n              </Button>\n            ) : isReadyForSubmission() ? (\n              <Button\n                type=\"submit\"\n                disabled={submitReportMutation.isPending}\n                className=\"flex-1 bg-green-600 hover:bg-green-700 disabled:opacity-50\"\n              >\n                <CheckCircle className=\"w-4 h-4 mr-2\" />\n                {submitReportMutation.isPending ? \"Updating...\" : \"Update Report\"}\n              </Button>\n            ) : (\n              <div className=\"flex-1 space-y-2\">\n                <Button\n                  type=\"button\"\n                  onClick={analyzeReport}\n                  disabled={isAnalyzing}\n                  className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                >\n                  <Brain className=\"w-4 h-4 mr-2\" />\n                  {isAnalyzing ? \"Re-analyzing...\" : \"Re-analyze Report\"}\n                </Button>\n                <p className=\"text-xs text-orange-600 text-center\">\n                  Please improve your report based on AI feedback before submitting\n                </p>\n              </div>\n            )}\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}","size_bytes":16413},"client/src/components/report-form-fixed.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, X, FileText, Image, Paperclip, Plus, Brain, CheckCircle } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\nconst reportSchema = z.object({\n  title: z.string().min(3, \"Report title must be at least 3 characters\"),\n  content: z.string().min(10, \"Report content must be at least 10 characters\"),\n  projectId: z.string().min(1, \"Please select a project\"),\n});\n\ninterface ReportFormProps {\n  projectId?: number;\n  reportId?: number;\n  onSuccess?: () => void;\n}\n\nexport default function ReportForm({ projectId, reportId, onSuccess }: ReportFormProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [aiAnalysis, setAiAnalysis] = useState<any>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  const { data: projects } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: existingReport, isLoading: reportLoading } = useQuery({\n    queryKey: [\"/api/reports\", reportId],\n    enabled: !!reportId,\n  });\n\n  const form = useForm<z.infer<typeof reportSchema>>({\n    resolver: zodResolver(reportSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      projectId: projectId ? projectId.toString() : \"\",\n    },\n  });\n\n  useEffect(() => {\n    if (existingReport && !reportLoading) {\n      const report = existingReport as any;\n      form.reset({\n        title: report.title || \"\",\n        content: report.content || \"\",\n        projectId: report.projectId ? report.projectId.toString() : \"\",\n      });\n    }\n  }, [existingReport, reportLoading, form]);\n\n  const submitReportMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const endpoint = reportId ? `/api/reports/${reportId}` : \"/api/reports\";\n      const method = reportId ? \"PUT\" : \"POST\";\n      \n      const response = await fetch(endpoint, {\n        method,\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || `Failed to ${reportId ? 'update' : 'create'} report`);\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: `Report ${reportId ? 'updated' : 'submitted'} successfully!`,\n      });\n      setIsOpen(false);\n      setSelectedFiles([]);\n      setAiAnalysis(null);\n      form.reset();\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${reportId ? 'update' : 'submit'} report`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    \n    const validFiles = files.filter(file => {\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: `${file.name} exceeds 10MB limit`,\n          variant: \"destructive\",\n        });\n        return false;\n      }\n      return true;\n    });\n\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const analyzeReport = async () => {\n    const formData = form.getValues();\n    if (!formData.title || !formData.content) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide both title and content before analyzing.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsAnalyzing(true);\n    try {\n      const selectedProject = (projects as any)?.find((p: any) => p.id.toString() === formData.projectId);\n      \n      const response = await fetch(\"/api/reports/analyze\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          title: formData.title,\n          content: formData.content,\n          projectId: parseInt(formData.projectId),\n          projectDescription: selectedProject?.description || \"\",\n          projectGoals: selectedProject?.goals || \"\",\n          hasAttachments: selectedFiles.length > 0,\n          attachmentCount: selectedFiles.length,\n          attachmentTypes: selectedFiles.map(f => f.type),\n        }),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to analyze report\");\n      }\n\n      const analysis = await response.json();\n      setAiAnalysis(analysis);\n      \n      toast({\n        title: \"Analysis Complete\",\n        description: `Report scored ${analysis.overallScore}% - ${analysis.readinessLevel.replace('-', ' ')}`,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Analysis Failed\",\n        description: error?.message || \"Unable to analyze report. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const isReadyForSubmission = () => {\n    return aiAnalysis && aiAnalysis.overallScore >= 40;\n  };\n\n  const handleSubmit = async (values: z.infer<typeof reportSchema>) => {\n    const formData = new FormData();\n    formData.append(\"title\", values.title);\n    formData.append(\"content\", values.content);\n    formData.append(\"projectId\", values.projectId);\n    \n    selectedFiles.forEach((file) => {\n      formData.append(\"files\", file);\n    });\n    \n    submitReportMutation.mutate(formData);\n  };\n\n  const getFileIcon = (file: File) => {\n    if (file.type.startsWith(\"image/\")) {\n      return <Image className=\"w-4 h-4\" />;\n    } else if (file.type.includes(\"pdf\") || file.type.includes(\"document\")) {\n      return <FileText className=\"w-4 h-4\" />;\n    }\n    return <Paperclip className=\"w-4 h-4\" />;\n  };\n\n  if (reportId && reportLoading) {\n    return <div>Loading report data...</div>;\n  }\n\n  // When editing a report, render form directly without Dialog wrapper\n  if (reportId) {\n    return (\n      <div className=\"space-y-6\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Report Title *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter report title\"\n                          {...field}\n                          onChange={(e) => {\n                            field.onChange(e);\n                            setAiAnalysis(null);\n                          }}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"content\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Report Content *</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Describe your progress, achievements, challenges, and next steps...\"\n                          className=\"min-h-[120px]\"\n                          {...field}\n                          onChange={(e) => {\n                            field.onChange(e);\n                            setAiAnalysis(null);\n                          }}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"projectId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Project *</FormLabel>\n                      <Select onValueChange={(value) => {\n                        field.onChange(value);\n                        setAiAnalysis(null);\n                      }} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a project\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {(projects as any)?.map((project: any) => (\n                            <SelectItem key={project.id} value={project.id.toString()}>\n                              {project.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* File Upload Section */}\n                <div>\n                  <FormLabel>Attachments (Optional)</FormLabel>\n                  <div className=\"mt-2 space-y-4\">\n                    <div className=\"flex items-center justify-center w-full\">\n                      <label className=\"flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100\">\n                        <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                          <Upload className=\"w-8 h-8 mb-4 text-gray-500\" />\n                          <p className=\"mb-2 text-sm text-gray-500\">\n                            <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                          </p>\n                          <p className=\"text-xs text-gray-500\">PDF, DOC, XLS, IMG (MAX. 10MB each)</p>\n                        </div>\n                        <input\n                          type=\"file\"\n                          className=\"hidden\"\n                          multiple\n                          accept=\".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png,.txt,.csv\"\n                          onChange={handleFileChange}\n                        />\n                      </label>\n                    </div>\n\n                    {selectedFiles.length > 0 && (\n                      <div className=\"space-y-2\">\n                        {selectedFiles.map((file, index) => (\n                          <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\">\n                            <div className=\"flex items-center space-x-2\">\n                              {getFileIcon(file)}\n                              <span className=\"text-sm text-gray-700\">{file.name}</span>\n                              <span className=\"text-xs text-gray-500\">\n                                ({(file.size / (1024 * 1024)).toFixed(2)} MB)\n                              </span>\n                            </div>\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeFile(index)}\n                            >\n                              <X className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* AI Analysis Results */}\n                {aiAnalysis && (\n                  <div className=\"p-4 bg-slate-50 rounded-lg border\">\n                    <div className=\"flex items-center space-x-2 mb-3\">\n                      <Brain className=\"w-5 h-5 text-purple-600\" />\n                      <h3 className=\"font-medium text-slate-800\">AI Analysis Results</h3>\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-medium\">Overall Score:</span>\n                        <span className={`text-sm font-bold ${\n                          aiAnalysis.overallScore >= 80 ? 'text-green-600' :\n                          aiAnalysis.overallScore >= 60 ? 'text-yellow-600' :\n                          'text-red-600'\n                        }`}>\n                          {aiAnalysis.overallScore}%\n                        </span>\n                      </div>\n                      \n                      <p className=\"text-sm text-slate-600\">{aiAnalysis.overallFeedback}</p>\n\n                      {aiAnalysis.strengthsIdentified?.length > 0 && (\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-2\">Strengths Identified</h4>\n                          <ul className=\"text-sm text-green-700 space-y-1\">\n                            {aiAnalysis.strengthsIdentified.map((strength: string, index: number) => (\n                              <li key={index} className=\"flex items-start\">\n                                <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                                {strength}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n\n                      {aiAnalysis.priorityImprovements?.length > 0 && (\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-2\">Priority Improvements</h4>\n                          <ul className=\"text-sm text-orange-700 space-y-1\">\n                            {aiAnalysis.priorityImprovements.map((improvement: string, index: number) => (\n                              <li key={index} className=\"flex items-start\">\n                                <span className=\"w-4 h-4 text-orange-500 mr-2 mt-0.5 flex-shrink-0\">⚡</span>\n                                {improvement}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex gap-3 pt-4\">\n                  {!aiAnalysis ? (\n                    <Button\n                      type=\"button\"\n                      onClick={analyzeReport}\n                      disabled={isAnalyzing || !form.watch(\"title\") || !form.watch(\"content\")}\n                      className=\"flex-1 bg-purple-600 hover:bg-purple-700\"\n                    >\n                      <Brain className=\"w-4 h-4 mr-2\" />\n                      {isAnalyzing ? \"Analyzing...\" : \"Analyze Report\"}\n                    </Button>\n                  ) : isReadyForSubmission() ? (\n                    <Button\n                      type=\"submit\"\n                      disabled={submitReportMutation.isPending}\n                      className=\"flex-1 bg-green-600 hover:bg-green-700 disabled:opacity-50\"\n                    >\n                      <CheckCircle className=\"w-4 h-4 mr-2\" />\n                      {submitReportMutation.isPending ? \"Submitting...\" : (reportId ? \"Update Report\" : \"Submit Report\")}\n                    </Button>\n                  ) : (\n                    <div className=\"flex-1 space-y-2\">\n                      <Button\n                        type=\"button\"\n                        onClick={analyzeReport}\n                        disabled={isAnalyzing}\n                        className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                      >\n                        <Brain className=\"w-4 h-4 mr-2\" />\n                        {isAnalyzing ? \"Re-analyzing...\" : \"Re-analyze Report\"}\n                      </Button>\n                      <p className=\"text-xs text-orange-600 text-center\">\n                        Please improve your report based on AI feedback before submitting\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </form>\n            </Form>\n          </div>\n        );\n      }\n\n      return (\n        <>\n          <Button \n            onClick={() => setIsOpen(true)}\n            className=\"h-9 px-4 bg-green-600 hover:bg-green-700 text-white font-medium\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Report\n          </Button>\n          \n          <Dialog open={isOpen} onOpenChange={setIsOpen}>\n            <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Submit New Report</DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-6 p-6\">\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Report Title *</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Enter report title\"\n                              {...field}\n                              onChange={(e) => {\n                                field.onChange(e);\n                                setAiAnalysis(null);\n                              }}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"content\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Report Content *</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Describe your progress, achievements, challenges, and next steps...\"\n                              className=\"min-h-[120px]\"\n                              {...field}\n                              onChange={(e) => {\n                                field.onChange(e);\n                                setAiAnalysis(null);\n                              }}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"projectId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Project *</FormLabel>\n                          <Select onValueChange={(value) => {\n                            field.onChange(value);\n                            setAiAnalysis(null);\n                          }} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a project\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {(projects as any)?.map((project: any) => (\n                                <SelectItem key={project.id} value={project.id.toString()}>\n                                  {project.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* File Upload Section */}\n                    <div>\n                      <FormLabel>Attachments (Optional)</FormLabel>\n                      <div className=\"mt-2 space-y-4\">\n                        <div className=\"flex items-center justify-center w-full\">\n                          <label className=\"flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100\">\n                            <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                              <Upload className=\"w-8 h-8 mb-4 text-gray-500\" />\n                              <p className=\"mb-2 text-sm text-gray-500\">\n                                <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                              </p>\n                              <p className=\"text-xs text-gray-500\">PDF, DOC, XLS, IMG (MAX. 10MB each)</p>\n                            </div>\n                            <input\n                              type=\"file\"\n                              className=\"hidden\"\n                              multiple\n                              accept=\".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png,.txt,.csv\"\n                              onChange={handleFileChange}\n                            />\n                          </label>\n                        </div>\n\n                        {selectedFiles.length > 0 && (\n                          <div className=\"space-y-2\">\n                            {selectedFiles.map((file, index) => (\n                              <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\">\n                                <div className=\"flex items-center space-x-2\">\n                                  {getFileIcon(file)}\n                                  <span className=\"text-sm text-gray-700\">{file.name}</span>\n                                  <span className=\"text-xs text-gray-500\">\n                                    ({(file.size / (1024 * 1024)).toFixed(2)} MB)\n                                  </span>\n                                </div>\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => removeFile(index)}\n                                >\n                                  <X className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* AI Analysis Results */}\n                    {aiAnalysis && (\n                      <div className=\"p-4 bg-slate-50 rounded-lg border\">\n                        <div className=\"flex items-center space-x-2 mb-3\">\n                          <Brain className=\"w-5 h-5 text-purple-600\" />\n                          <h3 className=\"font-medium text-slate-800\">AI Analysis Results</h3>\n                        </div>\n                        \n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-sm font-medium\">Overall Score:</span>\n                            <span className={`text-sm font-bold ${\n                              aiAnalysis.overallScore >= 80 ? 'text-green-600' :\n                              aiAnalysis.overallScore >= 60 ? 'text-yellow-600' :\n                              'text-red-600'\n                            }`}>\n                              {aiAnalysis.overallScore}%\n                            </span>\n                          </div>\n                          \n                          <p className=\"text-sm text-slate-600\">{aiAnalysis.overallFeedback}</p>\n\n                          {aiAnalysis.strengthsIdentified?.length > 0 && (\n                            <div>\n                              <h4 className=\"font-medium text-gray-900 mb-2\">Strengths Identified</h4>\n                              <ul className=\"text-sm text-green-700 space-y-1\">\n                                {aiAnalysis.strengthsIdentified.map((strength: string, index: number) => (\n                                  <li key={index} className=\"flex items-start\">\n                                    <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                                    {strength}\n                                  </li>\n                                ))}\n                              </ul>\n                            </div>\n                          )}\n\n                          {aiAnalysis.priorityImprovements?.length > 0 && (\n                            <div>\n                              <h4 className=\"font-medium text-gray-900 mb-2\">Priority Improvements</h4>\n                              <ul className=\"text-sm text-orange-700 space-y-1\">\n                                {aiAnalysis.priorityImprovements.map((improvement: string, index: number) => (\n                                  <li key={index} className=\"flex items-start\">\n                                    <span className=\"w-4 h-4 text-orange-500 mr-2 mt-0.5 flex-shrink-0\">⚡</span>\n                                    {improvement}\n                                  </li>\n                                ))}\n                              </ul>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    <div className=\"flex gap-3 pt-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsOpen(false)}\n                        className=\"flex-1\"\n                      >\n                        Cancel\n                      </Button>\n                      \n                      {!aiAnalysis ? (\n                        <Button\n                          type=\"button\"\n                          onClick={analyzeReport}\n                          disabled={isAnalyzing || !form.watch(\"title\") || !form.watch(\"content\")}\n                          className=\"flex-1 bg-purple-600 hover:bg-purple-700\"\n                        >\n                          <Brain className=\"w-4 h-4 mr-2\" />\n                          {isAnalyzing ? \"Analyzing...\" : \"Analyze Report\"}\n                        </Button>\n                      ) : isReadyForSubmission() ? (\n                        <Button\n                          type=\"submit\"\n                          disabled={submitReportMutation.isPending}\n                          className=\"flex-1 bg-green-600 hover:bg-green-700 disabled:opacity-50\"\n                        >\n                          <CheckCircle className=\"w-4 h-4 mr-2\" />\n                          {submitReportMutation.isPending ? \"Submitting...\" : \"Submit Report\"}\n                        </Button>\n                      ) : (\n                        <div className=\"flex-1 space-y-2\">\n                          <Button\n                            type=\"button\"\n                            onClick={analyzeReport}\n                            disabled={isAnalyzing}\n                            className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                          >\n                            <Brain className=\"w-4 h-4 mr-2\" />\n                            {isAnalyzing ? \"Re-analyzing...\" : \"Re-analyze Report\"}\n                          </Button>\n                          <p className=\"text-xs text-orange-600 text-center\">\n                            Please improve your report based on AI feedback before submitting\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  </form>\n                </Form>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </>\n      );\n    }","size_bytes":28897},"client/src/components/report-form-new.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, X, FileText, Image, Paperclip, Plus, Brain, CheckCircle } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\nconst reportSchema = z.object({\n  title: z.string().min(3, \"Report title must be at least 3 characters\"),\n  content: z.string().min(10, \"Report content must be at least 10 characters\"),\n  projectId: z.string().min(1, \"Please select a project\"),\n});\n\ninterface ReportFormProps {\n  projectId?: number;\n  reportId?: number;\n  onSuccess?: () => void;\n}\n\nexport default function ReportForm({ projectId, reportId, onSuccess }: ReportFormProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [aiAnalysis, setAiAnalysis] = useState<any>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  const { data: projects, isLoading: projectsLoading } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Fetch existing report data when editing\n  const { data: existingReport, isLoading: reportLoading } = useQuery({\n    queryKey: [\"/api/reports\", reportId],\n    enabled: !!reportId,\n  });\n\n  const form = useForm<z.infer<typeof reportSchema>>({\n    resolver: zodResolver(reportSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      projectId: projectId ? projectId.toString() : \"\",\n    },\n  });\n\n  // Load existing report data into form when available\n  useEffect(() => {\n    if (existingReport && !reportLoading) {\n      const report = existingReport as any;\n      console.log(\"Loading existing report data:\", report);\n      \n      form.reset({\n        title: report.title || \"\",\n        content: report.content || \"\",\n        projectId: report.projectId ? report.projectId.toString() : \"\",\n      });\n    } else if (projectId && !reportId) {\n      form.setValue(\"projectId\", projectId.toString());\n    }\n  }, [existingReport, reportLoading, projectId, reportId, form]);\n\n  const submitReportMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const url = reportId ? `/api/reports/${reportId}` : \"/api/reports\";\n      const method = reportId ? \"PUT\" : \"POST\";\n      \n      const response = await fetch(url, {\n        method: method,\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || \"Failed to submit report\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\", reportId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: reportId ? \"Report updated successfully!\" : \"Report submitted successfully! It's now pending review.\",\n      });\n      if (!reportId) {\n        form.reset();\n        setSelectedFiles([]);\n        setAiAnalysis(null);\n      }\n      setIsOpen(false);\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit report\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    \n    // Validate file size (10MB limit)\n    const validFiles = files.filter(file => {\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: `${file.name} exceeds 10MB limit`,\n          variant: \"destructive\",\n        });\n        return false;\n      }\n      return true;\n    });\n\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const analyzeReport = async () => {\n    const formData = form.getValues();\n    if (!formData.title || !formData.content) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide both title and content before analyzing.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsAnalyzing(true);\n    try {\n      // Find the selected project to get its description\n      const selectedProject = (projects as any)?.find((p: any) => p.id.toString() === formData.projectId);\n      \n      const response = await fetch(\"/api/reports/analyze\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          title: formData.title,\n          content: formData.content,\n          projectId: parseInt(formData.projectId),\n          projectDescription: selectedProject?.description || \"\",\n          projectGoals: selectedProject?.goals || \"\",\n          hasAttachments: selectedFiles.length > 0,\n          attachmentCount: selectedFiles.length,\n          attachmentTypes: selectedFiles.map(f => f.type),\n        }),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to analyze report\");\n      }\n\n      const analysis = await response.json();\n      setAiAnalysis(analysis);\n      \n      const readinessMessage = getReadinessMessage(analysis.readinessLevel);\n      toast({\n        title: \"Analysis Complete\",\n        description: readinessMessage,\n      });\n    } catch (error: any) {\n      console.error(\"Analysis error:\", error);\n      toast({\n        title: \"Analysis Failed\",\n        description: error?.message || \"Unable to analyze report. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const getReadinessMessage = (level: string): string => {\n    switch (level) {\n      case 'excellent':\n        return 'Report is comprehensive and ready for submission!';\n      case 'good':\n        return 'Report is solid with minor areas for enhancement.';\n      case 'needs-minor-improvements':\n        return 'Report needs some refinements before submission.';\n      case 'needs-major-improvements':\n        return 'Report requires significant improvements before submission.';\n      default:\n        return 'Report analysis completed.';\n    }\n  };\n\n  const isReadyForSubmission = () => {\n    return aiAnalysis && aiAnalysis.overallScore >= 40;\n  };\n\n  const handleFormSubmit = async (values: z.infer<typeof reportSchema>) => {\n    console.log(\"Form submit with values:\", values);\n    \n    // Validate form data\n    if (!values.title || !values.content || !values.projectId) {\n      toast({\n        title: \"Missing Required Fields\",\n        description: \"Please fill in title, content, and select a project.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create FormData for submission\n    const formData = new FormData();\n    formData.append(\"title\", values.title);\n    formData.append(\"content\", values.content);\n    formData.append(\"projectId\", values.projectId);\n    \n    // Add files if any\n    selectedFiles.forEach((file) => {\n      formData.append(\"files\", file);\n    });\n    \n    console.log(\"Submitting FormData entries:\");\n    const entries = Array.from(formData.entries());\n    entries.forEach(([key, value]) => {\n      console.log(`${key}:`, value);\n    });\n    \n    try {\n      await submitReportMutation.mutateAsync(formData);\n    } catch (error) {\n      console.error(\"Submit error:\", error);\n    }\n  };\n\n  const getFileIcon = (file: File) => {\n    if (file.type.startsWith(\"image/\")) {\n      return <Image className=\"w-4 h-4\" />;\n    } else if (file.type.includes(\"pdf\") || file.type.includes(\"document\")) {\n      return <FileText className=\"w-4 h-4\" />;\n    }\n    return <Paperclip className=\"w-4 h-4\" />;\n  };\n\n  if (reportId && reportLoading) {\n    return <div>Loading report data...</div>;\n  }\n\n  return (\n    <>\n      {!reportId && (\n        <Button \n          onClick={() => setIsOpen(true)}\n          className=\"h-9 px-4 bg-green-600 hover:bg-green-700 text-white font-medium\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Report\n        </Button>\n      )}\n      \n      <Dialog open={reportId ? true : isOpen} onOpenChange={reportId ? () => {} : setIsOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {reportId ? \"Edit Report\" : \"Submit New Report\"}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-6 p-6\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleFormSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Report Title *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter report title\"\n                          {...field}\n                          onChange={(e) => {\n                            field.onChange(e);\n                            setAiAnalysis(null);\n                          }}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"content\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Report Content *</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Describe your progress, achievements, challenges, and next steps...\"\n                          className=\"min-h-[120px]\"\n                          {...field}\n                          onChange={(e) => {\n                            field.onChange(e);\n                            setAiAnalysis(null);\n                          }}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"projectId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Project *</FormLabel>\n                      <Select onValueChange={(value) => {\n                        field.onChange(value);\n                        setAiAnalysis(null);\n                      }} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a project\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {(projects as any)?.map((project: any) => (\n                            <SelectItem key={project.id} value={project.id.toString()}>\n                              {project.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* File Upload Section */}\n                <div>\n                  <Label>Attachments (Optional)</Label>\n                  <div className=\"mt-2 space-y-4\">\n                    <div className=\"flex items-center justify-center w-full\">\n                      <label className=\"flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100\">\n                        <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                          <Upload className=\"w-8 h-8 mb-4 text-gray-500\" />\n                          <p className=\"mb-2 text-sm text-gray-500\">\n                            <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                          </p>\n                          <p className=\"text-xs text-gray-500\">PDF, DOC, XLS, IMG (MAX. 10MB each)</p>\n                        </div>\n                        <input\n                          type=\"file\"\n                          className=\"hidden\"\n                          multiple\n                          accept=\".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png,.txt,.csv\"\n                          onChange={handleFileChange}\n                        />\n                      </label>\n                    </div>\n\n                    {selectedFiles.length > 0 && (\n                      <div className=\"space-y-2\">\n                        {selectedFiles.map((file, index) => (\n                          <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-md\">\n                            <div className=\"flex items-center space-x-2\">\n                              {getFileIcon(file)}\n                              <span className=\"text-sm text-gray-700\">{file.name}</span>\n                              <span className=\"text-xs text-gray-500\">\n                                ({(file.size / (1024 * 1024)).toFixed(2)} MB)\n                              </span>\n                            </div>\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeFile(index)}\n                            >\n                              <X className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* AI Analysis Results */}\n                {aiAnalysis && (\n                  <div className=\"p-4 bg-slate-50 rounded-lg border\">\n                    <div className=\"flex items-center space-x-2 mb-3\">\n                      <Brain className=\"w-5 h-5 text-purple-600\" />\n                      <h3 className=\"font-medium text-slate-800\">AI Analysis Results</h3>\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-medium\">Overall Score:</span>\n                        <span className={`text-sm font-bold ${\n                          aiAnalysis.overallScore >= 80 ? 'text-green-600' :\n                          aiAnalysis.overallScore >= 60 ? 'text-yellow-600' :\n                          'text-red-600'\n                        }`}>\n                          {aiAnalysis.overallScore}%\n                        </span>\n                        <span className={`text-xs px-2 py-1 rounded-full ${\n                          aiAnalysis.readinessLevel === 'excellent' ? 'bg-green-100 text-green-800' :\n                          aiAnalysis.readinessLevel === 'good' ? 'bg-blue-100 text-blue-800' :\n                          aiAnalysis.readinessLevel === 'needs-minor-improvements' ? 'bg-yellow-100 text-yellow-800' :\n                          'bg-red-100 text-red-800'\n                        }`}>\n                          {aiAnalysis.readinessLevel.replace('-', ' ')}\n                        </span>\n                      </div>\n                      \n                      <p className=\"text-sm text-slate-600\">{aiAnalysis.overallFeedback}</p>\n                      \n                      {aiAnalysis.strengthsIdentified && aiAnalysis.strengthsIdentified.length > 0 && (\n                        <div>\n                          <h4 className=\"text-sm font-medium text-green-700 mb-1\">Strengths:</h4>\n                          <ul className=\"text-sm text-slate-600 space-y-1\">\n                            {aiAnalysis.strengthsIdentified.map((strength: string, index: number) => (\n                              <li key={index} className=\"flex items-start space-x-1\">\n                                <span className=\"text-green-500 mt-1\">•</span>\n                                <span>{strength}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                      \n                      {aiAnalysis.priorityImprovements && aiAnalysis.priorityImprovements.length > 0 && (\n                        <div>\n                          <h4 className=\"text-sm font-medium text-orange-700 mb-1\">Priority Improvements:</h4>\n                          <ul className=\"text-sm text-slate-600 space-y-1\">\n                            {aiAnalysis.priorityImprovements.map((improvement: string, index: number) => (\n                              <li key={index} className=\"flex items-start space-x-1\">\n                                <span className=\"text-orange-500 mt-1\">•</span>\n                                <span>{improvement}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => reportId ? onSuccess?.() : setIsOpen(false)}\n                    className=\"flex-1\"\n                  >\n                    Cancel\n                  </Button>\n                  \n                  {!aiAnalysis ? (\n                    <Button\n                      type=\"button\"\n                      onClick={analyzeReport}\n                      disabled={isAnalyzing || !form.watch(\"title\") || !form.watch(\"content\")}\n                      className=\"flex-1 bg-purple-600 hover:bg-purple-700\"\n                    >\n                      <Brain className=\"w-4 h-4 mr-2\" />\n                      {isAnalyzing ? \"Analyzing...\" : \"Analyze Report\"}\n                    </Button>\n                  ) : isReadyForSubmission() ? (\n                    <Button\n                      type=\"submit\"\n                      disabled={submitReportMutation.isPending}\n                      className=\"flex-1 bg-green-600 hover:bg-green-700 disabled:opacity-50\"\n                    >\n                      <CheckCircle className=\"w-4 h-4 mr-2\" />\n                      {submitReportMutation.isPending ? \"Submitting...\" : (reportId ? \"Update Report\" : \"Submit Report\")}\n                    </Button>\n                  ) : (\n                    <div className=\"flex-1 space-y-2\">\n                      <Button\n                        type=\"button\"\n                        onClick={analyzeReport}\n                        disabled={isAnalyzing}\n                        className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                      >\n                        <Brain className=\"w-4 h-4 mr-2\" />\n                        {isAnalyzing ? \"Re-analyzing...\" : \"Re-analyze Report\"}\n                      </Button>\n                      <p className=\"text-xs text-orange-600 text-center\">\n                        Please improve your report based on AI feedback before submitting\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </form>\n            </Form>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":20479},"client/src/components/report-form.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, X, FileText, Image, Paperclip, Plus, Brain, CheckCircle } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\nconst reportSchema = z.object({\n  title: z.string().min(3, \"Report title must be at least 3 characters\"),\n  content: z.string().min(10, \"Report content must be at least 10 characters\"),\n  projectId: z.string().min(1, \"Please select a project\"),\n});\n\ninterface ReportFormProps {\n  projectId?: number;\n  reportId?: number;\n  onSuccess?: () => void;\n}\n\nexport default function ReportForm({ projectId, reportId, onSuccess }: ReportFormProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [aiAnalysis, setAiAnalysis] = useState<any>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  const { data: projects, isLoading: projectsLoading } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Fetch existing report data when editing\n  const { data: existingReport, isLoading: reportLoading } = useQuery({\n    queryKey: [\"/api/reports\", reportId],\n    enabled: !!reportId,\n  });\n\n  const form = useForm<z.infer<typeof reportSchema>>({\n    resolver: zodResolver(reportSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      projectId: projectId ? projectId.toString() : \"\",\n    },\n  });\n\n  // Load existing report data into form when available\n  useEffect(() => {\n    if (existingReport && !reportLoading) {\n      const report = existingReport as any;\n      console.log(\"Loading existing report data:\", report);\n      \n      form.reset({\n        title: report.title || \"\",\n        content: report.content || \"\",\n        projectId: report.projectId ? report.projectId.toString() : \"\",\n      });\n    } else if (projectId && !reportId) {\n      form.setValue(\"projectId\", projectId.toString());\n    }\n  }, [existingReport, reportLoading, projectId, reportId, form]);\n\n  const submitReportMutation = useMutation({\n    mutationFn: async (data: FormData | z.infer<typeof reportSchema>) => {\n      let formData: FormData;\n      \n      if (data instanceof FormData) {\n        formData = data;\n      } else {\n        formData = new FormData();\n        formData.append(\"title\", data.title);\n        formData.append(\"content\", data.content);\n        formData.append(\"projectId\", data.projectId);\n        \n        selectedFiles.forEach((file) => {\n          formData.append(\"files\", file);\n        });\n      }\n\n      const url = reportId ? `/api/reports/${reportId}` : \"/api/reports\";\n      const method = reportId ? \"PUT\" : \"POST\";\n      \n      const response = await fetch(url, {\n        method: method,\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || \"Failed to submit report\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\", reportId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Success\",\n        description: reportId ? \"Report updated successfully!\" : \"Report submitted successfully! It's now pending review.\",\n      });\n      if (!reportId) {\n        form.reset();\n        setSelectedFiles([]);\n        setAiAnalysis(null);\n      }\n      setIsOpen(false);\n      onSuccess?.();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit report\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    \n    // Validate file size (10MB limit)\n    const validFiles = files.filter(file => {\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: `${file.name} exceeds 10MB limit`,\n          variant: \"destructive\",\n        });\n        return false;\n      }\n      return true;\n    });\n\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const analyzeReport = async () => {\n    const formData = form.getValues();\n    if (!formData.title || !formData.content) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide both title and content before analyzing.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsAnalyzing(true);\n    try {\n      // Find the selected project to get its description\n      const selectedProject = (projects as any)?.find((p: any) => p.id.toString() === formData.projectId);\n      \n      // Parse file contents if files are selected\n      let attachmentContents = '';\n      if (selectedFiles.length > 0) {\n        const fileContents = await Promise.all(\n          selectedFiles.map(async (file) => {\n            try {\n              if (file.type.includes('text') || file.type.includes('txt') || \n                  file.type.includes('csv') || file.type.includes('json') || \n                  file.type.includes('xml')) {\n                const content = await file.text();\n                return `${file.type} File (${file.name}):\\n${content.slice(0, 3000)}`;\n              } else if (file.type.includes('pdf')) {\n                return `PDF File (${file.name}): Content will be analyzed server-side`;\n              } else if (file.type.includes('excel') || file.type.includes('spreadsheet') ||\n                         file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {\n                return `Excel File (${file.name}): Content will be analyzed server-side`;\n              } else if (file.type.includes('image')) {\n                return `Image File (${file.name}): Visual content attached`;\n              } else {\n                // Try to read as text for other file types\n                try {\n                  const content = await file.text();\n                  return `File (${file.name}, ${file.type}):\\n${content.slice(0, 2000)}`;\n                } catch {\n                  return `File (${file.name}): Binary file, ${file.type}`;\n                }\n              }\n            } catch (error) {\n              return `File (${file.name}): Error reading content`;\n            }\n          })\n        );\n        attachmentContents = fileContents.join('\\n\\n---\\n\\n');\n      }\n      \n      console.log(\"Sending analysis request with attachment contents:\", attachmentContents.length > 0);\n      console.log(\"Selected files for analysis:\", selectedFiles.map(f => ({ name: f.name, type: f.type, size: f.size })));\n      \n      const response = await fetch(\"/api/reports/analyze\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n        title: formData.title,\n        content: formData.content,\n        projectId: parseInt(formData.projectId),\n        projectDescription: selectedProject?.description || \"\",\n          projectGoals: selectedProject?.goals || \"\",\n          hasAttachments: selectedFiles.length > 0,\n          attachmentCount: selectedFiles.length,\n          attachmentTypes: selectedFiles.map(f => f.type),\n        }),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to analyze report\");\n      }\n\n      const analysis = await response.json();\n\n      setAiAnalysis(analysis);\n      \n      const readinessMessage = getReadinessMessage(analysis.readinessLevel);\n      toast({\n        title: \"Analysis Complete\",\n        description: readinessMessage,\n      });\n    } catch (error: any) {\n      console.error(\"Analysis error:\", error);\n      const errorMessage = error?.message || \"Unable to analyze report. Please try again.\";\n      toast({\n        title: \"Analysis Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const getReadinessMessage = (level: string): string => {\n    switch (level) {\n      case 'excellent':\n        return 'Report is comprehensive and ready for submission!';\n      case 'good':\n        return 'Report is solid with minor areas for enhancement.';\n      case 'needs-minor-improvements':\n        return 'Report needs some refinements before submission.';\n      case 'needs-major-improvements':\n        return 'Report requires significant improvements before submission.';\n      default:\n        return 'Report analysis completed.';\n    }\n  };\n\n  const isReadyForSubmission = () => {\n    return aiAnalysis && aiAnalysis.overallScore >= 40;\n  };\n\n  const handleSubmit = async (formValues: z.infer<typeof reportSchema>) => {\n    // Use the validated form values directly\n    const data = formValues;\n    \n    console.log(\"handleSubmit called with data:\", data);\n    console.log(\"Form watch values:\", {\n      title: form.watch(\"title\"),\n      content: form.watch(\"content\"), \n      projectId: form.watch(\"projectId\")\n    });\n    console.log(\"Selected files:\", selectedFiles);\n    console.log(\"AI Analysis:\", aiAnalysis);\n    \n    // Validate form data\n    if (!data.title || !data.content || !data.projectId || data.projectId === 'undefined') {\n      toast({\n        title: \"Missing Required Fields\",\n        description: \"Please fill in title, content, and select a project.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Ensure projectId is a valid number\n    const projectIdNum = parseInt(data.projectId);\n    if (isNaN(projectIdNum)) {\n      toast({\n        title: \"Invalid Project\",\n        description: \"Please select a valid project from the dropdown.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Only submit if AI analysis approves OR user explicitly chooses to submit anyway\n    if (!aiAnalysis) {\n      toast({\n        title: \"Analysis Required\",\n        description: \"Please analyze your report before submitting.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!isReadyForSubmission()) {\n      toast({\n        title: \"Report Needs Improvement\",\n        description: `Your report scored ${aiAnalysis.overallScore}/100. Please improve it to reach at least 40% before submitting.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Create FormData for file upload\n    const formData = new FormData();\n    formData.append(\"title\", data.title);\n    formData.append(\"content\", data.content);\n    formData.append(\"projectId\", projectIdNum.toString());\n    \n    // Append files\n    selectedFiles.forEach((file) => {\n      formData.append(\"files\", file);\n    });\n    \n    console.log(\"Submitting form data with files:\", selectedFiles.length);\n    console.log(\"FormData entries:\");\n    const entries = Array.from(formData.entries());\n    entries.forEach(([key, value]) => {\n      console.log(`${key}:`, value);\n    });\n    \n    submitReportMutation.mutate(formData);\n  };\n\n  const getFileIcon = (file: File) => {\n    if (file.type.startsWith(\"image/\")) {\n      return <Image className=\"w-4 h-4\" />;\n    } else if (file.type.includes(\"pdf\") || file.type.includes(\"document\")) {\n      return <FileText className=\"w-4 h-4\" />;\n    }\n    return <Paperclip className=\"w-4 h-4\" />;\n  };\n\n  if (reportId && reportLoading) {\n    return <div>Loading report data...</div>;\n  }\n\n  return (\n    <>\n      {!reportId && (\n        <Button \n          onClick={() => setIsOpen(true)}\n          className=\"h-9 px-4 bg-green-600 hover:bg-green-700 text-white font-medium\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Report\n        </Button>\n      )}\n      \n      <Dialog open={reportId ? false : isOpen} onOpenChange={reportId ? () => {} : setIsOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {reportId ? \"Edit Report\" : \"Submit New Report\"}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-6 p-6\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Report Title *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter report title\"\n                        {...field}\n                        onChange={(e) => {\n                          field.onChange(e);\n                          setAiAnalysis(null);\n                        }}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div>\n                <Label htmlFor=\"content\">Report Content *</Label>\n                <Textarea\n                  id=\"content\"\n                  {...form.register(\"content\")}\n                  className=\"mt-1\"\n                  placeholder=\"Describe your progress, achievements, and any challenges...\"\n                  rows={4}\n                />\n                {form.formState.errors.content && (\n                  <p className=\"text-sm text-red-600\">{String(form.formState.errors.content.message)}</p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"projectId\">Project *</Label>\n                <Select \n                  onValueChange={(value) => {\n                    form.setValue(\"projectId\", value);\n                    // Reset AI analysis when project changes\n                    setAiAnalysis(null);\n                  }} \n                  value={form.watch(\"projectId\")}\n                >\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"Select a project\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {(projects as any)?.map((project: any) => (\n                      <SelectItem key={project.id} value={project.id.toString()}>\n                        {project.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.projectId && (\n                  <p className=\"text-sm text-red-600\">{String(form.formState.errors.projectId.message)}</p>\n                )}\n              </div>\n\n              <div className=\"transition-all duration-300\">\n                <div className=\"space-y-3 sm:space-y-4\">\n                  <div>\n                    <Label className=\"text-responsive-base\">File Attachments (Optional)</Label>\n                    <p className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400 mb-3 transition-colors duration-200\">\n                      Attach photos, documents, or other files to support your report. Maximum 10MB per file.\n                    </p>\n                    <input\n                      type=\"file\"\n                      multiple\n                      accept=\".pdf,.doc,.docx,.png,.jpg,.jpeg,.gif\"\n                      onChange={handleFileChange}\n                      className=\"hidden\"\n                      id=\"file-upload\"\n                    />\n                    <Label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                      <Button type=\"button\" variant=\"outline\" asChild className=\"transition-all duration-200 hover:scale-105\">\n                        <span className=\"text-responsive-sm\">Choose Files</span>\n                      </Button>\n                    </Label>\n                  </div>\n\n                  {selectedFiles.length > 0 && (\n                    <div className=\"mt-4\">\n                      <h4 className=\"text-sm font-medium text-gray-900 mb-2\">\n                        Selected Files ({selectedFiles.length})\n                      </h4>\n                      <div className=\"space-y-2\">\n                        {selectedFiles.map((file, index) => (\n                          <div\n                            key={index}\n                            className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                          >\n                            <div className=\"flex items-center space-x-3\">\n                              {getFileIcon(file)}\n                              <div>\n                                <p className=\"text-sm font-medium text-gray-900\">{file.name}</p>\n                                <p className=\"text-xs text-gray-500\">\n                                  {(file.size / 1024 / 1024).toFixed(2)} MB\n                                </p>\n                              </div>\n                            </div>\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeFile(index)}\n                              className=\"text-red-500 hover:text-red-700\"\n                            >\n                              <X className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0\">\n                    <FileText className=\"w-5 h-5 text-blue-500\" />\n                  </div>\n                  <div className=\"ml-3\">\n                    <h4 className=\"text-sm font-medium text-blue-800\">Report Submission Guidelines</h4>\n                    <ul className=\"mt-2 text-sm text-blue-700 list-disc list-inside space-y-1\">\n                      <li>Provide detailed and accurate information about project activities</li>\n                      <li>Include specific metrics, achievements, and challenges faced</li>\n                      <li>Attach relevant photos, documents, or evidence of progress</li>\n                      <li>Reports will be reviewed by administrators before approval</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex-shrink-0\">\n                    <svg className=\"w-5 h-5 text-blue-600 mt-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n                    </svg>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-sm font-medium text-blue-900 mb-1\">\n                      Report Submission Guidelines\n                    </h3>\n                    <div className=\"text-sm text-blue-700 space-y-1\">\n                      <p>• Be specific and detailed about your progress and achievements</p>\n                      <p>• Include any challenges faced and how you addressed them</p>\n                      <p>• Mention next steps and planned activities</p>\n                      <p>• Attach relevant photos or documents if available</p>\n                      <p className=\"font-medium text-purple-700\">• Use AI Review to improve your report quality before submission</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* AI Report Review Section */}\n              {aiAnalysis && (\n                <div className=\"mt-6 pt-6 border-t\">\n                  <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200 rounded-lg p-6\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <div className=\"flex-shrink-0\">\n                        <div className=\"w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center\">\n                          <Brain className=\"w-4 h-4 text-white\" />\n                        </div>\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-gray-900\">AI Analysis Results</h3>\n                        <p className=\"text-sm text-gray-600\">Score: {aiAnalysis.overallScore}/100</p>\n                      </div>\n                      <div className=\"ml-auto\">\n                        <span className={`px-3 py-1 rounded-full text-xs font-medium ${\n                          aiAnalysis.readinessLevel === 'excellent' ? 'bg-green-100 text-green-800' :\n                          aiAnalysis.readinessLevel === 'good' ? 'bg-blue-100 text-blue-800' :\n                          aiAnalysis.readinessLevel === 'needs-minor-improvements' ? 'bg-yellow-100 text-yellow-800' :\n                          'bg-red-100 text-red-800'\n                        }`}>\n                          {aiAnalysis.readinessLevel.replace(/-/g, ' ').toUpperCase()}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 mb-2\">Overall Feedback</h4>\n                        <p className=\"text-sm text-gray-700 bg-white p-3 rounded border\">{aiAnalysis.overallFeedback}</p>\n                      </div>\n                      \n                      {aiAnalysis.strengthsIdentified?.length > 0 && (\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-2\">Strengths Identified</h4>\n                          <ul className=\"text-sm text-green-700 space-y-1\">\n                            {aiAnalysis.strengthsIdentified.map((strength: string, index: number) => (\n                              <li key={index} className=\"flex items-start\">\n                                <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                                {strength}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                      \n                      {aiAnalysis.priorityImprovements?.length > 0 && (\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-2\">Priority Improvements</h4>\n                          <ul className=\"text-sm text-orange-700 space-y-1\">\n                            {aiAnalysis.priorityImprovements.map((improvement: string, index: number) => (\n                              <li key={index} className=\"flex items-start\">\n                                <span className=\"w-4 h-4 text-orange-500 mr-2 mt-0.5 flex-shrink-0\">⚡</span>\n                                {improvement}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex gap-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n                \n                {!aiAnalysis ? (\n                  <Button\n                    type=\"button\"\n                    onClick={analyzeReport}\n                    disabled={isAnalyzing || !form.watch(\"title\") || !form.watch(\"content\")}\n                    className=\"flex-1 bg-purple-600 hover:bg-purple-700\"\n                  >\n                    <Brain className=\"w-4 h-4 mr-2\" />\n                    {isAnalyzing ? \"Analyzing...\" : \"Analyze Report\"}\n                  </Button>\n                ) : isReadyForSubmission() ? (\n                  <Button\n                    type=\"submit\"\n                    disabled={submitReportMutation.isPending}\n                    className=\"flex-1 bg-green-600 hover:bg-green-700 disabled:opacity-50\"\n                  >\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    {submitReportMutation.isPending ? \"Submitting...\" : (reportId ? \"Update Report\" : \"Submit Report\")}\n                  </Button>\n                ) : (\n                  <div className=\"flex-1 space-y-2\">\n                    <Button\n                      type=\"button\"\n                      onClick={analyzeReport}\n                      disabled={isAnalyzing}\n                      className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                    >\n                      <Brain className=\"w-4 h-4 mr-2\" />\n                      {isAnalyzing ? \"Re-analyzing...\" : \"Re-analyze Report\"}\n                    </Button>\n                    <p className=\"text-xs text-orange-600 text-center\">\n                      Please improve your report based on AI feedback before submitting\n                    </p>\n                  </div>\n                )}\n              </div>\n              </form>\n            </Form>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":26474},"client/src/components/smart-notifications.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Bell, \n  Clock, \n  AlertTriangle,\n  CheckCircle2,\n  TrendingUp,\n  Calendar,\n  Target,\n  DollarSign,\n  FileText,\n  Users\n} from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface SmartNotificationsProps {\n  userRole: 'admin' | 'officer';\n}\n\nexport default function SmartNotifications({ userRole }: SmartNotificationsProps) {\n  const [dismissedNotifications, setDismissedNotifications] = useState<string[]>([]);\n\n  const { data: projects } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: reports } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const generateNotifications = () => {\n    if (!projects || !reports || !stats) return [];\n\n    const notifications = [];\n    const now = new Date();\n\n    // Overdue projects\n    const overdueProjects = projects.filter((p: any) => {\n      if (p.status === 'completed' || p.status === 'cancelled') return false;\n      if (!p.deadline) return false;\n      return new Date(p.deadline) < now;\n    });\n\n    if (overdueProjects.length > 0) {\n      notifications.push({\n        id: 'overdue-projects',\n        type: 'urgent',\n        icon: AlertTriangle,\n        title: `${overdueProjects.length} Project${overdueProjects.length > 1 ? 's' : ''} Overdue`,\n        description: `${overdueProjects.map((p: any) => p.name).join(', ')} ${overdueProjects.length > 1 ? 'are' : 'is'} past deadline`,\n        action: userRole === 'admin' ? 'Review Projects' : 'Update Progress',\n        color: 'destructive'\n      });\n    }\n\n    // Projects approaching deadline (within 7 days)\n    const upcomingDeadlines = projects.filter((p: any) => {\n      if (p.status === 'completed' || p.status === 'cancelled') return false;\n      if (!p.deadline) return false;\n      const deadline = new Date(p.deadline);\n      const sevenDaysFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\n      return deadline > now && deadline <= sevenDaysFromNow;\n    });\n\n    if (upcomingDeadlines.length > 0) {\n      notifications.push({\n        id: 'upcoming-deadlines',\n        type: 'warning',\n        icon: Clock,\n        title: `${upcomingDeadlines.length} Deadline${upcomingDeadlines.length > 1 ? 's' : ''} Approaching`,\n        description: `Projects due within 7 days: ${upcomingDeadlines.map((p: any) => p.name).join(', ')}`,\n        action: 'View Calendar',\n        color: 'warning'\n      });\n    }\n\n    // Low progress projects (less than 25% and active for over 30 days)\n    const stalledProjects = projects.filter((p: any) => {\n      if (p.status !== 'active') return false;\n      const progress = p.progress || 0;\n      const createdDate = new Date(p.createdAt);\n      const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      return progress < 25 && createdDate < thirtyDaysAgo;\n    });\n\n    if (stalledProjects.length > 0) {\n      notifications.push({\n        id: 'stalled-projects',\n        type: 'info',\n        icon: Target,\n        title: `${stalledProjects.length} Project${stalledProjects.length > 1 ? 's' : ''} Need Attention`,\n        description: `Low progress on projects active for over 30 days`,\n        action: 'Review Progress',\n        color: 'default'\n      });\n    }\n\n    // Budget alerts (over 80% utilized)\n    const budgetWarnings = projects.filter((p: any) => {\n      if (!p.budget || p.budget <= 0) return false;\n      const utilization = (p.budgetSpent || 0) / p.budget;\n      return utilization > 0.8 && p.status === 'active';\n    });\n\n    if (budgetWarnings.length > 0 && userRole === 'admin') {\n      notifications.push({\n        id: 'budget-warnings',\n        type: 'warning',\n        icon: DollarSign,\n        title: `Budget Alert: ${budgetWarnings.length} Project${budgetWarnings.length > 1 ? 's' : ''}`,\n        description: `Projects have used over 80% of allocated budget`,\n        action: 'Review Budgets',\n        color: 'warning'\n      });\n    }\n\n    // Pending reports (admin only)\n    if (userRole === 'admin') {\n      const pendingReports = reports.filter((r: any) => r.status === 'submitted');\n      if (pendingReports.length > 0) {\n        notifications.push({\n          id: 'pending-reports',\n          type: 'info',\n          icon: FileText,\n          title: `${pendingReports.length} Report${pendingReports.length > 1 ? 's' : ''} Awaiting Review`,\n          description: `New reports submitted for approval`,\n          action: 'Review Reports',\n          color: 'default'\n        });\n      }\n    }\n\n    // Officer-specific: Rejected reports that need resubmission\n    if (userRole === 'officer') {\n      const rejectedReports = reports.filter((r: any) => r.status === 'rejected');\n      if (rejectedReports.length > 0) {\n        notifications.push({\n          id: 'rejected-reports',\n          type: 'warning',\n          icon: FileText,\n          title: `${rejectedReports.length} Report${rejectedReports.length > 1 ? 's' : ''} Need Revision`,\n          description: `Reports require updates based on admin feedback`,\n          action: 'View Feedback',\n          color: 'warning'\n        });\n      }\n    }\n\n    // Performance insights\n    const totalReports = reports.length;\n    const approvedReports = reports.filter((r: any) => r.status === 'approved').length;\n    const approvalRate = totalReports > 0 ? (approvedReports / totalReports) * 100 : 0;\n\n    if (approvalRate < 70 && totalReports > 5) {\n      notifications.push({\n        id: 'low-approval-rate',\n        type: 'info',\n        icon: TrendingUp,\n        title: 'Report Approval Rate Below Target',\n        description: `Current approval rate: ${Math.round(approvalRate)}%. Consider reviewing report quality guidelines.`,\n        action: 'View Guidelines',\n        color: 'default'\n      });\n    }\n\n    // Milestone celebrations\n    const recentlyCompleted = projects.filter((p: any) => {\n      if (p.status !== 'completed') return false;\n      const updatedDate = new Date(p.updatedAt || p.createdAt);\n      const threeDaysAgo = new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000);\n      return updatedDate >= threeDaysAgo;\n    });\n\n    if (recentlyCompleted.length > 0) {\n      notifications.push({\n        id: 'recent-completions',\n        type: 'success',\n        icon: CheckCircle2,\n        title: `🎉 ${recentlyCompleted.length} Project${recentlyCompleted.length > 1 ? 's' : ''} Completed!`,\n        description: `Congratulations on completing: ${recentlyCompleted.map((p: any) => p.name).join(', ')}`,\n        action: 'View Details',\n        color: 'success'\n      });\n    }\n\n    return notifications.filter(n => !dismissedNotifications.includes(n.id));\n  };\n\n  const notifications = generateNotifications();\n\n  const dismissNotification = (id: string) => {\n    setDismissedNotifications(prev => [...prev, id]);\n  };\n\n  const getPriorityNotifications = () => {\n    return notifications.filter(n => n.type === 'urgent').slice(0, 2);\n  };\n\n  const getOtherNotifications = () => {\n    return notifications.filter(n => n.type !== 'urgent').slice(0, 5);\n  };\n\n  if (notifications.length === 0) {\n    return (\n      <Card className=\"bg-gradient-to-br from-emerald-50 to-green-100 border border-emerald-200 shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-3 text-emerald-700 font-semibold\">\n            <div className=\"p-2 bg-emerald-600 rounded-lg\">\n              <Bell className=\"h-4 w-4 text-white\" />\n            </div>\n            Notifications\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center gap-3 text-emerald-600\">\n            <div className=\"p-2 bg-emerald-100 rounded-full\">\n              <CheckCircle2 className=\"h-5 w-5 text-emerald-600\" />\n            </div>\n            <span className=\"text-sm font-medium\">All caught up! No new notifications.</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Priority Notifications */}\n      {getPriorityNotifications().map((notification) => {\n        const Icon = notification.icon;\n        return (\n          <Alert key={notification.id} className=\"border-l-4 border-l-red-500 bg-gradient-to-r from-red-50 to-rose-100 border border-red-200 shadow-lg\">\n            <div className=\"p-2 bg-red-100 rounded-full\">\n              <Icon className=\"h-5 w-5 text-red-600\" />\n            </div>\n            <AlertDescription>\n              <div className=\"flex items-start justify-between\">\n                <div>\n                  <div className=\"font-semibold text-red-800 text-base\">{notification.title}</div>\n                  <div className=\"text-sm text-red-700 mt-2 font-medium\">{notification.description}</div>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"ml-4 border-red-400 text-red-700 hover:bg-red-200 hover:border-red-500 font-medium\"\n                  onClick={() => dismissNotification(notification.id)}\n                >\n                  Dismiss\n                </Button>\n              </div>\n            </AlertDescription>\n          </Alert>\n        );\n      })}\n\n      {/* Regular Notifications */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Bell className=\"h-4 w-4\" />\n              Recent Updates\n            </div>\n            {notifications.length > 0 && (\n              <Badge variant=\"secondary\">{notifications.length}</Badge>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {getOtherNotifications().map((notification) => {\n            const Icon = notification.icon;\n            return (\n              <div key={notification.id} className=\"flex items-start gap-3 p-3 rounded-lg border bg-card hover:bg-accent/50 transition-colors\">\n                <div className={`p-2 rounded-full ${\n                  notification.type === 'warning' ? 'bg-yellow-100 text-yellow-600' :\n                  notification.type === 'success' ? 'bg-green-100 text-green-600' :\n                  'bg-blue-100 text-blue-600'\n                }`}>\n                  <Icon className=\"h-4 w-4\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"font-medium text-sm\">{notification.title}</div>\n                  <div className=\"text-xs text-muted-foreground mt-1\">{notification.description}</div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => dismissNotification(notification.id)}\n                  className=\"text-xs px-2 py-1 h-auto\"\n                >\n                  ×\n                </Button>\n              </div>\n            );\n          })}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11239},"client/src/components/team-messaging.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n{/*import { Input } from \"@/components/ui/input\"; */}\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MessageCircle, Send, Users, Clock } from \"lucide-react\";\n\nexport default function TeamMessaging() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedMember, setSelectedMember] = useState<string>(\"\");\n  const [messageContent, setMessageContent] = useState(\"\");\n\n  const { data: teamMembers = [], isLoading: membersLoading } = useQuery({\n    queryKey: [\"/api/organization/members\"],\n  });\n\n  const { data: messages = [], isLoading: messagesLoading } = useQuery({\n    queryKey: [\"/api/messages\", selectedMember],\n    enabled: !!selectedMember,\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { recipientId: number; content: string }) => {\n      return await apiRequest(\"POST\", \"/api/messages\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message sent\",\n        description: \"Your message has been delivered to the team member.\",\n      });\n      setMessageContent(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\", selectedMember] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!selectedMember || !messageContent.trim()) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please select a team member and enter a message.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    sendMessageMutation.mutate({\n      recipientId: parseInt(selectedMember),\n      content: messageContent.trim(),\n    });\n  };\n\n  const officers = Array.isArray(teamMembers) \n    ? teamMembers.filter((member: any) => member.role === \"officer\")\n    : [];\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"border border-gray-200\">\n        <CardHeader className=\"bg-gray-50 pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-gray-800\">\n            <MessageCircle className=\"h-4 w-4 text-blue-600\" />\n            Send Message to Team Member\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-4 space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Select Team Member\n            </label>\n            <Select value={selectedMember} onValueChange={setSelectedMember}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Choose a team member to message\" />\n              </SelectTrigger>\n              <SelectContent>\n                {officers.map((member: any) => (\n                  <SelectItem key={member.id} value={member.id.toString()}>\n                    <div className=\"flex items-center space-x-2\">\n                      <Users className=\"w-4 h-4 text-gray-400\" />\n                      <span>\n                        {member.firstName && member.lastName \n                          ? `${member.firstName} ${member.lastName}`\n                          : member.email\n                        }\n                      </span>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {member.role}\n                      </Badge>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Message\n            </label>\n            <Textarea\n              placeholder=\"Type your message here...\"\n              value={messageContent}\n              onChange={(e) => setMessageContent(e.target.value)}\n              rows={4}\n              className=\"resize-none\"\n            />\n          </div>\n\n          <Button \n            onClick={handleSendMessage}\n            disabled={sendMessageMutation.isPending || !selectedMember || !messageContent.trim()}\n            className=\"w-full\"\n          >\n            <Send className=\"w-4 h-4 mr-2\" />\n            {sendMessageMutation.isPending ? \"Sending...\" : \"Send Message\"}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {selectedMember && (\n        <Card className=\"border border-gray-200\">\n          <CardHeader className=\"bg-gray-50 pb-3\">\n            <CardTitle className=\"flex items-center gap-2 text-gray-800\">\n              <MessageCircle className=\"h-4 w-4 text-green-600\" />\n              Message History\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-4\">\n            {messagesLoading ? (\n              <div className=\"space-y-3\">\n                {[1, 2, 3].map(i => (\n                  <div key={i} className=\"animate-pulse\">\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : Array.isArray(messages) && messages.length > 0 ? (\n              <div className=\"space-y-4 max-h-64 overflow-y-auto\">\n                {messages.map((message: any) => (\n                  <div \n                    key={message.id} \n                    className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-medium text-blue-800\">\n                        Admin Message\n                      </span>\n                      <div className=\"flex items-center text-xs text-gray-500\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        {new Date(message.createdAt).toLocaleString()}\n                      </div>\n                    </div>\n                    <p className=\"text-gray-700 text-sm\">{message.content}</p>\n                    {!message.isRead && (\n                      <Badge variant=\"secondary\" className=\"mt-2 text-xs\">\n                        Unread\n                      </Badge>\n                    )}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <MessageCircle className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\n                <p>No messages yet</p>\n                <p className=\"text-sm\">Send your first message to this team member</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":7110},"client/src/components/widget-analytics.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  Area,\n  AreaChart\n} from 'recharts';\nimport { \n  TrendingUp, \n  TrendingDown, \n  Target,\n  Calendar,\n  Users,\n  FileText,\n  DollarSign,\n  Clock\n} from \"lucide-react\";\n\ninterface WidgetAnalyticsProps {\n  type: 'project-timeline' | 'budget-trend' | 'team-performance' | 'report-analytics';\n  timeRange: '7d' | '30d' | '90d' | '1y';\n  className?: string;\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D'];\n\nexport default function WidgetAnalytics({ type, timeRange, className = \"\" }: WidgetAnalyticsProps) {\n  const { data: projects } = useQuery({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: reports } = useQuery({\n    queryKey: [\"/api/reports\"],\n  });\n\n  const generateTimelineData = () => {\n    if (!projects) return [];\n    \n    const now = new Date();\n    const daysBack = timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : timeRange === '90d' ? 90 : 365;\n    const data = [];\n    \n    for (let i = daysBack; i >= 0; i--) {\n      const date = new Date(now);\n      date.setDate(date.getDate() - i);\n      \n      const dayProjects = (projects as any[]).filter(project => {\n        const createdDate = new Date(project.createdAt);\n        return createdDate.toDateString() === date.toDateString();\n      });\n      \n      data.push({\n        date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n        projects: dayProjects.length,\n        completed: dayProjects.filter(p => p.status === 'completed').length,\n        active: dayProjects.filter(p => p.status === 'active').length\n      });\n    }\n    \n    return data;\n  };\n\n  const generateBudgetTrendData = () => {\n    if (!projects) return [];\n    \n    return (projects as any[]).map((project, index) => ({\n      name: project.name.substring(0, 10) + (project.name.length > 10 ? '...' : ''),\n      budget: project.budget || 0,\n      spent: project.spentAmount || 0,\n      efficiency: project.budget ? ((project.progress || 0) / ((project.spentAmount || 0) / project.budget * 100)) * 100 : 0\n    }));\n  };\n\n  const generateTeamPerformanceData = () => {\n    if (!reports) return [];\n    \n    const performance = (reports as any[]).reduce((acc, report) => {\n      const submitterId = report.submittedBy;\n      if (!acc[submitterId]) {\n        acc[submitterId] = {\n          submitted: 0,\n          approved: 0,\n          rejected: 0,\n          pending: 0\n        };\n      }\n      acc[submitterId].submitted++;\n      acc[submitterId][report.status]++;\n      return acc;\n    }, {} as Record<string, any>);\n\n    return Object.entries(performance).map(([userId, stats]) => ({\n      user: `User ${userId}`,\n      submitted: stats.submitted,\n      approved: stats.approved,\n      rejected: stats.rejected,\n      pending: stats.pending,\n      approvalRate: stats.submitted > 0 ? (stats.approved / stats.submitted * 100) : 0\n    }));\n  };\n\n  const generateReportAnalyticsData = () => {\n    if (!reports) return [];\n    \n    const statusCounts = (reports as any[]).reduce((acc, report) => {\n      acc[report.status] = (acc[report.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return Object.entries(statusCounts).map(([status, count]) => ({\n      name: status.charAt(0).toUpperCase() + status.slice(1),\n      value: count,\n      percentage: reports ? (count / (reports as any[]).length * 100).toFixed(1) : 0\n    }));\n  };\n\n  const renderWidget = () => {\n    switch (type) {\n      case 'project-timeline':\n        const timelineData = generateTimelineData();\n        return (\n          <Card className={`transition-all duration-200 hover:shadow-md ${className}`}>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center\">\n                <Calendar className=\"w-5 h-5 mr-2 text-blue-600\" />\n                Project Timeline ({timeRange})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart data={timelineData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area type=\"monotone\" dataKey=\"projects\" stackId=\"1\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n                    <Area type=\"monotone\" dataKey=\"completed\" stackId=\"2\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 'budget-trend':\n        const budgetData = generateBudgetTrendData();\n        return (\n          <Card className={`transition-all duration-200 hover:shadow-md ${className}`}>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center\">\n                <DollarSign className=\"w-5 h-5 mr-2 text-green-600\" />\n                Budget Efficiency\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={budgetData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip formatter={(value, name) => [\n                      name === 'efficiency' ? `${value.toFixed(1)}%` : `$${value}`,\n                      name === 'efficiency' ? 'Efficiency' : name === 'budget' ? 'Budget' : 'Spent'\n                    ]} />\n                    <Bar dataKey=\"budget\" fill=\"#8884d8\" name=\"Budget\" />\n                    <Bar dataKey=\"spent\" fill=\"#82ca9d\" name=\"Spent\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 'team-performance':\n        const teamData = generateTeamPerformanceData();\n        return (\n          <Card className={`transition-all duration-200 hover:shadow-md ${className}`}>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center\">\n                <Users className=\"w-5 h-5 mr-2 text-purple-600\" />\n                Team Performance\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={teamData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"user\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"submitted\" fill=\"#8884d8\" name=\"Submitted\" />\n                    <Bar dataKey=\"approved\" fill=\"#82ca9d\" name=\"Approved\" />\n                    <Bar dataKey=\"rejected\" fill=\"#ff8042\" name=\"Rejected\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      case 'report-analytics':\n        const reportData = generateReportAnalyticsData();\n        return (\n          <Card className={`transition-all duration-200 hover:shadow-md ${className}`}>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2 text-indigo-600\" />\n                Report Status Distribution\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 flex items-center\">\n                <div className=\"flex-1\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={reportData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ name, percentage }) => `${name}: ${percentage}%`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                      >\n                        {reportData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n                <div className=\"ml-4 space-y-2\">\n                  {reportData.map((item, index) => (\n                    <div key={item.name} className=\"flex items-center\">\n                      <div \n                        className=\"w-3 h-3 rounded-full mr-2\" \n                        style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                      />\n                      <span className=\"text-sm\">{item.name}: {item.value}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return renderWidget();\n}","size_bytes":9506},"client/src/hooks/use-auth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: number;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  organizationId: number;\n}\n\ninterface AuthResponse {\n  user: User;\n  organization?: {\n    id: number;\n    name: string;\n    code: string;\n  };\n}\n\nexport function useAuth() {\n  const { data, isLoading, error } = useQuery<{ user: User } | null>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    staleTime: 5000, // Cache for 5 seconds to prevent excessive requests\n    refetchOnWindowFocus: true,\n  });\n\n  const user = data?.user || null;\n  \n  console.log(\"useAuth - Raw data:\", data);\n  console.log(\"useAuth - Extracted user:\", user);\n  console.log(\"useAuth - User role:\", user?.role);\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    error,\n  };\n}\n\nexport function useLogin() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n}\n\nexport function useRegister() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n}\n\nexport function useLogout() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/logout\");\n      return response;\n    },\n    onSuccess: () => {\n      // Clear all React Query cache\n      queryClient.clear();\n      \n      // Clear any local storage items if they exist\n      localStorage.removeItem('auth_token');\n      localStorage.removeItem('user_data');\n      \n      // Force a complete page reload to clear all state\n      window.location.replace(\"/\");\n    },\n    onError: (error) => {\n      console.error(\"Logout error:\", error);\n      // Even on error, try to clear local state and redirect\n      queryClient.clear();\n      localStorage.clear();\n      window.location.replace(\"/\");\n    },\n  });\n}\n","size_bytes":2469},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"export function isAuthenticated(): boolean {\n  // This will be handled by the useAuth hook\n  return false;\n}\n\nexport function getStoredAuthToken(): string | null {\n  return localStorage.getItem('authToken');\n}\n\nexport function setStoredAuthToken(token: string): void {\n  localStorage.setItem('authToken', token);\n}\n\nexport function removeStoredAuthToken(): void {\n  localStorage.removeItem('authToken');\n}\n\nexport function redirectToLogin(): void {\n  window.location.href = '/';\n}\n","size_bytes":481},"client/src/lib/i18n.ts":{"content":"export interface Translations {\n  [key: string]: string;\n}\n\nconst translations: Record<string, Translations> = {\n  en: {\n    // Navigation\n    'nav.features': 'Features',\n    'nav.about': 'About',\n    'nav.contact': 'Contact',\n    'nav.signin': 'Sign In',\n    'nav.getstarted': 'Get Started',\n    \n    // Hero section\n    'hero.title': 'Streamline Your NGO Operations',\n    'hero.subtitle': 'Empower your organization with advanced project management, team collaboration, and progress tracking designed specifically for NGOs and non-profit organizations.',\n    'hero.startTrial': 'Start Free Trial',\n    'hero.watchDemo': 'Watch Demo',\n    \n    // Features\n    'features.title': 'Everything Your NGO Needs',\n    'features.subtitle': 'From project planning to progress tracking, ADEL provides all the tools needed for effective NGO management in one integrated platform.',\n    'features.teamManagement': 'Team Management',\n    'features.teamManagementDesc': 'Organize your team with role-based access. Admins manage projects while officers submit reports seamlessly.',\n    'features.progressTracking': 'Progress Tracking',\n    'features.progressTrackingDesc': 'Visualize project progress with interactive charts and reports based on approved submissions.',\n    'features.reportSubmissions': 'Report Submissions',\n    'features.reportSubmissionsDesc': 'Upload progress reports with photos and files. Streamlined approval workflow ensures data quality.',\n    'features.budgetManagement': 'Budget Management',\n    'features.budgetManagementDesc': 'Set project budgets, track expenses, and maintain financial transparency across all initiatives.',\n    'features.mobileOptimized': 'Mobile Optimized',\n    'features.mobileOptimizedDesc': 'Access ADEL from anywhere with mobile-friendly design optimized for low-bandwidth environments.',\n    'features.multilingualSupport': 'Multilingual Support',\n    'features.multilingualSupportDesc': 'Work in English or French with full interface translation and localized content support.',\n    \n    // Workflow\n    'workflow.title': 'Simple Workflow, Powerful Results',\n    'workflow.subtitle': 'Get started in minutes with our streamlined onboarding process',\n    'workflow.step1': 'Register Organization',\n    'workflow.step1Desc': 'Admin creates organization account and receives unique organization code for team members.',\n    'workflow.step2': 'Team Collaboration',\n    'workflow.step2Desc': 'Officers join using organization code. Admin creates projects and officers submit progress reports.',\n    'workflow.step3': 'Track Progress',\n    'workflow.step3Desc': 'Admin approves reports and progress is automatically tracked with visual charts and analytics.',\n    \n    // Auth\n    'auth.welcomeBack': 'Welcome Back',\n    'auth.signInSubtitle': 'Sign in to your ADEL account',\n    'auth.email': 'Email',\n    'auth.password': 'Password',\n    'auth.rememberMe': 'Remember me',\n    'auth.forgotPassword': 'Forgot password?',\n    'auth.signIn': 'Sign In',\n    'auth.dontHaveAccount': \"Don't have an account?\",\n    'auth.signUpHere': 'Sign up here',\n    'auth.getStarted': 'Get Started with ADEL',\n    'auth.chooseType': 'Choose your registration type',\n    'auth.admin': 'Admin',\n    'auth.adminDesc': 'Register organization',\n    'auth.officer': 'Officer',\n    'auth.officerDesc': 'Join organization',\n    'auth.firstName': 'First Name',\n    'auth.lastName': 'Last Name',\n    'auth.organizationName': 'Organization Name',\n    'auth.organizationCode': 'Organization Code',\n    'auth.createOrganization': 'Create Organization',\n    'auth.joinOrganization': 'Join Organization',\n    'auth.alreadyHaveAccount': 'Already have an account?',\n    'auth.signInHere': 'Sign in here',\n    \n    // Organization\n    'organizationInfo': 'Organization Information',\n    'manageYourOrganization': 'Manage your organization details',\n    'invitationCode': 'Invitation Code',\n    'shareThisCodeWithTeam': 'Share this code with your team members to join',\n    'createdDate': 'Created Date',\n    'organizationCodeCopied': 'Organization code copied to clipboard!',\n    'success': 'Success',\n    'error': 'Error',\n    \n    // Dashboard\n    'dashboard.activeProjects': 'Active Projects',\n    'dashboard.pendingReports': 'Pending Reports',\n    'dashboard.teamMembers': 'Team Members',\n    'dashboard.totalBudget': 'Total Budget',\n    'dashboard.recentProjects': 'Recent Projects',\n    'dashboard.pendingApprovals': 'Pending Approvals',\n    'dashboard.approve': 'Approve',\n    'dashboard.reject': 'Reject',\n    'dashboard.myProjects': 'My Projects',\n    'dashboard.reportsSubmitted': 'Reports Submitted',\n    'dashboard.pendingReview': 'Pending Review',\n    'dashboard.quickActions': 'Quick Actions',\n    'dashboard.submitNewReport': 'Submit New Report',\n    'dashboard.viewMyProjects': 'View My Projects',\n    'dashboard.recentSubmissions': 'Recent Submissions',\n    \n    // Footer\n    'footer.description': 'Transform your NGO operations with intuitive project management, seamless team collaboration, and powerful progress tracking designed specifically for non-profit organizations.',\n    'footer.platform': 'Platform',\n    'footer.support': 'Support',\n    'footer.demo': 'Demo',\n    'footer.pricing': 'Pricing',\n    'footer.help': 'Help Center',\n    'footer.documentation': 'Documentation',\n    'footer.training': 'Training',\n    'footer.contact': 'Contact Us',\n    'footer.newsletter.title': 'Stay Updated',\n    'footer.newsletter.subtitle': 'Get the latest updates and NGO management insights delivered to your inbox.',\n    'footer.newsletter.placeholder': 'Enter your email',\n    'footer.newsletter.subscribe': 'Subscribe',\n    'footer.rights': 'All rights reserved.',\n    'footer.privacy': 'Privacy Policy',\n    'footer.terms': 'Terms of Service',\n    'footer.cookies': 'Cookie Policy',\n  },\n  fr: {\n    // Navigation\n    'nav.features': 'Fonctionnalités',\n    'nav.about': 'À propos',\n    'nav.contact': 'Contact',\n    'nav.signin': 'Se connecter',\n    'nav.getstarted': 'Commencer',\n    \n    // Hero section\n    'hero.title': 'Rationalisez vos opérations ONG',\n    'hero.subtitle': 'Renforcez votre organisation avec une gestion de projet avancée, une collaboration d\\'équipe et un suivi des progrès conçus spécifiquement pour les ONG et les organisations à but non lucratif.',\n    'hero.startTrial': 'Essai gratuit',\n    'hero.watchDemo': 'Voir la démo',\n    \n    // Features\n    'features.title': 'Tout ce dont votre ONG a besoin',\n    'features.subtitle': 'De la planification de projet au suivi des progrès, ADEL fournit tous les outils nécessaires pour une gestion efficace des ONG dans une plateforme intégrée.',\n    'features.teamManagement': 'Gestion d\\'équipe',\n    'features.teamManagementDesc': 'Organisez votre équipe avec un accès basé sur les rôles. Les administrateurs gèrent les projets tandis que les agents soumettent des rapports en toute transparence.',\n    'features.progressTracking': 'Suivi des progrès',\n    'features.progressTrackingDesc': 'Visualisez les progrès du projet avec des graphiques interactifs et des rapports basés sur les soumissions approuvées.',\n    'features.reportSubmissions': 'Soumissions de rapports',\n    'features.reportSubmissionsDesc': 'Téléchargez des rapports de progrès avec des photos et des fichiers. Le flux de travail d\\'approbation rationalisé garantit la qualité des données.',\n    'features.budgetManagement': 'Gestion budgétaire',\n    'features.budgetManagementDesc': 'Définissez les budgets de projet, suivez les dépenses et maintenez la transparence financière dans toutes les initiatives.',\n    'features.mobileOptimized': 'Optimisé mobile',\n    'features.mobileOptimizedDesc': 'Accédez à ADEL de n\\'importe où avec une conception adaptée aux mobiles optimisée pour les environnements à faible bande passante.',\n    'features.multilingualSupport': 'Support multilingue',\n    'features.multilingualSupportDesc': 'Travaillez en anglais ou en français avec une traduction complète de l\\'interface et un support de contenu localisé.',\n    \n    // Workflow\n    'workflow.title': 'Flux de travail simple, résultats puissants',\n    'workflow.subtitle': 'Commencez en quelques minutes avec notre processus d\\'intégration rationalisé',\n    'workflow.step1': 'Enregistrer l\\'organisation',\n    'workflow.step1Desc': 'L\\'administrateur crée un compte d\\'organisation et reçoit un code d\\'organisation unique pour les membres de l\\'équipe.',\n    'workflow.step2': 'Collaboration d\\'équipe',\n    'workflow.step2Desc': 'Les agents rejoignent en utilisant le code d\\'organisation. L\\'administrateur crée des projets et les agents soumettent des rapports de progrès.',\n    'workflow.step3': 'Suivre les progrès',\n    'workflow.step3Desc': 'L\\'administrateur approuve les rapports et les progrès sont automatiquement suivis avec des graphiques visuels et des analyses.',\n    \n    // Auth\n    'auth.welcomeBack': 'Bon retour',\n    'auth.signInSubtitle': 'Connectez-vous à votre compte ADEL',\n    'auth.email': 'Email',\n    'auth.password': 'Mot de passe',\n    'auth.rememberMe': 'Se souvenir de moi',\n    'auth.forgotPassword': 'Mot de passe oublié?',\n    'auth.signIn': 'Se connecter',\n    'auth.dontHaveAccount': \"Vous n'avez pas de compte?\",\n    'auth.signUpHere': 'Inscrivez-vous ici',\n    'auth.getStarted': 'Commencer avec ADEL',\n    'auth.chooseType': 'Choisissez votre type d\\'inscription',\n    'auth.admin': 'Administrateur',\n    'auth.adminDesc': 'Enregistrer l\\'organisation',\n    'auth.officer': 'Agent',\n    'auth.officerDesc': 'Rejoindre l\\'organisation',\n    'auth.firstName': 'Prénom',\n    'auth.lastName': 'Nom',\n    'auth.organizationName': 'Nom de l\\'organisation',\n    'auth.organizationCode': 'Code d\\'organisation',\n    'auth.createOrganization': 'Créer une organisation',\n    'auth.joinOrganization': 'Rejoindre l\\'organisation',\n    'auth.alreadyHaveAccount': 'Vous avez déjà un compte?',\n    'auth.signInHere': 'Connectez-vous ici',\n    \n    // Dashboard\n    'dashboard.activeProjects': 'Projets actifs',\n    'dashboard.pendingReports': 'Rapports en attente',\n    'dashboard.teamMembers': 'Membres de l\\'équipe',\n    'dashboard.totalBudget': 'Budget total',\n    'dashboard.recentProjects': 'Projets récents',\n    'dashboard.pendingApprovals': 'Approbations en attente',\n    'dashboard.approve': 'Approuver',\n    'dashboard.reject': 'Rejeter',\n    'dashboard.myProjects': 'Mes projets',\n    'dashboard.reportsSubmitted': 'Rapports soumis',\n    'dashboard.pendingReview': 'En attente d\\'examen',\n    'dashboard.quickActions': 'Actions rapides',\n    'dashboard.submitNewReport': 'Soumettre un nouveau rapport',\n    'dashboard.viewMyProjects': 'Voir mes projets',\n    'dashboard.recentSubmissions': 'Soumissions récentes',\n    \n    // Footer\n    'footer.description': 'Autonomiser les ONG et les organisations à but non lucratif avec des outils modernes de gestion de projet pour maximiser leur impact social.',\n    'footer.platform': 'Plateforme',\n    'footer.support': 'Support',\n    'footer.demo': 'Démo',\n    'footer.pricing': 'Tarifs',\n    'footer.help': 'Centre d\\'aide',\n    'footer.documentation': 'Documentation',\n    'footer.training': 'Formation',\n    'footer.contact': 'Nous contacter',\n    'footer.newsletter.title': 'Restez informé',\n    'footer.newsletter.subtitle': 'Recevez les dernières mises à jour et conseils de gestion d\\'ONG directement dans votre boîte mail.',\n    'footer.newsletter.placeholder': 'Entrez votre email',\n    'footer.newsletter.subscribe': 'S\\'abonner',\n    'footer.rights': 'Tous droits réservés.',\n    'footer.privacy': 'Politique de confidentialité',\n    'footer.terms': 'Conditions d\\'utilisation',\n    'footer.cookies': 'Politique des cookies',\n  },\n};\n\nlet currentLanguage: string = 'en';\n\nexport function setLanguage(lang: string) {\n  if (translations[lang]) {\n    currentLanguage = lang;\n    localStorage.setItem('adelLanguage', lang);\n  }\n}\n\nexport function getCurrentLanguage(): string {\n  return currentLanguage;\n}\n\nexport function t(key: string): string {\n  return translations[currentLanguage]?.[key] || key;\n}\n\nexport function initializeLanguage() {\n  const savedLang = localStorage.getItem('adelLanguage');\n  if (savedLang && translations[savedLang]) {\n    currentLanguage = savedLang;\n  }\n}\n","size_bytes":12305},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const isFormData = data instanceof FormData;\n  \n  const res = await fetch(url, {\n    method,\n    headers: data && !isFormData ? { \"Content-Type\": \"application/json\" } : {},\n    body: isFormData ? data : (data ? JSON.stringify(data) : undefined),\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: true,\n      staleTime: 0, // Always fetch fresh data for authentication\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1501},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useAuth, useLogout } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport AdminDashboard from \"@/components/admin-dashboard-simple\";\nimport OfficerDashboard from \"@/components/officer-dashboard-redesigned\";\nimport LanguageSwitcher from \"@/components/language-switcher\";\nimport { t } from \"@/lib/i18n\";\nimport { LogOut, User } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { user, isLoading } = useAuth();\n  const logoutMutation = useLogout();\n\n  console.log(\"Dashboard - User data:\", user);\n  console.log(\"Dashboard - User role:\", user?.role);\n  console.log(\"Dashboard - Is admin:\", user?.role === \"admin\");\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  // Force proper role detection\n  const isAdmin = user.role === \"admin\";\n  console.log(\"Dashboard - Final isAdmin check:\", isAdmin);\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <div className=\"min-h-screen w-full bg-gray-50\">\n      <main className=\"w-full\">\n        {isAdmin ? <AdminDashboard /> : <OfficerDashboard />}\n      </main>\n    </div>\n  );\n}\n","size_bytes":1499},"client/src/pages/landing-new.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport AuthModals from \"@/components/auth-modals\";\nimport LanguageSwitcher from \"@/components/language-switcher\";\nimport AdelLogo from \"@/components/adel-logo\";\nimport { t, getCurrentLanguage } from \"@/lib/i18n\";\nimport {\n  Users,\n  Target,\n  CheckCircle2,\n  ArrowRight,\n  BarChart3,\n  FileText,\n  Calendar,\n  Brain,\n  Bell,\n  TrendingUp,\n  Shield,\n  Zap,\n  Globe,\n  MessageSquare,\n  PieChart,\n  DollarSign,\n  Clock,\n  Award,\n  Play,\n  X,\n  Send,\n  Star,\n  Mail,\n  User,\n  Building,\n  Phone,\n  Rocket\n} from \"lucide-react\";\n\n// Hook for intersection observer\nfunction useIntersectionObserver(options = {}) {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => {\n      setIsIntersecting(entry.isIntersecting);\n    }, {\n      threshold: 0.1,\n      rootMargin: '50px',\n      ...options\n    });\n\n    const currentRef = ref.current;\n    if (currentRef) {\n      observer.observe(currentRef);\n    }\n\n    return () => {\n      if (currentRef) {\n        observer.unobserve(currentRef);\n      }\n    };\n  }, []);\n\n  return [ref, isIntersecting] as const;\n}\n\nexport default function LandingNew() {\n  const [showAuthModal, setShowAuthModal] = useState<\"login\" | \"register\" | null>(null);\n  const [currentLang, setCurrentLang] = useState(getCurrentLanguage());\n  const [showContactModal, setShowContactModal] = useState(false);\n  const [contactFormData, setContactFormData] = useState({\n    name: '',\n    email: '',\n    organization: '',\n    phone: '',\n    message: ''\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  \n  // Refs for scroll animations\n  const heroResult = useIntersectionObserver();\n  const heroRef = heroResult[0];\n  const heroInView = heroResult[1];\n  \n  const featuresResult = useIntersectionObserver();\n  const featuresRef = featuresResult[0];\n  const featuresInView = featuresResult[1];\n  \n  const analyticsResult = useIntersectionObserver();\n  const analyticsRef = analyticsResult[0];\n  const analyticsInView = analyticsResult[1];\n  \n  const aiResult = useIntersectionObserver();\n  const aiRef = aiResult[0];\n  const aiInView = aiResult[1];\n  \n  const workflowResult = useIntersectionObserver();\n  const workflowRef = workflowResult[0];\n  const workflowInView = workflowResult[1];\n  \n  const ctaResult = useIntersectionObserver();\n  const ctaRef = ctaResult[0];\n  const ctaInView = ctaResult[1];\n\n  useEffect(() => {\n    const handleLanguageChange = () => {\n      setCurrentLang(getCurrentLanguage());\n    };\n    \n    window.addEventListener('languageChanged', handleLanguageChange);\n    return () => window.removeEventListener('languageChanged', handleLanguageChange);\n  }, []);\n\n  const handleContactSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    // Simulate form submission\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    setIsSubmitting(false);\n    setSubmitted(true);\n    \n    setTimeout(() => {\n      setShowContactModal(false);\n      setSubmitted(false);\n      setContactFormData({\n        name: '',\n        email: '',\n        organization: '',\n        phone: '',\n        message: ''\n      });\n    }, 2000);\n  };\n\n  const ContactModal = () => (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white dark:bg-gray-900 rounded-xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">Contact Us</h2>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowContactModal(false)}\n              className=\"h-6 w-6 p-0\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          {submitted ? (\n            <div className=\"text-center py-8\">\n              <CheckCircle2 className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Message Sent!</h3>\n              <p className=\"text-gray-600 dark:text-gray-400\">We'll get back to you within 24 hours.</p>\n            </div>\n          ) : (\n            <form onSubmit={handleContactSubmit} className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Name *\n                </label>\n                <input\n                  type=\"text\"\n                  required\n                  value={contactFormData.name}\n                  onChange={(e) => setContactFormData(prev => ({ ...prev, name: e.target.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Email *\n                </label>\n                <input\n                  type=\"email\"\n                  required\n                  value={contactFormData.email}\n                  onChange={(e) => setContactFormData(prev => ({ ...prev, email: e.target.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Organization\n                </label>\n                <input\n                  type=\"text\"\n                  value={contactFormData.organization}\n                  onChange={(e) => setContactFormData(prev => ({ ...prev, organization: e.target.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Phone\n                </label>\n                <input\n                  type=\"tel\"\n                  value={contactFormData.phone}\n                  onChange={(e) => setContactFormData(prev => ({ ...prev, phone: e.target.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  Message *\n                </label>\n                <textarea\n                  required\n                  rows={4}\n                  value={contactFormData.message}\n                  onChange={(e) => setContactFormData(prev => ({ ...prev, message: e.target.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-white\"\n                  placeholder=\"Tell us about your project needs...\"\n                />\n              </div>\n              \n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\"\n              >\n                {isSubmitting ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                    Sending...\n                  </>\n                ) : (\n                  <>\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    Send Message\n                  </>\n                )}\n              </Button>\n            </form>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-purple-900\">\n      {/* Header */}\n      <header className=\"relative bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700 sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-2\">\n              <AdelLogo size=\"md\" />\n              <div className=\"flex flex-col\">\n                <span className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                  ADEL\n                </span>\n                <span className=\"text-xs text-gray-500 dark:text-gray-400 -mt-1\">\n                  Project Management\n                </span>\n              </div>\n            </div>\n            \n            {/* Navigation Menu - Hidden on mobile */}\n            <nav className=\"hidden md:flex items-center space-x-2\">\n              <button \n                onClick={() => document.getElementById('features')?.scrollIntoView({ behavior: 'smooth' })}\n                className=\"px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-all duration-200 font-medium relative group\"\n              >\n                <span className=\"flex items-center space-x-2\">\n                  <Target className=\"h-4 w-4\" />\n                  <span>Features</span>\n                </span>\n                <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-gradient-to-r from-blue-500 to-purple-500 group-hover:w-full transition-all duration-200\"></div>\n              </button>\n              <button \n                onClick={() => document.getElementById('analytics')?.scrollIntoView({ behavior: 'smooth' })}\n                className=\"px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-all duration-200 font-medium relative group\"\n              >\n                <span className=\"flex items-center space-x-2\">\n                  <BarChart3 className=\"h-4 w-4\" />\n                  <span>Analytics</span>\n                </span>\n                <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-gradient-to-r from-blue-500 to-purple-500 group-hover:w-full transition-all duration-200\"></div>\n              </button>\n              <button \n                onClick={() => document.getElementById('ai-features')?.scrollIntoView({ behavior: 'smooth' })}\n                className=\"px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-all duration-200 font-medium relative group\"\n              >\n                <span className=\"flex items-center space-x-2\">\n                  <Brain className=\"h-4 w-4\" />\n                  <span>AI Features</span>\n                </span>\n                <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-gradient-to-r from-purple-500 to-pink-500 group-hover:w-full transition-all duration-200\"></div>\n              </button>\n              <button \n                onClick={() => setShowContactModal(true)}\n                className=\"px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-all duration-200 font-medium relative group\"\n              >\n                <span className=\"flex items-center space-x-2\">\n                  <DollarSign className=\"h-4 w-4\" />\n                  <span>Pricing</span>\n                </span>\n                <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-gradient-to-r from-green-500 to-blue-500 group-hover:w-full transition-all duration-200\"></div>\n              </button>\n            </nav>\n            \n            <div className=\"flex items-center space-x-4\">\n              <LanguageSwitcher />\n              <Button\n                variant=\"ghost\"\n                onClick={() => setShowAuthModal(\"login\")}\n                className=\"text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 font-medium\"\n              >\n                {t(\"login\")}\n              </Button>\n              <Button\n                onClick={() => setShowAuthModal(\"register\")}\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 font-medium\"\n              >\n                {t(\"Get Started\")}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section\n        ref={heroRef}\n        className={`relative py-20 lg:py-32 overflow-hidden transition-all duration-1000 ${\n          heroInView ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n        }`}\n      >\n        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500/10 via-purple-500/10 to-pink-500/10\" />\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <Badge className=\"mb-6 bg-gradient-to-r from-blue-100 to-purple-100 text-blue-800 dark:from-blue-900 dark:to-purple-900 dark:text-blue-200 border-0\">\n              <Brain className=\"h-4 w-4 mr-2\" />\n              AI-Powered Project Management\n            </Badge>\n            \n            <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-gray-900 dark:text-white mb-6 leading-tight\">\n              Next-Generation\n              <span className=\"block bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent\">\n                Project Management\n              </span>\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-gray-600 dark:text-gray-300 mb-8 max-w-4xl mx-auto leading-relaxed\">\n              Streamline your organization with intelligent analytics, AI-powered insights, \n              and comprehensive project tracking for teams of all sizes and industries.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n              <Button\n                size=\"lg\"\n                onClick={() => setShowAuthModal(\"register\")}\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105\"\n              >\n                <Zap className=\"h-5 w-5 mr-2\" />\n                Start Free Trial\n              </Button>\n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                onClick={() => setShowContactModal(true)}\n                className=\"border-2 border-purple-200 dark:border-purple-700 hover:bg-purple-50 dark:hover:bg-purple-900/20 transition-all duration-300\"\n              >\n                <Play className=\"h-5 w-5 mr-2\" />\n                Watch Demo\n              </Button>\n            </div>\n            \n            {/* Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 max-w-2xl mx-auto\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl md:text-3xl font-bold text-blue-600 dark:text-blue-400\">500+</div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Organizations</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl md:text-3xl font-bold text-purple-600 dark:text-purple-400\">10K+</div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Projects Managed</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl md:text-3xl font-bold text-pink-600 dark:text-pink-400\">99.9%</div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Uptime</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl md:text-3xl font-bold text-green-600 dark:text-green-400\">24/7</div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Support</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Core Features Section */}\n      <section\n        id=\"features\"\n        ref={featuresRef}\n        className={`py-20 bg-white/50 dark:bg-gray-800/50 transition-all duration-1000 delay-200 ${\n          featuresInView ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n        }`}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n              Everything Your Organization Needs\n            </h2>\n            <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n              From project inception to completion, ADEL provides all the tools you need to succeed.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {/* Project Management */}\n            <Card className=\"group hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 border-0 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg p-3 w-fit mb-4 group-hover:scale-110 transition-transform duration-300\">\n                  <Target className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n                  Smart Project Tracking\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n                  Comprehensive project lifecycle management with automated status updates and deadline tracking.\n                </p>\n                <ul className=\"space-y-2 text-sm text-gray-600 dark:text-gray-400\">\n                  <li className=\"flex items-center\"><CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />Budget monitoring</li>\n                  <li className=\"flex items-center\"><CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />Progress tracking</li>\n                  <li className=\"flex items-center\"><CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />Team collaboration</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Team Collaboration */}\n            <Card className=\"group hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 border-0 bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg p-3 w-fit mb-4 group-hover:scale-110 transition-transform duration-300\">\n                  <Users className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n                  Team Collaboration\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n                  Seamless communication tools with file sharing and role-based access control.\n                </p>\n                <ul className=\"space-y-2 text-sm text-gray-600 dark:text-gray-400\">\n                  <li className=\"flex items-center\"><CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />Real-time messaging</li>\n                  <li className=\"flex items-center\"><CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />File attachments</li>\n                  <li className=\"flex items-center\"><CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />Secure communications</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Reporting System */}\n            <Card className=\"group hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 border-0 bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"bg-gradient-to-br from-green-500 to-green-600 rounded-lg p-3 w-fit mb-4 group-hover:scale-110 transition-transform duration-300\">\n                  <FileText className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n                  Advanced Reporting\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n                  Multi-stage approval workflows with comprehensive report management and tracking.\n                </p>\n                <ul className=\"space-y-2 text-sm text-gray-600 dark:text-gray-400\">\n                  <li className=\"flex items-center\"><CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />Interactive PDF preview</li>\n                  <li className=\"flex items-center\"><CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />Professional donor reports</li>\n                  <li className=\"flex items-center\"><CheckCircle2 className=\"h-4 w-4 text-green-500 mr-2\" />Approval workflows</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Analytics & AI Section */}\n      <section\n        id=\"analytics\"\n        ref={analyticsRef}\n        className={`py-20 transition-all duration-1000 delay-300 ${\n          analyticsInView ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n        }`}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <Badge className=\"mb-4 bg-gradient-to-r from-orange-100 to-red-100 text-orange-800 dark:from-orange-900 dark:to-red-900 dark:text-orange-200 border-0\">\n                <BarChart3 className=\"h-4 w-4 mr-2\" />\n                Advanced Analytics\n              </Badge>\n              \n              <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-6\">\n                Data-Driven Decision Making\n              </h2>\n              \n              <p className=\"text-lg text-gray-600 dark:text-gray-300 mb-8\">\n                Transform your organization with powerful analytics and intelligent insights that help you make informed decisions.\n              </p>\n              \n              <div className=\"space-y-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg p-2 flex-shrink-0\">\n                    <PieChart className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 dark:text-white mb-1\">\n                      Interactive Dashboards\n                    </h3>\n                    <p className=\"text-gray-600 dark:text-gray-300\">\n                      Visual charts showing project status, budget utilization, and progress distribution.\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg p-2 flex-shrink-0\">\n                    <TrendingUp className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 dark:text-white mb-1\">\n                      Performance Metrics\n                    </h3>\n                    <p className=\"text-gray-600 dark:text-gray-300\">\n                      Track completion rates, budget efficiency, and team productivity over time.\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"bg-gradient-to-br from-green-500 to-green-600 rounded-lg p-2 flex-shrink-0\">\n                    <DollarSign className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 dark:text-white mb-1\">\n                      Budget Analytics\n                    </h3>\n                    <p className=\"text-gray-600 dark:text-gray-300\">\n                      Comprehensive financial tracking with spending analysis and forecasting.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"relative\">\n              <div className=\"bg-gradient-to-br from-blue-500/10 to-purple-500/10 rounded-2xl p-8\">\n                <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-2xl p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"font-semibold text-gray-900 dark:text-white\">Analytics Overview</h3>\n                    <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">Live</Badge>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                    <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-lg p-4\">\n                      <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">24</div>\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">Active Projects</div>\n                    </div>\n                    <div className=\"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 rounded-lg p-4\">\n                      <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">89%</div>\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">Success Rate</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">Budget Utilization</span>\n                      <span className=\"text-sm font-medium text-gray-900 dark:text-white\">78%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                      <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full\" style={{ width: '78%' }}></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* AI Features Section */}\n      <section\n        id=\"ai-features\"\n        ref={aiRef}\n        className={`py-20 bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 transition-all duration-1000 delay-400 ${\n          aiInView ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n        }`}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <Badge className=\"mb-4 bg-gradient-to-r from-purple-100 to-pink-100 text-purple-800 dark:from-purple-900 dark:to-pink-900 dark:text-purple-200 border-0\">\n              <Brain className=\"h-4 w-4 mr-2\" />\n              AI-Powered Intelligence\n            </Badge>\n            \n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n              Intelligent Automation\n            </h2>\n            <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n              Leverage cutting-edge AI to streamline workflows and gain intelligent insights.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {/* AI Report Review */}\n            <Card className=\"group hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm\">\n              <CardContent className=\"p-8\">\n                <div className=\"bg-gradient-to-br from-purple-500 to-pink-500 rounded-xl p-4 w-fit mb-6 group-hover:scale-110 transition-transform duration-300\">\n                  <Brain className=\"h-8 w-8 text-white\" />\n                </div>\n                \n                <h3 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\n                  AI Feedback on Reports\n                </h3>\n                \n                <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n                  ADEL automatically reviews officer reports and gives clear, actionable suggestions before admin approval.\n                </p>\n                \n                {/* AI Score Example */}\n                <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-lg p-4 mb-6 border border-purple-200 dark:border-purple-700\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">AI Analysis Complete</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">85/100</div>\n                      <Star className=\"h-5 w-5 text-yellow-500 fill-current\" />\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    \"Report quality is good. Consider adding more specific metrics in budget section.\"\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"bg-green-100 dark:bg-green-900/20 rounded-full p-1\">\n                      <CheckCircle2 className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                    </div>\n                    <span className=\"text-gray-700 dark:text-gray-300\">Grammar check</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"bg-green-100 dark:bg-green-900/20 rounded-full p-1\">\n                      <CheckCircle2 className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                    </div>\n                    <span className=\"text-gray-700 dark:text-gray-300\">Clarity score</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"bg-green-100 dark:bg-green-900/20 rounded-full p-1\">\n                      <CheckCircle2 className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                    </div>\n                    <span className=\"text-gray-700 dark:text-gray-300\">Action suggestions</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Smart Notifications */}\n            <Card className=\"group hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm\">\n              <CardContent className=\"p-8\">\n                <div className=\"bg-gradient-to-br from-orange-500 to-red-500 rounded-xl p-4 w-fit mb-6 group-hover:scale-110 transition-transform duration-300\">\n                  <Bell className=\"h-8 w-8 text-white\" />\n                </div>\n                \n                <h3 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-4\">\n                  Smart Notifications\n                </h3>\n                \n                <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n                  Intelligent alerts system that keeps you informed about critical project milestones and deadlines.\n                </p>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"bg-orange-100 dark:bg-orange-900/20 rounded-full p-1\">\n                      <Clock className=\"h-4 w-4 text-orange-600 dark:text-orange-400\" />\n                    </div>\n                    <span className=\"text-gray-700 dark:text-gray-300\">Deadline monitoring</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"bg-orange-100 dark:bg-orange-900/20 rounded-full p-1\">\n                      <DollarSign className=\"h-4 w-4 text-orange-600 dark:text-orange-400\" />\n                    </div>\n                    <span className=\"text-gray-700 dark:text-gray-300\">Budget alerts</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"bg-orange-100 dark:bg-orange-900/20 rounded-full p-1\">\n                      <TrendingUp className=\"h-4 w-4 text-orange-600 dark:text-orange-400\" />\n                    </div>\n                    <span className=\"text-gray-700 dark:text-gray-300\">Performance insights</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Workflow Section */}\n      <section\n        ref={workflowRef}\n        className={`py-20 bg-white/50 dark:bg-gray-800/50 transition-all duration-1000 delay-500 ${\n          workflowInView ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n        }`}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n              Simple Yet Powerful Workflow\n            </h2>\n            <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n              Get started in minutes with our intuitive setup process designed for non-profit organizations.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center group\">\n              <div className=\"bg-gradient-to-br from-blue-500 to-blue-600 rounded-full p-6 w-fit mx-auto mb-6 group-hover:scale-110 transition-transform duration-300 shadow-lg\">\n                <Building className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">1. Create Organization</h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">Set up your NGO profile and get your unique organization code for team members.</p>\n            </div>\n            \n            <div className=\"text-center group\">\n              <div className=\"bg-gradient-to-br from-purple-500 to-purple-600 rounded-full p-6 w-fit mx-auto mb-6 group-hover:scale-110 transition-transform duration-300 shadow-lg\">\n                <Users className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">2. Add Your Team</h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">Invite officers and team members using your organization code for seamless collaboration.</p>\n            </div>\n            \n            <div className=\"text-center group\">\n              <div className=\"bg-gradient-to-br from-green-500 to-green-600 rounded-full p-6 w-fit mx-auto mb-6 group-hover:scale-110 transition-transform duration-300 shadow-lg\">\n                <Rocket className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">3. Launch Projects</h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">Start creating projects, tracking progress, and leveraging AI-powered insights immediately.</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials & Trust Section */}\n      <section className=\"py-20 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n              Trusted by Organizations Worldwide\n            </h2>\n            <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n              Join hundreds of organizations that have transformed their project management with ADEL.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n            {/* Testimonial 1 */}\n            <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-0 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 rounded-full p-2 mr-3\">\n                    <Building className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 dark:text-white\">Global Health Initiative</h4>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-300\">Healthcare NGO</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-600 dark:text-gray-300 italic\">\n                  \"ADEL's AI feedback helped us improve our report quality by 40%. The PDF exports are perfect for our donor presentations.\"\n                </p>\n                <div className=\"flex items-center mt-4 space-x-1\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Testimonial 2 */}\n            <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-0 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"bg-gradient-to-r from-green-500 to-blue-500 rounded-full p-2 mr-3\">\n                    <Globe className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 dark:text-white\">EcoVision Foundation</h4>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-300\">Environmental Organization</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-600 dark:text-gray-300 italic\">\n                  \"The analytics dashboard gives us insights we never had before. Project completion rates increased by 25%.\"\n                </p>\n                <div className=\"flex items-center mt-4 space-x-1\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Testimonial 3 */}\n            <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-0 shadow-lg\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"bg-gradient-to-r from-purple-500 to-pink-500 rounded-full p-2 mr-3\">\n                    <Users className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 dark:text-white\">Community Impact Network</h4>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-300\">Social Enterprise</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-600 dark:text-gray-300 italic\">\n                  \"Smart notifications keep our team aligned. We never miss deadlines anymore and collaboration has improved dramatically.\"\n                </p>\n                <div className=\"flex items-center mt-4 space-x-1\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Interactive Dashboard Preview */}\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n              See What Your Dashboard Could Look Like\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-300 mb-8\">\n              Get a preview of the powerful analytics and insights waiting for you.\n            </p>\n          </div>\n          \n          <Card className=\"bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm border-0 shadow-2xl max-w-4xl mx-auto\">\n            <CardContent className=\"p-6\">\n              <div className=\"bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-800 rounded-lg p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n                  {/* Mock Analytics Cards */}\n                  <div className=\"bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg p-4 text-white\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-blue-100 text-sm\">Active Projects</p>\n                        <p className=\"text-2xl font-bold\">12</p>\n                      </div>\n                      <Target className=\"h-8 w-8 text-blue-200\" />\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-gradient-to-r from-green-500 to-green-600 rounded-lg p-4 text-white\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-green-100 text-sm\">Reports Score</p>\n                        <p className=\"text-2xl font-bold\">87/100</p>\n                      </div>\n                      <BarChart3 className=\"h-8 w-8 text-green-200\" />\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg p-4 text-white\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-purple-100 text-sm\">Budget Used</p>\n                        <p className=\"text-2xl font-bold\">$45,200</p>\n                      </div>\n                      <DollarSign className=\"h-8 w-8 text-purple-200\" />\n                    </div>\n                  </div>\n                </div>\n                \n                {/* PDF Preview Demo Area */}\n                <div className=\"bg-white dark:bg-gray-900 rounded-lg p-4 h-32 flex items-center justify-center border-2 border-dashed border-blue-200 dark:border-blue-800\">\n                  <div className=\"text-center\">\n                    <FileText className=\"h-12 w-12 text-blue-500 mx-auto mb-2\" />\n                    <p className=\"text-blue-600 dark:text-blue-400 text-sm font-medium\">Professional PDF Reports</p>\n                    <p className=\"text-gray-500 dark:text-gray-400 text-xs\">Preview before export to donors</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"text-center mt-6\">\n                <Button \n                  onClick={() => setShowAuthModal(\"register\")}\n                  className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white\"\n                >\n                  <Play className=\"h-4 w-4 mr-2\" />\n                  Try Interactive Demo\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Call to Action */}\n      <section\n        ref={ctaRef}\n        className={`py-20 bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600 text-white transition-all duration-1000 delay-600 ${\n          ctaInView ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n        }`}\n      >\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Ready to Transform Your Organization?\n          </h2>\n          <p className=\"text-xl mb-8 opacity-90\">\n            Join hundreds of organizations already using ADEL to streamline their operations and maximize their impact.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button\n              size=\"lg\"\n              onClick={() => setShowAuthModal(\"register\")}\n              className=\"bg-white text-purple-600 hover:bg-gray-100 shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105\"\n            >\n              <Award className=\"h-5 w-5 mr-2\" />\n              Start Your Free Trial\n            </Button>\n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              onClick={() => setShowContactModal(true)}\n              className=\"border-2 border-white bg-white/10 text-white hover:bg-white hover:text-purple-600 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105\"\n            >\n              <MessageSquare className=\"h-5 w-5 mr-2\" />\n              Contact Sales\n            </Button>\n          </div>\n          \n          <p className=\"mt-6 text-sm opacity-75\">\n            No credit card required • 14-day free trial • Cancel anytime\n          </p>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 dark:bg-gray-950 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <AdelLogo size=\"sm\" className=\"text-white\" />\n                <span className=\"text-lg font-bold\">ADEL</span>\n              </div>\n              <p className=\"text-gray-400 text-sm\">\n                Next-generation project management platform designed for organizations of all types and sizes.\n              </p>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold mb-4\">Features</h3>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li>Project Management</li>\n                <li>AI Report Analysis</li>\n                <li>Smart Analytics</li>\n                <li>Team Collaboration</li>\n                <li>Budget Tracking</li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold mb-4\">Support</h3>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li><button onClick={() => setShowContactModal(true)} className=\"hover:text-white transition-colors\">Documentation</button></li>\n                <li><button onClick={() => setShowContactModal(true)} className=\"hover:text-white transition-colors\">API Reference</button></li>\n                <li><button onClick={() => setShowContactModal(true)} className=\"hover:text-white transition-colors\">Help Center</button></li>\n                <li><button onClick={() => setShowContactModal(true)} className=\"hover:text-white transition-colors\">Contact Support</button></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold mb-4\">Connect</h3>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li><button onClick={() => setShowContactModal(true)} className=\"hover:text-white transition-colors\">Twitter</button></li>\n                <li><button onClick={() => setShowContactModal(true)} className=\"hover:text-white transition-colors\">LinkedIn</button></li>\n                <li><button onClick={() => setShowContactModal(true)} className=\"hover:text-white transition-colors\">GitHub</button></li>\n                <li><button onClick={() => setShowContactModal(true)} className=\"hover:text-white transition-colors\">Blog</button></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-800 mt-8 pt-8 flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-sm text-gray-400\">\n              © 2025 ADEL. All rights reserved.\n            </p>\n            <div className=\"flex space-x-6 mt-4 md:mt-0\">\n              <button onClick={() => setShowContactModal(true)} className=\"text-sm text-gray-400 hover:text-white transition-colors\">Privacy Policy</button>\n              <button onClick={() => setShowContactModal(true)} className=\"text-sm text-gray-400 hover:text-white transition-colors\">Terms of Service</button>\n            </div>\n          </div>\n        </div>\n      </footer>\n\n      {/* Modals */}\n      {showAuthModal && (\n        <AuthModals\n          showModal={showAuthModal}\n          onClose={() => setShowAuthModal(null)}\n        />\n      )}\n      \n      {showContactModal && <ContactModal />}\n    </div>\n  );\n}","size_bytes":50935},"client/src/pages/landing-redesigned.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport AuthModals from \"@/components/auth-modals\";\nimport LanguageSwitcher from \"@/components/language-switcher\";\nimport AdelLogo from \"@/components/adel-logo\";\nimport { t, getCurrentLanguage } from \"@/lib/i18n\";\nimport {\n  Users,\n  Target,\n  CheckCircle2,\n  ArrowRight,\n  BarChart3,\n  FileText,\n  Calendar,\n  Settings,\n  Layers,\n  CalendarDays,\n  Mail,\n  User,\n  Shield,\n  Play,\n  Rocket,\n  X,\n  Send\n} from \"lucide-react\";\n\n// Hook for intersection observer\nfunction useIntersectionObserver(options = {}) {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => {\n      setIsIntersecting(entry.isIntersecting);\n    }, {\n      threshold: 0.1,\n      rootMargin: '50px',\n      ...options\n    });\n\n    const currentRef = ref.current;\n    if (currentRef) {\n      observer.observe(currentRef);\n    }\n\n    return () => {\n      if (currentRef) {\n        observer.unobserve(currentRef);\n      }\n    };\n  }, []);\n\n  return [ref, isIntersecting] as const;\n}\n\nexport default function LandingRedesigned() {\n  const [showAuthModal, setShowAuthModal] = useState<\"login\" | \"register\" | null>(null);\n  const [currentLang, setCurrentLang] = useState(getCurrentLanguage());\n  const [showContactModal, setShowContactModal] = useState(false);\n  const [contactFormData, setContactFormData] = useState({\n    name: '',\n    email: '',\n    organization: '',\n    phone: '',\n    message: ''\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  \n  // Refs for scroll animations\n  const heroResult = useIntersectionObserver();\n  const heroRef = heroResult[0];\n  const heroInView = heroResult[1];\n  \n  const featuresResult = useIntersectionObserver();\n  const featuresRef = featuresResult[0];\n  const featuresInView = featuresResult[1];\n  \n  const workflowResult = useIntersectionObserver();\n  const workflowRef = workflowResult[0];\n  const workflowInView = workflowResult[1];\n  \n  const ctaResult = useIntersectionObserver();\n  const ctaRef = ctaResult[0];\n  const ctaInView = ctaResult[1];\n\n  useEffect(() => {\n    const handleLanguageChange = () => {\n      setCurrentLang(getCurrentLanguage());\n    };\n    \n    window.addEventListener('languageChanged', handleLanguageChange);\n    return () => window.removeEventListener('languageChanged', handleLanguageChange);\n  }, []);\n\n  const handleContactSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    // Simulate form submission\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    setSubmitted(true);\n    setIsSubmitting(false);\n    setContactFormData({ name: '', email: '', organization: '', phone: '', message: '' });\n    \n    // Reset success message and close modal after 2 seconds\n    setTimeout(() => {\n      setSubmitted(false);\n      setShowContactModal(false);\n    }, 2000);\n  };\n\n  const handleContactChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setContactFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Ultra-Compact Mobile Header */}\n      <header className=\"sticky top-0 z-50 bg-white/95 backdrop-blur-xl border-b border-gray-100\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-between px-2 sm:px-6 lg:px-8 xl:px-12 h-10 sm:h-20\">\n            {/* Micro-Compact Mobile Logo */}\n            <div className=\"flex items-center space-x-1 sm:space-x-3\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-sm sm:rounded-xl blur-sm opacity-75\"></div>\n                <div className=\"relative p-0.5 sm:p-2 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-sm sm:rounded-xl shadow-lg\">\n                  <AdelLogo size=\"sm\" className=\"filter brightness-0 invert w-3 h-3 sm:w-6 sm:h-6\" />\n                </div>\n              </div>\n              <span className=\"text-base sm:text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n                ADEL\n              </span>\n            </div>\n\n            {/* Micro-Compact Mobile Menu */}\n            <div className=\"flex items-center lg:hidden\">\n              <Button\n                onClick={() => setShowAuthModal(\"register\")}\n                size=\"sm\"\n                className=\"bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white px-1.5 py-1 text-xs font-semibold rounded-sm\"\n              >\n                Start\n              </Button>\n            </div>\n\n            {/* Desktop Navigation */}\n            <div className=\"hidden lg:flex items-center\">\n              <nav className=\"flex items-center space-x-8 mr-8\">\n                <a href=\"#features\" className=\"text-slate-700 hover:text-blue-600 font-medium transition-colors\">\n                  {t('nav.features')}\n                </a>\n                <a href=\"#how-it-works\" className=\"text-slate-700 hover:text-blue-600 font-medium transition-colors\">\n                  How It Works\n                </a>\n                <a href=\"#pricing\" className=\"text-slate-700 hover:text-blue-600 font-medium transition-colors\">\n                  Pricing\n                </a>\n              </nav>\n\n              <div className=\"mr-6\">\n                <LanguageSwitcher />\n              </div>\n              \n              {/* Desktop Action Buttons */}\n              <div className=\"hidden sm:flex items-center space-x-2 lg:space-x-3\">\n                <Button\n                  onClick={() => setShowContactModal(true)}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"border-2 border-slate-300 text-slate-700 hover:border-blue-400 hover:text-blue-700 hover:bg-blue-50 transition-all duration-300 px-3 lg:px-6 py-2 font-semibold rounded-lg text-xs lg:text-sm\"\n                >\n                  <CalendarDays className=\"w-3 h-3 lg:w-4 lg:h-4 mr-1 lg:mr-2\" />\n                  <span className=\"hidden md:inline\">Book Demo</span>\n                  <span className=\"md:hidden\">Demo</span>\n                </Button>\n                \n                <Button\n                  onClick={() => setShowAuthModal(\"login\")}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"border-2 border-slate-300 text-slate-700 hover:border-blue-400 hover:text-blue-700 hover:bg-blue-50 transition-all duration-300 px-3 lg:px-6 py-2 font-semibold rounded-lg text-xs lg:text-sm\"\n                >\n                  <span className=\"hidden md:inline\">Log In</span>\n                  <span className=\"md:hidden\">Login</span>\n                </Button>\n                \n                <Button\n                  onClick={() => setShowAuthModal(\"register\")}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 px-7 py-2 font-semibold rounded-lg\"\n                >\n                  Get Started\n                </Button>\n              </div>\n            </div>\n\n            {/* Mobile Menu Button */}\n            <div className=\"lg:hidden\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"border-slate-300 text-slate-700 hover:bg-slate-50\"\n              >\n                <Layers className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Ultra-Mobile Hero Section */}\n      <section ref={heroRef} className=\"relative py-8 sm:py-24 lg:py-32 transition-all duration-700 ease-in-out\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500/10 via-indigo-500/10 to-purple-500/10 transition-all duration-700\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 xl:px-12\">\n          <div className={`text-center max-w-5xl mx-auto transition-all duration-1000 ${\n            heroInView ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}>\n            <div className=\"mb-4 sm:mb-8\">\n              <Badge className=\"bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-3 sm:px-6 py-1 sm:py-2 text-xs sm:text-lg font-medium mb-4 sm:mb-8 inline-block\">\n                <span className=\"hidden sm:inline\">NGO Project Management Platform</span>\n                <span className=\"sm:hidden\">Project Management</span>\n              </Badge>\n            </div>\n            \n            <h1 className=\"text-2xl sm:text-4xl md:text-5xl lg:text-7xl font-bold text-gray-900 mb-4 sm:mb-8 leading-relaxed px-1\">\n              The First Project Management Tool with Built-In AI Report Feedback\n            </h1>\n            \n            <p className=\"text-sm sm:text-xl lg:text-2xl text-gray-600 mb-6 sm:mb-12 max-w-3xl mx-auto leading-relaxed px-2\">\n              For teams who care about results, not just checkboxes. No more messy spreadsheets, last-minute donor report panic, or guessing if your project is on track.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row justify-center items-center space-y-3 sm:space-y-0 sm:space-x-6 mb-8 sm:mb-16\">\n              <Button\n                onClick={() => setShowAuthModal(\"register\")}\n                size=\"sm\"\n                className=\"bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300 px-6 sm:px-12 py-2.5 sm:py-4 text-sm sm:text-lg font-semibold rounded-lg sm:rounded-2xl w-full sm:w-auto\"\n              >\n                {t('hero.startTrial')}\n                <ArrowRight className=\"w-4 h-4 sm:w-6 sm:h-6 ml-2 sm:ml-3\" />\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"bg-white/50 border-2 border-blue-200 hover:bg-blue-50 hover:border-blue-300 transition-all duration-300 px-6 sm:px-12 py-2.5 sm:py-4 text-sm sm:text-lg font-semibold rounded-lg sm:rounded-2xl w-full sm:w-auto\"\n              >\n                <Play className=\"w-4 h-4 sm:w-6 sm:h-6 mr-2 sm:mr-3\" />\n                {t('hero.watchDemo')}\n              </Button>\n            </div>\n\n            {/* Ultra-Mobile Hero Stats */}\n            <div className=\"grid grid-cols-3 gap-2 sm:gap-8 max-w-4xl mx-auto px-2\">\n              <div className=\"bg-white/70 backdrop-blur-xl border border-white/30 rounded-lg sm:rounded-2xl p-2 sm:p-6 shadow-xl\">\n                <div className=\"text-lg sm:text-3xl font-bold text-blue-600 mb-0.5 sm:mb-2\">500+</div>\n                <div className=\"text-gray-700 font-medium text-xs sm:text-base\">NGOs Trust Us</div>\n              </div>\n              <div className=\"bg-white/70 backdrop-blur-xl border border-white/30 rounded-lg sm:rounded-2xl p-2 sm:p-6 shadow-xl\">\n                <div className=\"text-lg sm:text-3xl font-bold text-emerald-600 mb-0.5 sm:mb-2\">10K+</div>\n                <div className=\"text-gray-700 font-medium text-xs sm:text-base\">Projects</div>\n              </div>\n              <div className=\"bg-white/70 backdrop-blur-xl border border-white/30 rounded-lg sm:rounded-2xl p-2 sm:p-6 shadow-xl\">\n                <div className=\"text-lg sm:text-3xl font-bold text-purple-600 mb-0.5 sm:mb-2\">99.9%</div>\n                <div className=\"text-gray-700 font-medium text-xs sm:text-base\">Uptime</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Ultra-Mobile Features Section */}\n      <section ref={featuresRef} id=\"features\" className=\"py-8 sm:py-24 lg:py-32 mt-6 sm:mt-16 lg:mt-20 transition-all duration-700 ease-in-out\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 xl:px-12\">\n          <div className={`text-center mb-6 sm:mb-16 transition-all duration-1000 delay-200 ${\n            featuresInView ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}>\n            <h2 className=\"text-2xl sm:text-4xl lg:text-5xl font-bold text-gray-900 mb-3 sm:mb-6 px-1\">\n              💼 All-in-One Platform for Project Success\n            </h2>\n            <p className=\"text-sm sm:text-xl text-gray-600 max-w-3xl mx-auto px-2\">\n              From first milestone to final report, ADEL gives your team everything you need.\n            </p>\n          </div>\n\n          <div className={`grid grid-cols-1 gap-4 sm:gap-8 mb-8 sm:mb-16 transition-all duration-1000 delay-300 ${\n            featuresInView ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}>\n            {/* Smart Project Tracking */}\n            <Card className=\"bg-white border border-gray-200 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n              <CardContent className=\"p-3 sm:p-8\">\n                <div className=\"w-8 h-8 sm:w-16 sm:h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-lg sm:rounded-2xl shadow-lg mx-auto mb-2 sm:mb-6 flex items-center justify-center\">\n                  <Target className=\"w-4 h-4 sm:w-8 sm:h-8 text-white\" />\n                </div>\n                <h3 className=\"text-sm sm:text-2xl font-bold text-gray-900 text-center mb-2 sm:mb-4\">🔄 Smart Project Tracking</h3>\n                <p className=\"text-gray-600 text-center leading-relaxed text-xs sm:text-base mb-3 sm:mb-4\">\n                  Track goals, timelines, and progress with intelligent automation.\n                </p>\n                <ul className=\"text-gray-600 text-xs sm:text-sm space-y-1 sm:space-y-2 text-left\">\n                  <li>• Real-time status updates</li>\n                  <li>• Deadline monitoring</li>\n                  <li>• Budget & milestone tracking</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Seamless Team Collaboration */}\n            <Card className=\"bg-white border border-gray-200 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n              <CardContent className=\"p-3 sm:p-8\">\n                <div className=\"w-8 h-8 sm:w-16 sm:h-16 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-lg sm:rounded-2xl shadow-lg mx-auto mb-2 sm:mb-6 flex items-center justify-center\">\n                  <Users className=\"w-4 h-4 sm:w-8 sm:h-8 text-white\" />\n                </div>\n                <h3 className=\"text-sm sm:text-2xl font-bold text-gray-900 text-center mb-2 sm:mb-4\">🤝 Seamless Team Collaboration</h3>\n                <p className=\"text-gray-600 text-center leading-relaxed text-xs sm:text-base mb-3 sm:mb-4\">\n                  Built-in messaging and secure file sharing.\n                </p>\n                <ul className=\"text-gray-600 text-xs sm:text-sm space-y-1 sm:space-y-2 text-left\">\n                  <li>• Role-based access</li>\n                  <li>• File attachments</li>\n                  <li>• Private & group channels</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Advanced Reporting & Approvals */}\n            <Card className=\"bg-white border border-gray-200 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n              <CardContent className=\"p-3 sm:p-8\">\n                <div className=\"w-8 h-8 sm:w-16 sm:h-16 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-lg sm:rounded-2xl shadow-lg mx-auto mb-2 sm:mb-6 flex items-center justify-center\">\n                  <BarChart3 className=\"w-4 h-4 sm:w-8 sm:h-8 text-white\" />\n                </div>\n                <h3 className=\"text-sm sm:text-2xl font-bold text-gray-900 text-center mb-2 sm:mb-4\">📄 Advanced Reporting & Approvals</h3>\n                <p className=\"text-gray-600 text-center leading-relaxed text-xs sm:text-base mb-3 sm:mb-4\">\n                  Turn project updates into professional reports instantly.\n                </p>\n                <ul className=\"text-gray-600 text-xs sm:text-sm space-y-1 sm:space-y-2 text-left\">\n                  <li>• Donor-ready PDF previews</li>\n                  <li>• Multi-stage approval workflows</li>\n                  <li>• Version tracking</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Why ADEL Over Other Tools Section */}\n      <section className=\"py-8 sm:py-16 lg:py-24 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 xl:px-12\">\n          <div className=\"text-center mb-8 sm:mb-12\">\n            <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 mb-3 sm:mb-6\">\n              ✨ Why ADEL over Other Tools?\n            </h2>\n            <p className=\"text-sm sm:text-lg text-gray-600 max-w-3xl mx-auto\">\n              Unlike generic project management tools, ADEL is specifically designed for NGOs and small organizations\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6\">\n            {/* AI Suggestions */}\n            <div className=\"bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-lg hover:shadow-xl transition-shadow duration-300 border-l-4 border-blue-500\">\n              <div className=\"flex items-center mb-3 sm:mb-4\">\n                <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-blue-500 rounded-lg flex items-center justify-center mr-3\">\n                  <svg className=\"w-4 h-4 sm:w-5 sm:h-5 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\n                  </svg>\n                </div>\n                <span className=\"text-lg sm:text-xl font-bold text-gray-900\">🧠</span>\n              </div>\n              <h3 className=\"text-sm sm:text-lg font-bold text-gray-900 mb-2 sm:mb-3\">No More Report Guesswork</h3>\n              <p className=\"text-xs sm:text-sm text-gray-600 leading-relaxed\">\n                AI instantly reviews your reports for clarity, grammar, and impact - no more wondering if your writing is donor-ready\n              </p>\n            </div>\n\n            {/* PDF Reports */}\n            <div className=\"bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-lg hover:shadow-xl transition-shadow duration-300 border-l-4 border-emerald-500\">\n              <div className=\"flex items-center mb-3 sm:mb-4\">\n                <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-emerald-500 rounded-lg flex items-center justify-center mr-3\">\n                  <FileText className=\"w-4 h-4 sm:w-5 sm:h-5 text-white\" />\n                </div>\n                <span className=\"text-lg sm:text-xl font-bold text-gray-900\">🧾</span>\n              </div>\n              <h3 className=\"text-sm sm:text-lg font-bold text-gray-900 mb-2 sm:mb-3\">No More Last-Minute Report Panic</h3>\n              <p className=\"text-xs sm:text-sm text-gray-600 leading-relaxed\">\n                Professional PDF reports auto-generated from your real data - impress donors and stakeholders every time\n              </p>\n            </div>\n\n            {/* Approval Workflow */}\n            <div className=\"bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-lg hover:shadow-xl transition-shadow duration-300 border-l-4 border-purple-500\">\n              <div className=\"flex items-center mb-3 sm:mb-4\">\n                <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-purple-500 rounded-lg flex items-center justify-center mr-3\">\n                  <CheckCircle2 className=\"w-4 h-4 sm:w-5 sm:h-5 text-white\" />\n                </div>\n                <span className=\"text-lg sm:text-xl font-bold text-gray-900\">✅</span>\n              </div>\n              <h3 className=\"text-sm sm:text-lg font-bold text-gray-900 mb-2 sm:mb-3\">No More Email Approval Chaos</h3>\n              <p className=\"text-xs sm:text-sm text-gray-600 leading-relaxed\">\n                Built-in approval workflows - officers submit, admins review, changes tracked. No more lost emails or confusion\n              </p>\n            </div>\n\n            {/* Simple Focus */}\n            <div className=\"bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-lg hover:shadow-xl transition-shadow duration-300 border-l-4 border-orange-500\">\n              <div className=\"flex items-center mb-3 sm:mb-4\">\n                <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-orange-500 rounded-lg flex items-center justify-center mr-3\">\n                  <Shield className=\"w-4 h-4 sm:w-5 sm:h-5 text-white\" />\n                </div>\n                <span className=\"text-lg sm:text-xl font-bold text-gray-900\">🔒</span>\n              </div>\n              <h3 className=\"text-sm sm:text-lg font-bold text-gray-900 mb-2 sm:mb-3\">No More Feature Overwhelm</h3>\n              <p className=\"text-xs sm:text-sm text-gray-600 leading-relaxed\">\n                Built for NGOs, not Fortune 500s. Simple, focused tools that actually help your mission - no confusing enterprise bloat\n              </p>\n            </div>\n          </div>\n\n          {/* Comparison Note */}\n          <div className=\"mt-8 sm:mt-12 text-center\">\n            <div className=\"bg-white/70 backdrop-blur-xl rounded-xl sm:rounded-2xl p-4 sm:p-6 border border-white/50 shadow-lg\">\n              <p className=\"text-xs sm:text-sm text-gray-600 leading-relaxed\">\n                <span className=\"font-semibold text-gray-900\">Unlike Trello or Monday:</span> ADEL understands NGO workflows with built-in approval processes, \n                AI-powered report analysis, and professional PDF generation - all designed specifically for mission-driven organizations.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Why Teams Choose ADEL Section */}\n      <section className=\"py-8 sm:py-16 lg:py-24 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 xl:px-12\">\n          <div className=\"text-center mb-8 sm:mb-12\">\n            <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 mb-3 sm:mb-6\">\n              Why Teams Choose ADEL\n            </h2>\n            <p className=\"text-sm sm:text-lg text-gray-600 max-w-3xl mx-auto mb-6 sm:mb-8\">\n              Unlike general-purpose tools, ADEL speaks your language — deadlines, approvals, budgets, and impact.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8 sm:mb-12\">\n            {/* Built-in AI feedback */}\n            <div className=\"text-center p-4 sm:p-6 bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl sm:rounded-2xl shadow-lg\">\n              <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-blue-500 rounded-xl mx-auto mb-3 sm:mb-4 flex items-center justify-center\">\n                <span className=\"text-2xl sm:text-3xl\">🧠</span>\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2 text-sm sm:text-base\">Built-in AI feedback on every report</h3>\n              <p className=\"text-xs sm:text-sm text-gray-600\">Instant grammar checks, clarity scores, and improvement suggestions</p>\n            </div>\n\n            {/* Ready-to-send PDF reports */}\n            <div className=\"text-center p-4 sm:p-6 bg-gradient-to-br from-emerald-50 to-emerald-100 rounded-xl sm:rounded-2xl shadow-lg\">\n              <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-emerald-500 rounded-xl mx-auto mb-3 sm:mb-4 flex items-center justify-center\">\n                <span className=\"text-2xl sm:text-3xl\">📝</span>\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2 text-sm sm:text-base\">Ready-to-send PDF donor reports</h3>\n              <p className=\"text-xs sm:text-sm text-gray-600\">Professional reports generated from your real project data</p>\n            </div>\n\n            {/* Simple for new team members */}\n            <div className=\"text-center p-4 sm:p-6 bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl sm:rounded-2xl shadow-lg\">\n              <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-purple-500 rounded-xl mx-auto mb-3 sm:mb-4 flex items-center justify-center\">\n                <span className=\"text-2xl sm:text-3xl\">🔒</span>\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2 text-sm sm:text-base\">Simple enough for new team members</h3>\n              <p className=\"text-xs sm:text-sm text-gray-600\">Intuitive interface that anyone can learn in minutes</p>\n            </div>\n\n            {/* NGO-specific workflows */}\n            <div className=\"text-center p-4 sm:p-6 bg-gradient-to-br from-orange-50 to-orange-100 rounded-xl sm:rounded-2xl shadow-lg\">\n              <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-orange-500 rounded-xl mx-auto mb-3 sm:mb-4 flex items-center justify-center\">\n                <span className=\"text-2xl sm:text-3xl\">🎯</span>\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2 text-sm sm:text-base\">Designed specifically for NGO workflows</h3>\n              <p className=\"text-xs sm:text-sm text-gray-600\">Approval processes, budget tracking, and impact reporting built-in</p>\n            </div>\n          </div>\n\n          {/* Call to Action */}\n          <div className=\"text-center\">\n            <div className=\"bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl sm:rounded-2xl p-6 sm:p-8 text-white\">\n              <h3 className=\"text-xl sm:text-2xl font-bold mb-3 sm:mb-4\">Ready to Transform Your Project Management?</h3>\n              <p className=\"text-sm sm:text-lg opacity-90 mb-4 sm:mb-6\">Join 500+ NGOs who've eliminated spreadsheet chaos and report panic</p>\n              <Button\n                onClick={() => setShowAuthModal(\"register\")}\n                size=\"lg\"\n                className=\"bg-white text-blue-600 hover:bg-gray-50 font-semibold px-6 sm:px-8 py-3 sm:py-4 rounded-lg sm:rounded-xl\"\n              >\n                Start Free Trial\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Visual Testimonials Section */}\n      <section className=\"py-8 sm:py-16 lg:py-24 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 xl:px-12\">\n          <div className=\"text-center mb-8 sm:mb-12\">\n            <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900 mb-3 sm:mb-6\">\n              Trusted by Mission-Driven Organizations\n            </h2>\n            <p className=\"text-sm sm:text-lg text-gray-600 max-w-3xl mx-auto\">\n              See how NGOs and non-profits are streamlining their project management with ADEL\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 sm:gap-8\">\n            {/* Testimonial 1 */}\n            <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center mr-4\">\n                  <span className=\"text-white font-bold text-lg sm:text-xl\">GH</span>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 text-sm sm:text-base\">Global Hope Foundation</h4>\n                  <p className=\"text-xs sm:text-sm text-gray-600\">Education & Healthcare</p>\n                </div>\n              </div>\n              <blockquote className=\"text-xs sm:text-sm text-gray-700 leading-relaxed mb-4\">\n                \"ADEL's AI feedback transformed our reporting process. Our donor reports are now professional and error-free, and the approval workflow eliminated all the back-and-forth emails.\"\n              </blockquote>\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-blue-200 rounded-full flex items-center justify-center mr-3\">\n                  <span className=\"text-blue-700 font-semibold text-xs\">SM</span>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-900 text-xs sm:text-sm\">Sarah Martinez</p>\n                  <p className=\"text-xs text-gray-600\">Program Director</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Testimonial 2 */}\n            <div className=\"bg-gradient-to-br from-emerald-50 to-teal-50 rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-full flex items-center justify-center mr-4\">\n                  <span className=\"text-white font-bold text-lg sm:text-xl\">CC</span>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 text-sm sm:text-base\">Community Care Alliance</h4>\n                  <p className=\"text-xs sm:text-sm text-gray-600\">Social Services</p>\n                </div>\n              </div>\n              <blockquote className=\"text-xs sm:text-sm text-gray-700 leading-relaxed mb-4\">\n                \"Finally, a tool that understands NGO workflows! The PDF export feature saves us hours every month, and the budget tracking keeps our projects on financial track.\"\n              </blockquote>\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-emerald-200 rounded-full flex items-center justify-center mr-3\">\n                  <span className=\"text-emerald-700 font-semibold text-xs\">MJ</span>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-900 text-xs sm:text-sm\">Michael Johnson</p>\n                  <p className=\"text-xs text-gray-600\">Operations Manager</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Testimonial 3 */}\n            <div className=\"bg-gradient-to-br from-purple-50 to-pink-50 rounded-xl sm:rounded-2xl p-4 sm:p-6 shadow-lg hover:shadow-xl transition-all duration-300\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-br from-purple-500 to-pink-600 rounded-full flex items-center justify-center mr-4\">\n                  <span className=\"text-white font-bold text-lg sm:text-xl\">EI</span>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-gray-900 text-sm sm:text-base\">Environmental Impact Network</h4>\n                  <p className=\"text-xs sm:text-sm text-gray-600\">Conservation</p>\n                </div>\n              </div>\n              <blockquote className=\"text-xs sm:text-sm text-gray-700 leading-relaxed mb-4\">\n                \"ADEL replaced our messy spreadsheets and eliminated last-minute report panic. The analytics dashboard gives us insights we never had before about our project performance.\"\n              </blockquote>\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-purple-200 rounded-full flex items-center justify-center mr-3\">\n                  <span className=\"text-purple-700 font-semibold text-xs\">LP</span>\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-900 text-xs sm:text-sm\">Linda Park</p>\n                  <p className=\"text-xs text-gray-600\">Executive Director</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Trust Indicators */}\n          <div className=\"mt-8 sm:mt-12 text-center\">\n            <div className=\"bg-gray-50 rounded-xl sm:rounded-2xl p-4 sm:p-6\">\n              <div className=\"flex flex-wrap justify-center items-center gap-4 sm:gap-8\">\n                <div className=\"flex items-center\">\n                  <CheckCircle2 className=\"w-4 h-4 sm:w-5 sm:h-5 text-green-500 mr-2\" />\n                  <span className=\"text-xs sm:text-sm font-medium text-gray-700\">500+ NGOs Trust ADEL</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle2 className=\"w-4 h-4 sm:w-5 sm:h-5 text-green-500 mr-2\" />\n                  <span className=\"text-xs sm:text-sm font-medium text-gray-700\">10,000+ Projects Managed</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle2 className=\"w-4 h-4 sm:w-5 sm:h-5 text-green-500 mr-2\" />\n                  <span className=\"text-xs sm:text-sm font-medium text-gray-700\">99.9% Uptime Guarantee</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"py-8 sm:py-16 lg:py-24\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 xl:px-12\">\n          {/* Additional Features Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"text-center p-6 bg-blue-50 rounded-2xl\">\n              <div className=\"w-12 h-12 bg-blue-500 rounded-xl mx-auto mb-4 flex items-center justify-center\">\n                <FileText className=\"w-6 h-6 text-white\" />\n              </div>\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Report Generation</h4>\n              <p className=\"text-sm text-gray-600\">Automated progress reports with file attachments</p>\n            </div>\n\n            <div className=\"text-center p-6 bg-emerald-50 rounded-2xl\">\n              <div className=\"w-12 h-12 bg-emerald-500 rounded-xl mx-auto mb-4 flex items-center justify-center\">\n                <Shield className=\"w-6 h-6 text-white\" />\n              </div>\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Role-Based Access</h4>\n              <p className=\"text-sm text-gray-600\">Secure admin and officer permission levels</p>\n            </div>\n\n            <div className=\"text-center p-6 bg-purple-50 rounded-2xl\">\n              <div className=\"w-12 h-12 bg-purple-500 rounded-xl mx-auto mb-4 flex items-center justify-center\">\n                <Calendar className=\"w-6 h-6 text-white\" />\n              </div>\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Deadline Management</h4>\n              <p className=\"text-sm text-gray-600\">Never miss important project milestones</p>\n            </div>\n\n            <div className=\"text-center p-6 bg-orange-50 rounded-2xl\">\n              <div className=\"w-12 h-12 bg-orange-500 rounded-xl mx-auto mb-4 flex items-center justify-center\">\n                <Settings className=\"w-6 h-6 text-white\" />\n              </div>\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Custom Workflows</h4>\n              <p className=\"text-sm text-gray-600\">Adapt the platform to your organization's needs</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works */}\n      <section ref={workflowRef} id=\"how-it-works\" className=\"py-24 lg:py-32 mt-16 lg:mt-20 bg-gradient-to-r from-slate-50 to-blue-50 transition-all duration-700 ease-in-out\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8 xl:px-12\">\n          <div className={`text-center mb-16 transition-all duration-1000 delay-200 ${\n            workflowInView ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}>\n            <h2 className=\"text-4xl lg:text-5xl font-bold text-gray-900 mb-6\">\n              {t('workflow.title')}\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              {t('workflow.subtitle')}\n            </p>\n          </div>\n\n          <div className={`grid grid-cols-1 lg:grid-cols-3 gap-12 transition-all duration-1000 delay-400 ${\n            workflowInView ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'\n          }`}>\n            <div className=\"text-center\">\n              <div className=\"relative mb-8\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-3xl shadow-2xl mx-auto flex items-center justify-center mb-6\">\n                  <User className=\"w-12 h-12 text-white\" />\n                </div>\n                <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-full flex items-center justify-center text-white font-bold\">\n                  1\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">{t('workflow.step1')}</h3>\n              <p className=\"text-gray-600 leading-relaxed\">\n                {t('workflow.step1Desc')}\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"relative mb-8\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-3xl shadow-2xl mx-auto flex items-center justify-center mb-6\">\n                  <Target className=\"w-12 h-12 text-white\" />\n                </div>\n                <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white font-bold\">\n                  2\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">{t('workflow.step2')}</h3>\n              <p className=\"text-gray-600 leading-relaxed\">\n                {t('workflow.step2Desc')}\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"relative mb-8\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-3xl shadow-2xl mx-auto flex items-center justify-center mb-6\">\n                  <CheckCircle2 className=\"w-12 h-12 text-white\" />\n                </div>\n                <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-full flex items-center justify-center text-white font-bold\">\n                  3\n                </div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">{t('workflow.step3')}</h3>\n              <p className=\"text-gray-600 leading-relaxed\">\n                {t('workflow.step3Desc')}\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section ref={ctaRef} className=\"py-16 lg:py-20 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 transition-all duration-700 ease-in-out\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8 xl:px-12\">\n          <div className={`bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 rounded-3xl shadow-2xl p-8 lg:p-12 text-center text-white max-w-5xl mx-auto transition-all duration-1000 ${\n            ctaInView ? 'opacity-100 translate-y-0 scale-100' : 'opacity-0 translate-y-10 scale-95'\n          }`}>\n            <h2 className=\"text-4xl lg:text-5xl font-bold mb-6\">\n              Ready to Transform Your NGO?\n            </h2>\n            <p className=\"text-xl lg:text-2xl text-blue-100 mb-12 max-w-3xl mx-auto\">\n              Join hundreds of organizations already using ADEL to streamline their operations and maximize their impact.\n            </p>\n            <div className=\"flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-6\">\n              <Button\n                onClick={() => setShowAuthModal(\"register\")}\n                size=\"lg\"\n                className=\"bg-white text-blue-600 hover:bg-blue-50 shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300 px-12 py-4 text-lg font-semibold rounded-2xl\"\n              >\n                Get Started Free\n                <Rocket className=\"w-6 h-6 ml-3\" />\n              </Button>\n              <Button\n                onClick={() => setShowContactModal(true)}\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"border-2 border-white/30 text-black hover:bg-white/10 backdrop-blur-sm transition-all duration-300 px-12 py-4 text-lg font-semibold rounded-2xl\"\n              >\n                <CalendarDays className=\"w-6 h-6 mr-3\" />\n                Book a Demo\n              </Button>\n            </div>\n            \n            {/* Secondary Contact Button */}\n            <div className=\"mt-8\">\n              <Button\n                onClick={() => setShowContactModal(true)}\n                variant=\"outline\"\n                size=\"lg\" \n                className=\"bg-transparent border-2 border-white/50 text-black hover:text-white hover:bg-white/20 transition-all duration-300 px-8 py-3 font-semibold rounded-xl\"\n              >\n                <Mail className=\"w-5 h-5 mr-2\" />\n                Contact Us\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Ultra-Mobile Footer */}\n      <footer className=\"bg-slate-900 text-white py-6 sm:py-16 mt-6 lg:mt-12 transition-all duration-700 ease-in-out\">\n        <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 xl:px-12\">\n          <div className=\"grid grid-cols-1 gap-6 sm:gap-12 mb-6 sm:mb-12\">\n            {/* Ultra-Compact Brand Section */}\n            <div className=\"text-center sm:text-left\">\n              <div className=\"flex items-center justify-center sm:justify-start space-x-2 sm:space-x-4 mb-3 sm:mb-6\">\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-md sm:rounded-xl blur-md opacity-75\"></div>\n                  <div className=\"relative p-1.5 sm:p-3 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-md sm:rounded-xl shadow-xl\">\n                    <AdelLogo size=\"sm\" className=\"filter brightness-0 invert w-4 h-4 sm:w-6 sm:h-6\" />\n                  </div>\n                </div>\n                <span className=\"text-xl sm:text-3xl font-bold bg-gradient-to-r from-blue-400 to-indigo-400 bg-clip-text text-transparent\">\n                  ADEL\n                </span>\n              </div>\n              <p className=\"text-gray-400 mb-3 sm:mb-6 leading-relaxed text-xs sm:text-base\">\n                {t('footer.description')}\n              </p>\n              {/* Ultra-Compact Social Media Links */}\n              <div className=\"flex justify-center sm:justify-start gap-2 sm:gap-4\">\n                <a\n                  href=\"https://linkedin.com/company/adel-ngo\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"p-1.5 sm:p-2.5 bg-slate-800 hover:bg-blue-600 rounded-md transition-colors duration-300 group\"\n                >\n                  <svg className=\"w-3 h-3 sm:w-5 sm:h-5 text-gray-400 group-hover:text-white transition-colors\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\n                  </svg>\n                </a>\n                <a\n                  href=\"https://twitter.com/adel_ngo\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"p-1.5 sm:p-2.5 bg-slate-800 hover:bg-blue-400 rounded-md transition-colors duration-300 group\"\n                >\n                  <svg className=\"w-3 h-3 sm:w-5 sm:h-5 text-gray-400 group-hover:text-white transition-colors\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\"/>\n                  </svg>\n                </a>\n                <a\n                  href=\"https://github.com/adel-ngo\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"p-1.5 sm:p-2.5 bg-slate-800 hover:bg-gray-600 rounded-md transition-colors duration-300 group\"\n                >\n                  <svg className=\"w-3 h-3 sm:w-5 sm:h-5 text-gray-400 group-hover:text-white transition-colors\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/>\n                  </svg>\n                </a>\n                <a\n                  href=\"mailto:sissokoadel057@gmail.com?subject=ADEL Inquiry\"\n                  className=\"p-1.5 sm:p-2.5 bg-slate-800 hover:bg-green-600 rounded-md transition-colors duration-300 group\"\n                >\n                  <Mail className=\"w-3 h-3 sm:w-5 sm:h-5 text-gray-400 group-hover:text-white transition-colors\" />\n                </a>\n              </div>\n            </div>\n\n            {/* Ultra-Compact Quick Links */}\n            <div className=\"text-center sm:text-left\">\n              <h3 className=\"text-sm sm:text-lg font-semibold mb-2 sm:mb-6 text-white\">\n                Quick Links\n              </h3>\n              <div className=\"flex justify-center sm:justify-start flex-wrap gap-3 sm:gap-0 sm:block sm:space-y-2\">\n                <a href=\"#features\" className=\"text-gray-400 hover:text-blue-400 transition-colors duration-300 text-xs sm:text-base\">\n                  {t('nav.features')}\n                </a>\n                <span className=\"text-gray-600 sm:hidden\">•</span>\n                <a href=\"#how-it-works\" className=\"text-gray-400 hover:text-blue-400 transition-colors duration-300 text-xs sm:text-base\">\n                  How It Works\n                </a>\n                <span className=\"text-gray-600 sm:hidden\">•</span>\n                <a \n                  href=\"mailto:sissokoadel057@gmail.com?subject=ADEL Demo Request\"\n                  className=\"text-gray-400 hover:text-blue-400 transition-colors duration-300 text-xs sm:text-base\"\n                >\n                  Request Demo\n                </a>\n              </div>\n            </div>\n\n            {/* Ultra-Compact Contact */}\n            <div className=\"text-center sm:text-left\">\n              <h3 className=\"text-sm sm:text-lg font-semibold mb-2 sm:mb-6 text-white\">\n                Contact\n              </h3>\n              <div className=\"flex justify-center sm:justify-start flex-wrap gap-2 sm:gap-0 sm:block sm:space-y-2\">\n                <button \n                  onClick={() => setShowContactModal(true)}\n                  className=\"text-gray-400 hover:text-blue-400 transition-colors duration-300 text-xs sm:text-base flex items-center\"\n                >\n                  <Mail className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 text-blue-400\" />\n                  Support\n                </button>\n                <span className=\"text-gray-600 sm:hidden\">•</span>\n                <button \n                  onClick={() => setShowContactModal(true)}\n                  className=\"text-gray-400 hover:text-blue-400 transition-colors duration-300 text-xs sm:text-base flex items-center\"\n                >\n                  <CalendarDays className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 text-blue-400\" />\n                  Meeting\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Ultra-Compact Bottom Footer */}\n          <div className=\"border-t border-slate-800 pt-3 sm:pt-8\">\n            <div className=\"text-center space-y-2 sm:space-y-0 sm:flex sm:justify-between sm:items-center\">\n              <div className=\"text-gray-500 text-xs order-1\">\n                © 2025 ADEL. All rights reserved.\n              </div>\n              <div className=\"text-gray-500 text-xs order-2\">\n                Blueray Inc.\n              </div>\n              <div className=\"flex justify-center gap-3 sm:gap-6 text-xs order-3\">\n                <a \n                  href=\"/privacy-policy\"\n                  className=\"text-gray-500 hover:text-blue-400 transition-colors duration-300\"\n                >\n                  Privacy\n                </a>\n                <a \n                  href=\"/terms-of-service\"\n                  className=\"text-gray-500 hover:text-blue-400 transition-colors duration-300\"\n                >\n                  Terms\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n\n      {/* Auth Modals */}\n      <AuthModals showModal={showAuthModal} onClose={() => setShowAuthModal(null)} />\n\n      {/* Contact Modal */}\n      {showContactModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-2xl font-bold text-gray-900\">Contact Us</h3>\n                <button\n                  onClick={() => setShowContactModal(false)}\n                  className=\"p-2 hover:bg-gray-100 rounded-full transition-colors duration-200\"\n                >\n                  <X className=\"w-5 h-5 text-gray-500\" />\n                </button>\n              </div>\n\n              {submitted ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Send className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <h4 className=\"text-xl font-semibold text-green-800 mb-2\">Message Sent!</h4>\n                  <p className=\"text-green-600\">Thank you for contacting us. We'll get back to you within 24 hours.</p>\n                </div>\n              ) : (\n                <form onSubmit={handleContactSubmit} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label htmlFor=\"modal-name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Full Name *\n                      </label>\n                      <input\n                        type=\"text\"\n                        id=\"modal-name\"\n                        name=\"name\"\n                        required\n                        value={contactFormData.name}\n                        onChange={handleContactChange}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                        placeholder=\"Your name\"\n                      />\n                    </div>\n                    <div>\n                      <label htmlFor=\"modal-email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        Email *\n                      </label>\n                      <input\n                        type=\"email\"\n                        id=\"modal-email\"\n                        name=\"email\"\n                        required\n                        value={contactFormData.email}\n                        onChange={handleContactChange}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                        placeholder=\"your@email.com\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <label htmlFor=\"modal-organization\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Organization\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"modal-organization\"\n                      name=\"organization\"\n                      value={contactFormData.organization}\n                      onChange={handleContactChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                      placeholder=\"Your NGO name\"\n                    />\n                  </div>\n                  <div>\n                    <label htmlFor=\"modal-phone\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Phone Number\n                    </label>\n                    <input\n                      type=\"tel\"\n                      id=\"modal-phone\"\n                      name=\"phone\"\n                      value={contactFormData.phone}\n                      onChange={handleContactChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                      placeholder=\"+1 (555) 123-4567\"\n                    />\n                  </div>\n                  <div>\n                    <label htmlFor=\"modal-message\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Message *\n                    </label>\n                    <textarea\n                      id=\"modal-message\"\n                      name=\"message\"\n                      required\n                      rows={4}\n                      value={contactFormData.message}\n                      onChange={handleContactChange}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                      placeholder=\"Tell us about your organization and how we can help...\"\n                    />\n                  </div>\n                  <button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className=\"w-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white py-3 px-4 rounded-lg font-medium hover:from-blue-600 hover:to-indigo-700 focus:ring-4 focus:ring-blue-200 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\n                  >\n                    {isSubmitting ? (\n                      <>\n                        <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                        <span>Sending...</span>\n                      </>\n                    ) : (\n                      <>\n                        <Send className=\"w-4 h-4\" />\n                        <span>Send Message</span>\n                      </>\n                    )}\n                  </button>\n                </form>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":56548},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport AuthModals from \"@/components/auth-modals\";\nimport LanguageSwitcher from \"@/components/language-switcher\";\nimport AdelLogo from \"@/components/adel-logo\";\nimport {\n  Users,\n  TrendingUp,\n  Upload,\n  Wallet,\n  Smartphone,\n  Globe,\n  Rocket,\n  Play,\n  Crown,\n  User,\n  Shield,\n  Zap,\n  Target,\n} from \"lucide-react\";\n\nexport default function Landing() {\n  const [showAuthModal, setShowAuthModal] = useState<\"login\" | \"register\" | null>(null);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      {/* Navigation Header */}\n      <header className=\"bg-white/80 backdrop-blur-md shadow-sm sticky top-0 z-50 border-b border-blue-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-3\">\n                <AdelLogo size=\"md\" />\n                <span className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent\">ADEL</span>\n              </div>\n            </div>\n            <nav className=\"hidden md:flex space-x-8\">\n              <a href=\"#features\" className=\"text-gray-600 hover:text-blue-600 transition-colors font-medium\">\n                Features\n              </a>\n              <a href=\"#workflow\" className=\"text-gray-600 hover:text-blue-600 transition-colors font-medium\">\n                How it Works\n              </a>\n              <a href=\"#about\" className=\"text-gray-600 hover:text-blue-600 transition-colors font-medium\">\n                About\n              </a>\n            </nav>\n            <div className=\"flex items-center space-x-4\">\n              <LanguageSwitcher />\n              <Button\n                variant=\"ghost\"\n                className=\"text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n                onClick={() => setShowAuthModal(\"login\")}\n              >\n                Sign In\n              </Button>\n              <Button\n                className=\"bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white shadow-lg shadow-blue-200\"\n                onClick={() => setShowAuthModal(\"register\")}\n              >\n                Get Started\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative py-20 lg:py-32 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-600/5 via-indigo-600/5 to-purple-600/5\"></div>\n        <div className=\"absolute top-0 left-0 w-full h-full bg-[radial-gradient(ellipse_at_top_right,_var(--tw-gradient-stops))] from-blue-100/20 via-transparent to-transparent\"></div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <div className=\"flex items-center justify-center mb-8\">\n              <AdelLogo size=\"xl\" className=\"mr-6\" />\n              <h1 className=\"text-5xl lg:text-7xl font-bold\">\n                <span className=\"bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent\">NGO</span>\n                <br />\n                <span className=\"bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent\">Management</span>\n              </h1>\n            </div>\n            <p className=\"text-xl lg:text-2xl text-gray-600 mb-12 max-w-3xl mx-auto leading-relaxed\">\n              Streamline your NGO operations with powerful project management, team collaboration, and progress tracking tools.\n            </p>\n          </div>\n          \n          {/* Role Selection Cards */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-2 gap-8 max-w-4xl mx-auto mb-16\">\n            <Card className=\"relative overflow-hidden bg-white border-2 border-blue-200 hover:border-blue-400 transition-all duration-300 hover:shadow-xl group\">\n              <div className=\"absolute inset-0 bg-gradient-to-br from-blue-50 to-blue-100 opacity-0 group-hover:opacity-100 transition-opacity\"></div>\n              <CardContent className=\"relative p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\">\n                  <Crown className=\"w-8 h-8 text-white\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Administrator</h3>\n                <p className=\"text-gray-600 mb-6\">Create your NGO organization and manage projects, teams, and reports</p>\n                <Button\n                  size=\"lg\"\n                  className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white shadow-lg\"\n                  onClick={() => setShowAuthModal(\"register\")}\n                >\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  Create Organization\n                </Button>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"relative overflow-hidden bg-white border-2 border-green-200 hover:border-green-400 transition-all duration-300 hover:shadow-xl group\">\n              <div className=\"absolute inset-0 bg-gradient-to-br from-green-50 to-green-100 opacity-0 group-hover:opacity-100 transition-opacity\"></div>\n              <CardContent className=\"relative p-8 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-green-500 to-green-600 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\">\n                  <Users className=\"w-8 h-8 text-white\" />\n                </div>\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Officer</h3>\n                <p className=\"text-gray-600 mb-6\">Join your team, contribute to projects, and submit progress reports</p>\n                <Button\n                  size=\"lg\"\n                  className=\"w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white shadow-lg\"\n                  onClick={() => setShowAuthModal(\"register\")}\n                >\n                  <Target className=\"w-4 h-4 mr-2\" />\n                  Join Organization\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n          \n          <div className=\"text-center\">\n            <p className=\"text-gray-600 mb-6 text-lg\">Already have an account?</p>\n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              className=\"border-2 border-gray-300 text-gray-700 hover:border-blue-500 hover:text-blue-600 px-8 py-3 text-lg\"\n              onClick={() => setShowAuthModal(\"login\")}\n            >\n              <User className=\"w-5 h-5 mr-2\" />\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 lg:py-32 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl lg:text-5xl font-bold text-gray-900 mb-6\">\n              Powerful Features for NGOs\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Everything you need to manage your organization efficiently and track your impact effectively\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"group hover:shadow-xl transition-all duration-300 border-0 bg-gradient-to-br from-white to-gray-50\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform\">\n                  <Users className=\"w-8 h-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Team Management</h3>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  Organize your team with role-based access control and streamlined collaboration tools\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"group hover:shadow-xl transition-all duration-300 border-0 bg-gradient-to-br from-white to-gray-50\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-green-500 to-green-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform\">\n                  <TrendingUp className=\"w-8 h-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Progress Tracking</h3>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  Monitor project progress with visual dashboards and detailed analytics\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"group hover:shadow-xl transition-all duration-300 border-0 bg-gradient-to-br from-white to-gray-50\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-orange-500 to-orange-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform\">\n                  <Upload className=\"w-8 h-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Report Submissions</h3>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  Submit and approve reports with file attachments and automated workflows\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"group hover:shadow-xl transition-all duration-300 border-0 bg-gradient-to-br from-white to-gray-50\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-purple-500 to-purple-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform\">\n                  <Wallet className=\"w-8 h-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Budget Management</h3>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  Track project budgets and financial resources with detailed reporting\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"group hover:shadow-xl transition-all duration-300 border-0 bg-gradient-to-br from-white to-gray-50\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-cyan-500 to-cyan-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform\">\n                  <Zap className=\"w-8 h-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Real-time Updates</h3>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  Stay informed with instant notifications and real-time project updates\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"group hover:shadow-xl transition-all duration-300 border-0 bg-gradient-to-br from-white to-gray-50\">\n              <CardContent className=\"p-8\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-indigo-500 to-indigo-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform\">\n                  <Globe className=\"w-8 h-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Global Access</h3>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  Access your data from anywhere with cloud-based infrastructure and mobile support\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Workflow Section */}\n      <section id=\"workflow\" className=\"py-20 lg:py-32 bg-gradient-to-br from-gray-50 to-blue-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl lg:text-5xl font-bold text-gray-900 mb-6\">\n              How ADEL Works\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Simple steps to transform your NGO management\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-12\">\n            <div className=\"text-center group\">\n              <div className=\"relative\">\n                <div className=\"w-24 h-24 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full flex items-center justify-center mx-auto mb-8 group-hover:scale-110 transition-transform shadow-xl\">\n                  <span className=\"text-white font-bold text-2xl\">1</span>\n                </div>\n                <div className=\"hidden lg:block absolute top-12 left-full w-full h-0.5 bg-gradient-to-r from-blue-200 to-transparent\"></div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-6\">Setup Organization</h3>\n              <p className=\"text-gray-600 mb-8 text-lg\">\n                Create your NGO profile and get a unique organization code to share with your team\n              </p>\n              <Card className=\"bg-white shadow-lg border-2 border-blue-100\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-sm text-gray-500 mb-2\">Organization Code</div>\n                  <div className=\"font-mono font-bold text-blue-600 text-xl\">#NGO-7492</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"text-center group\">\n              <div className=\"relative\">\n                <div className=\"w-24 h-24 bg-gradient-to-r from-green-500 to-green-600 rounded-full flex items-center justify-center mx-auto mb-8 group-hover:scale-110 transition-transform shadow-xl\">\n                  <span className=\"text-white font-bold text-2xl\">2</span>\n                </div>\n                <div className=\"hidden lg:block absolute top-12 left-full w-full h-0.5 bg-gradient-to-r from-green-200 to-transparent\"></div>\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-6\">Manage Projects</h3>\n              <p className=\"text-gray-600 mb-8 text-lg\">\n                Create projects, assign teams, track progress, and manage budgets all in one place\n              </p>\n              <Card className=\"bg-white shadow-lg border-2 border-green-100\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <span className=\"text-sm font-medium text-gray-700\">Clean Water Project</span>\n                    <Badge className=\"bg-green-100 text-green-700\">Active</Badge>\n                  </div>\n                  <Progress value={68} className=\"h-3\" />\n                  <div className=\"text-xs text-gray-500 mt-2\">68% Complete</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"text-center group\">\n              <div className=\"w-24 h-24 bg-gradient-to-r from-orange-500 to-orange-600 rounded-full flex items-center justify-center mx-auto mb-8 group-hover:scale-110 transition-transform shadow-xl\">\n                <span className=\"text-white font-bold text-2xl\">3</span>\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-6\">Track Impact</h3>\n              <p className=\"text-gray-600 mb-8 text-lg\">\n                Review reports, approve submissions, and analyze your organization's impact with detailed insights\n              </p>\n              <Card className=\"bg-white shadow-lg border-2 border-orange-100\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex justify-between items-center mb-3\">\n                    <span className=\"text-sm font-medium text-gray-700\">Monthly Report</span>\n                    <Badge className=\"bg-orange-100 text-orange-700\">Pending Review</Badge>\n                  </div>\n                  <div className=\"text-xs text-gray-500\">Submitted by field team</div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 lg:py-32 bg-gradient-to-r from-blue-600 to-blue-800\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <AdelLogo size=\"lg\" className=\"mx-auto mb-8\" />\n          <h2 className=\"text-4xl lg:text-5xl font-bold text-white mb-6\">\n            Ready to Transform Your NGO?\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-12 max-w-2xl mx-auto\">\n            Join thousands of organizations already using ADEL to streamline their operations and maximize their impact.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button\n              size=\"lg\"\n              className=\"bg-white text-blue-600 hover:bg-gray-100 px-8 py-4 text-lg font-semibold\"\n              onClick={() => setShowAuthModal(\"register\")}\n            >\n              <Rocket className=\"w-5 h-5 mr-2\" />\n              Get Started Free\n            </Button>\n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              className=\"border-2 border-white text-white hover:bg-white hover:text-blue-600 px-8 py-4 text-lg font-semibold\"\n              onClick={() => setShowAuthModal(\"login\")}\n            >\n              <Play className=\"w-5 h-5 mr-2\" />\n              Watch Demo\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <AdelLogo size=\"md\" className=\"mr-3\" />\n            <span className=\"text-xl font-bold\">ADEL</span>\n          </div>\n          <p className=\"text-gray-400 mb-4\">\n            Empowering NGOs worldwide with efficient management tools\n          </p>\n          <p className=\"text-gray-500 text-sm\">\n            © 2025 ADEL. All rights reserved.\n          </p>\n        </div>\n      </footer>\n\n      <AuthModals \n        showModal={showAuthModal} \n        onClose={() => setShowAuthModal(null)} \n      />\n    </div>\n  );\n}","size_bytes":19026},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/owner-bookings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  CalendarDays,\n  Search,\n  Download,\n  Mail,\n  Phone,\n  Building2,\n  Users,\n  Clock,\n  MessageSquare,\n  TrendingUp,\n  DollarSign,\n  Target\n} from \"lucide-react\";\nimport MeetingBookingsManager from \"@/components/meeting-bookings-manager\";\nimport AdelLogo from \"@/components/adel-logo\";\n\nexport default function OwnerBookings() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: bookings = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/meeting-bookings'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/meeting-bookings');\n      if (!response.ok) throw new Error('Failed to fetch bookings');\n      return response.json();\n    }\n  });\n\n  const filteredBookings = bookings.filter((booking: any) =>\n    booking.company.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    booking.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    booking.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    booking.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const stats = {\n    total: bookings.length,\n    pending: bookings.filter((b: any) => b.status === 'pending').length,\n    scheduled: bookings.filter((b: any) => b.status === 'scheduled').length,\n    completed: bookings.filter((b: any) => b.status === 'completed').length,\n    conversionRate: bookings.length > 0 ? ((bookings.filter((b: any) => b.status === 'completed').length / bookings.length) * 100).toFixed(1) : '0'\n  };\n\n  const exportBookings = () => {\n    const csvContent = [\n      ['Date', 'Name', 'Email', 'Company', 'Type', 'Team Size', 'Purpose', 'Status', 'Request ID'].join(','),\n      ...filteredBookings.map((booking: any) => [\n        new Date(booking.createdAt).toLocaleDateString(),\n        `${booking.firstName} ${booking.lastName}`,\n        booking.email,\n        booking.company,\n        booking.organizationType || '',\n        booking.teamSize || '',\n        booking.meetingPurpose || '',\n        booking.status,\n        booking.requestId\n      ].map(field => `\"${field}\"`).join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `adel-demo-requests-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-16 w-16 border-4 border-blue-500 border-t-transparent mx-auto\"></div>\n          <p className=\"text-slate-600 font-medium\">Loading your booking requests...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n      <div className=\"max-w-7xl mx-auto px-6 py-6 space-y-6\">\n        {/* Header */}\n        <div className=\"bg-white border border-gray-200 rounded-lg shadow-sm p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-blue-600 p-2 rounded-lg\">\n                <AdelLogo size=\"sm\" className=\"filter brightness-0 invert\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">ADEL Platform Owner Dashboard</h1>\n                <p className=\"text-gray-600\">Manage your demo requests and prospect pipeline</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={exportBookings}\n                className=\"flex items-center space-x-2\"\n              >\n                <Download className=\"w-4 h-4\" />\n                <span>Export CSV</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <Card className=\"bg-gradient-to-br from-blue-500 to-blue-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-blue-100 text-sm font-medium\">Total Requests</p>\n                  <p className=\"text-3xl font-bold\">{stats.total}</p>\n                </div>\n                <Target className=\"w-8 h-8 text-blue-200\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-orange-500 to-orange-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-orange-100 text-sm font-medium\">Pending</p>\n                  <p className=\"text-3xl font-bold\">{stats.pending}</p>\n                </div>\n                <Clock className=\"w-8 h-8 text-orange-200\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-green-500 to-green-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-green-100 text-sm font-medium\">Scheduled</p>\n                  <p className=\"text-3xl font-bold\">{stats.scheduled}</p>\n                </div>\n                <CalendarDays className=\"w-8 h-8 text-green-200\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-emerald-500 to-emerald-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-emerald-100 text-sm font-medium\">Completed</p>\n                  <p className=\"text-3xl font-bold\">{stats.completed}</p>\n                </div>\n                <TrendingUp className=\"w-8 h-8 text-emerald-200\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-purple-500 to-purple-600 text-white\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-purple-100 text-sm font-medium\">Conversion</p>\n                  <p className=\"text-3xl font-bold\">{stats.conversionRate}%</p>\n                </div>\n                <DollarSign className=\"w-8 h-8 text-purple-200\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search by company, name, or email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Meeting Bookings Manager */}\n        <MeetingBookingsManager />\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions & Tips</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold text-gray-900\">Best Practices</h4>\n                <ul className=\"space-y-2 text-sm text-gray-600\">\n                  <li>• Respond to new requests within 24 hours</li>\n                  <li>• Prepare customized demos based on organization type</li>\n                  <li>• Follow up with next steps after each demo</li>\n                  <li>• Track conversion metrics to improve your process</li>\n                </ul>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold text-gray-900\">Email Setup</h4>\n                <p className=\"text-sm text-gray-600\">\n                  To receive automatic email notifications for new booking requests, \n                  configure your SENDGRID_API_KEY and OWNER_EMAIL environment variables.\n                </p>\n                <div className=\"bg-blue-50 p-3 rounded-lg\">\n                  <p className=\"text-xs text-blue-800 font-mono\">\n                    OWNER_EMAIL=your@email.com<br/>\n                    SENDGRID_API_KEY=your_sendgrid_key\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9543},"client/src/pages/privacy-policy.tsx":{"content":"import AdelLogo from \"@/components/adel-logo\";\nimport { Shield, Lock, Eye, Database, UserCheck, Mail, ChevronRight, Sparkles, Send } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function PrivacyPolicy() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    organization: '',\n    message: ''\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    // Simulate form submission\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    setSubmitted(true);\n    setIsSubmitting(false);\n    setFormData({ name: '', email: '', organization: '', message: '' });\n    \n    // Reset success message after 3 seconds\n    setTimeout(() => setSubmitted(false), 3000);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50\">\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-lg shadow-sm sticky top-0 z-50 border-b border-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4 group\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl blur-md opacity-75\"></div>\n                <div className=\"relative p-3 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl shadow-xl\">\n                  <AdelLogo size=\"sm\" className=\"filter brightness-0 invert\" />\n                </div>\n              </div>\n              <span className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n                ADEL\n              </span>\n            </div>\n            <a\n              href=\"/\"\n              className=\"group flex items-center space-x-2 px-4 py-2 text-gray-600 hover:text-white hover:bg-gradient-to-r hover:from-blue-500 hover:to-indigo-600 rounded-lg transition-all duration-300 font-medium\"\n            >\n              <span>Back to Home</span>\n              <ChevronRight className=\"w-4 h-4 group-hover:translate-x-1 transition-transform duration-300\" />\n            </a>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <div className=\"relative py-16 lg:py-24\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600/10 to-indigo-600/10\"></div>\n        <div className=\"relative max-w-4xl mx-auto px-6 lg:px-8 text-center\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full mb-6 animate-float\">\n            <Shield className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-gray-900 mb-6\">\n            Privacy Policy\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-8 max-w-2xl mx-auto\">\n            Your privacy and data security are fundamental to how we build and operate ADEL\n          </p>\n          <div className=\"inline-flex items-center space-x-2 text-sm text-gray-500 bg-white/50 backdrop-blur-sm rounded-full px-4 py-2\">\n            <Sparkles className=\"w-4 h-4 text-blue-500\" />\n            <span>Last updated: June 24, 2025</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-4xl mx-auto px-6 lg:px-8 pb-16\">\n        <div className=\"bg-white rounded-2xl shadow-xl p-8 lg:p-12\">\n          <div className=\"space-y-12\">\n            \n            {/* Introduction */}\n            <section className=\"relative\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center\">\n                  <Eye className=\"w-6 h-6 text-white\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Introduction</h2>\n                  <div className=\"bg-gradient-to-r from-slate-50 to-blue-50 rounded-xl p-6 border border-slate-200\">\n                    <p className=\"text-gray-700 leading-relaxed mb-4\">\n                      At ADEL, we are committed to protecting your privacy and ensuring the security of your personal information.\n                    </p>\n                    <p className=\"text-gray-700 leading-relaxed\">\n                      This Privacy Policy explains how we collect, use, and safeguard your data when you use our NGO project management platform, ensuring transparency in all our data practices.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Information We Collect */}\n            <section className=\"relative\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-xl flex items-center justify-center\">\n                  <Database className=\"w-6 h-6 text-white\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Information We Collect</h2>\n                  <div className=\"grid gap-6\">\n                    <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-100 hover:border-blue-200 transition-colors duration-300\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-2 flex items-center\">\n                        <UserCheck className=\"w-5 h-5 mr-2 text-blue-600\" />\n                        Account Information\n                      </h3>\n                      <p className=\"text-gray-700\">Name, email address, organization details, and role within your organization.</p>\n                    </div>\n                    <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl p-6 border border-purple-100 hover:border-purple-200 transition-colors duration-300\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-2 flex items-center\">\n                        <Shield className=\"w-5 h-5 mr-2 text-purple-600\" />\n                        Project Data\n                      </h3>\n                      <p className=\"text-gray-700\">Project information, reports, files, and communications within your organization's workspace.</p>\n                    </div>\n                    <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl p-6 border border-green-100 hover:border-green-200 transition-colors duration-300\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-2 flex items-center\">\n                        <Eye className=\"w-5 h-5 mr-2 text-green-600\" />\n                        Usage Information\n                      </h3>\n                      <p className=\"text-gray-700\">How you interact with our platform, including pages visited and features used.</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* How We Use Your Information */}\n            <section className=\"relative\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-600 rounded-xl flex items-center justify-center\">\n                  <UserCheck className=\"w-6 h-6 text-white\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">How We Use Your Information</h2>\n                  <div className=\"bg-gradient-to-br from-white to-gray-50 rounded-xl p-6 border border-gray-200\">\n                    <p className=\"text-gray-700 mb-4\">We use your information responsibly to deliver the best possible service:</p>\n                    <ul className=\"space-y-3\">\n                      <li className=\"flex items-start space-x-3 group\">\n                        <div className=\"w-3 h-3 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full mt-1.5 flex-shrink-0 group-hover:scale-110 transition-transform duration-200\"></div>\n                        <span className=\"text-gray-700 group-hover:text-gray-900 transition-colors duration-200\">Provide and maintain our comprehensive project management services</span>\n                      </li>\n                      <li className=\"flex items-start space-x-3 group\">\n                        <div className=\"w-3 h-3 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full mt-1.5 flex-shrink-0 group-hover:scale-110 transition-transform duration-200\"></div>\n                        <span className=\"text-gray-700 group-hover:text-gray-900 transition-colors duration-200\">Enable seamless collaboration within your organization</span>\n                      </li>\n                      <li className=\"flex items-start space-x-3 group\">\n                        <div className=\"w-3 h-3 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full mt-1.5 flex-shrink-0 group-hover:scale-110 transition-transform duration-200\"></div>\n                        <span className=\"text-gray-700 group-hover:text-gray-900 transition-colors duration-200\">Send important updates and notifications about your projects</span>\n                      </li>\n                      <li className=\"flex items-start space-x-3 group\">\n                        <div className=\"w-3 h-3 bg-gradient-to-r from-orange-500 to-red-500 rounded-full mt-1.5 flex-shrink-0 group-hover:scale-110 transition-transform duration-200\"></div>\n                        <span className=\"text-gray-700 group-hover:text-gray-900 transition-colors duration-200\">Continuously improve our platform and develop new features</span>\n                      </li>\n                      <li className=\"flex items-start space-x-3 group\">\n                        <div className=\"w-3 h-3 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-full mt-1.5 flex-shrink-0 group-hover:scale-110 transition-transform duration-200\"></div>\n                        <span className=\"text-gray-700 group-hover:text-gray-900 transition-colors duration-200\">Ensure robust security and prevent unauthorized access</span>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Data Security */}\n            <section className=\"relative\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-gradient-to-r from-red-500 to-orange-600 rounded-xl flex items-center justify-center\">\n                  <Lock className=\"w-6 h-6 text-white\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Data Security</h2>\n                  <div className=\"bg-gradient-to-r from-red-50 to-orange-50 rounded-xl p-6 border border-red-100\">\n                    <p className=\"text-gray-700 leading-relaxed text-lg mb-4\">\n                      We implement industry-standard security measures to protect your data, including:\n                    </p>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                        <span className=\"text-gray-700\">End-to-end encryption</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n                        <span className=\"text-gray-700\">Secure cloud servers</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                        <span className=\"text-gray-700\">Regular security audits</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n                        <span className=\"text-gray-700\">Data isolation protocols</span>\n                      </div>\n                    </div>\n                    <p className=\"text-gray-700 leading-relaxed\">\n                      Your organization's data remains completely isolated and accessible only to authorized members of your team.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Contact */}\n            <section className=\"relative\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center\">\n                  <Mail className=\"w-6 h-6 text-white\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Contact Us</h2>\n                  <div className=\"bg-gradient-to-br from-slate-50 to-indigo-50 rounded-xl p-8 border border-indigo-200\">\n                    <p className=\"text-gray-700 leading-relaxed text-lg mb-8\">\n                      Have questions about this Privacy Policy or our data practices? We're here to help and ensure complete transparency about how we handle your information.\n                    </p>\n                    {submitted ? (\n                      <div className=\"bg-green-50 border border-green-200 rounded-lg p-6 text-center\">\n                        <div className=\"w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                          <Send className=\"w-6 h-6 text-white\" />\n                        </div>\n                        <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Message Sent Successfully!</h3>\n                        <p className=\"text-green-600\">Thank you for contacting us. We'll get back to you within 24 hours.</p>\n                      </div>\n                    ) : (\n                      <form onSubmit={handleSubmit} className=\"bg-white rounded-lg p-6 border border-indigo-100 shadow-sm space-y-4\">\n                        <div className=\"grid md:grid-cols-2 gap-4\">\n                          <div>\n                            <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                              Full Name *\n                            </label>\n                            <input\n                              type=\"text\"\n                              id=\"name\"\n                              name=\"name\"\n                              required\n                              value={formData.name}\n                              onChange={handleChange}\n                              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                              placeholder=\"Your full name\"\n                            />\n                          </div>\n                          <div>\n                            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                              Email Address *\n                            </label>\n                            <input\n                              type=\"email\"\n                              id=\"email\"\n                              name=\"email\"\n                              required\n                              value={formData.email}\n                              onChange={handleChange}\n                              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                              placeholder=\"your.email@example.com\"\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <label htmlFor=\"organization\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Organization\n                          </label>\n                          <input\n                            type=\"text\"\n                            id=\"organization\"\n                            name=\"organization\"\n                            value={formData.organization}\n                            onChange={handleChange}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                            placeholder=\"Your NGO or organization name\"\n                          />\n                        </div>\n                        <div>\n                          <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Message *\n                          </label>\n                          <textarea\n                            id=\"message\"\n                            name=\"message\"\n                            required\n                            rows={4}\n                            value={formData.message}\n                            onChange={handleChange}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                            placeholder=\"Please describe your questions about our privacy practices...\"\n                          />\n                        </div>\n                        <button\n                          type=\"submit\"\n                          disabled={isSubmitting}\n                          className=\"w-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white py-3 px-4 rounded-lg font-medium hover:from-blue-600 hover:to-indigo-700 focus:ring-4 focus:ring-blue-200 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\n                        >\n                          {isSubmitting ? (\n                            <>\n                              <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                              <span>Sending...</span>\n                            </>\n                          ) : (\n                            <>\n                              <Send className=\"w-4 h-4\" />\n                              <span>Send Message</span>\n                            </>\n                          )}\n                        </button>\n                      </form>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </section>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":19434},"client/src/pages/terms-of-service.tsx":{"content":"import AdelLogo from \"@/components/adel-logo\";\nimport { FileText, Users, Shield, Gavel, AlertCircle, Mail, ChevronRight, Sparkles, Scale, Send } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function TermsOfService() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    organization: '',\n    message: ''\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    // Simulate form submission\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    setSubmitted(true);\n    setIsSubmitting(false);\n    setFormData({ name: '', email: '', organization: '', message: '' });\n    \n    // Reset success message after 3 seconds\n    setTimeout(() => setSubmitted(false), 3000);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50\">\n      {/* Header */}\n      <header className=\"bg-white/80 backdrop-blur-lg shadow-sm sticky top-0 z-50 border-b border-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4 group\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl blur-md opacity-75\"></div>\n                <div className=\"relative p-3 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl shadow-xl\">\n                  <AdelLogo size=\"sm\" className=\"filter brightness-0 invert\" />\n                </div>\n              </div>\n              <span className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n                ADEL\n              </span>\n            </div>\n            <a\n              href=\"/\"\n              className=\"group flex items-center space-x-2 px-4 py-2 text-gray-600 hover:text-white hover:bg-gradient-to-r hover:from-blue-500 hover:to-indigo-600 rounded-lg transition-all duration-300 font-medium\"\n            >\n              <span>Back to Home</span>\n              <ChevronRight className=\"w-4 h-4 group-hover:translate-x-1 transition-transform duration-300\" />\n            </a>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <div className=\"relative py-16 lg:py-24\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600/10 to-indigo-600/10\"></div>\n        <div className=\"relative max-w-4xl mx-auto px-6 lg:px-8 text-center\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full mb-6 animate-float\">\n            <Gavel className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-gray-900 mb-6\">\n            Terms of Service\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-8 max-w-2xl mx-auto\">\n            Clear and fair terms that govern the use of our NGO management platform\n          </p>\n          <div className=\"inline-flex items-center space-x-2 text-sm text-gray-500 bg-white/50 backdrop-blur-sm rounded-full px-4 py-2\">\n            <Sparkles className=\"w-4 h-4 text-blue-500\" />\n            <span>Last updated: June 24, 2025</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-4xl mx-auto px-6 lg:px-8 pb-16\">\n        <div className=\"bg-white rounded-2xl shadow-xl p-8 lg:p-12\">\n          <div className=\"space-y-12\">\n            \n            {/* Agreement to Terms */}\n            <section className=\"relative\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center\">\n                  <Gavel className=\"w-6 h-6 text-white\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Agreement to Terms</h2>\n                  <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-100\">\n                    <p className=\"text-gray-700 leading-relaxed text-lg mb-4\">\n                      By accessing and using ADEL's project management platform, you agree to be bound by these Terms of Service.\n                    </p>\n                    <p className=\"text-gray-700 leading-relaxed\">\n                      These terms ensure a fair and secure environment for all NGOs using our platform. If you disagree with any part of these terms, please contact us before using the service.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Description of Service */}\n            <section className=\"relative\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-gradient-to-r from-emerald-500 to-teal-600 rounded-xl flex items-center justify-center\">\n                  <FileText className=\"w-6 h-6 text-white\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Description of Service</h2>\n                  <div className=\"bg-gradient-to-r from-emerald-50 to-teal-50 rounded-xl p-6 border border-emerald-100\">\n                    <p className=\"text-gray-700 leading-relaxed text-lg mb-4\">\n                      ADEL provides a comprehensive web-based project management platform specifically designed for NGOs and non-profit organizations.\n                    </p>\n                    <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-emerald-500 rounded-full\"></div>\n                        <span className=\"text-gray-700\">Project tracking</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-teal-500 rounded-full\"></div>\n                        <span className=\"text-gray-700\">Team collaboration</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-emerald-500 rounded-full\"></div>\n                        <span className=\"text-gray-700\">Report management</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-teal-500 rounded-full\"></div>\n                        <span className=\"text-gray-700\">Communication tools</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* Contact Information */}\n            <section className=\"relative\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center\">\n                  <Mail className=\"w-6 h-6 text-white\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Contact Information</h2>\n                  <div className=\"bg-gradient-to-br from-slate-50 to-indigo-50 rounded-xl p-8 border border-indigo-200\">\n                    <p className=\"text-gray-700 leading-relaxed text-lg mb-8\">\n                      Need clarification on these Terms of Service? Our team is available to help you understand how these terms apply to your NGO's specific use case.\n                    </p>\n                    {submitted ? (\n                      <div className=\"bg-green-50 border border-green-200 rounded-lg p-6 text-center\">\n                        <div className=\"w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                          <Send className=\"w-6 h-6 text-white\" />\n                        </div>\n                        <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Message Sent Successfully!</h3>\n                        <p className=\"text-green-600\">Thank you for contacting us. We'll get back to you within 24 hours.</p>\n                      </div>\n                    ) : (\n                      <form onSubmit={handleSubmit} className=\"bg-white rounded-lg p-6 border border-indigo-100 shadow-sm space-y-4\">\n                        <div className=\"grid md:grid-cols-2 gap-4\">\n                          <div>\n                            <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                              Full Name *\n                            </label>\n                            <input\n                              type=\"text\"\n                              id=\"name\"\n                              name=\"name\"\n                              required\n                              value={formData.name}\n                              onChange={handleChange}\n                              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                              placeholder=\"Your full name\"\n                            />\n                          </div>\n                          <div>\n                            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                              Email Address *\n                            </label>\n                            <input\n                              type=\"email\"\n                              id=\"email\"\n                              name=\"email\"\n                              required\n                              value={formData.email}\n                              onChange={handleChange}\n                              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                              placeholder=\"your.email@example.com\"\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <label htmlFor=\"organization\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Organization\n                          </label>\n                          <input\n                            type=\"text\"\n                            id=\"organization\"\n                            name=\"organization\"\n                            value={formData.organization}\n                            onChange={handleChange}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                            placeholder=\"Your NGO or organization name\"\n                          />\n                        </div>\n                        <div>\n                          <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Message *\n                          </label>\n                          <textarea\n                            id=\"message\"\n                            name=\"message\"\n                            required\n                            rows={4}\n                            value={formData.message}\n                            onChange={handleChange}\n                            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200\"\n                            placeholder=\"Please describe your questions about our Terms of Service...\"\n                          />\n                        </div>\n                        <button\n                          type=\"submit\"\n                          disabled={isSubmitting}\n                          className=\"w-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white py-3 px-4 rounded-lg font-medium hover:from-blue-600 hover:to-indigo-700 focus:ring-4 focus:ring-blue-200 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\n                        >\n                          {isSubmitting ? (\n                            <>\n                              <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                              <span>Sending...</span>\n                            </>\n                          ) : (\n                            <>\n                              <Send className=\"w-4 h-4\" />\n                              <span>Send Message</span>\n                            </>\n                          )}\n                        </button>\n                      </form>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </section>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13599},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Overview\n\nADEL (Automated Data-Enhanced Ledger) is an AI-powered project management and reporting system designed for NGOs, government agencies, and organizations with distributed teams. The platform facilitates collaboration between administrators and field officers through role-based dashboards, real-time messaging, automated report review, and comprehensive analytics. Key features include AI-enhanced report analysis, project progress tracking, budget management, deadline monitoring, and PDF report generation for stakeholders.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript\n- **Build Tool**: Vite with custom configuration\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **Charts**: Recharts for data visualization and analytics dashboards\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Authentication**: Session-based with express-session middleware\n- **File Handling**: Multer for multipart form uploads with local storage\n- **API Design**: RESTful endpoints with role-based access control\n- **Background Services**: Deadline tracking service with automated notifications\n\n## Data Storage Solutions\n- **Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM with schema-first approach\n- **Schema Design**: \n  - Organizations with unique access codes\n  - Role-based users (admin/officer) linked to organizations\n  - Projects with budget tracking, deadlines, and progress\n  - Reports with file attachments and approval workflow\n  - Messages system for admin-officer communication\n  - Meeting bookings for prospect management\n\n## Authentication and Authorization\n- **Session Management**: Express-session with organization-scoped access\n- **Password Security**: BCrypt hashing with salt rounds\n- **Role-Based Access**: Middleware enforcement for admin vs officer permissions\n- **Organization Isolation**: All data queries filtered by organizationId\n\n## External Dependencies\n- **AI Integration**: OpenAI GPT-4o for intelligent report analysis and dashboard insights\n- **Email Service**: SendGrid for automated notifications (optional configuration)\n- **File Storage**: Local filesystem with organized upload directory structure\n- **Deployment**: Designed for Replit with development tooling integration\n- **Monitoring**: Built-in logging and error tracking for API endpoints","size_bytes":2726}},"version":1}